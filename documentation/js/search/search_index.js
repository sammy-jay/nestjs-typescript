var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/entities/Address.html",[0,1.816,1,2.334]],["body/entities/Address.html",[0,2.548,1,3.711,2,2.418,3,0.111,4,0.1,5,0.1,6,3.926,7,0.346,8,1.286,9,4.206,10,5.482,11,5.482,12,1.941,13,5.482,14,2.897,15,0.548,16,0.01,17,1.727,18,1.765,19,4.783,20,0.797,21,4.462,22,4.462,23,1.758,24,4.052,25,4.462,26,4.462,27,6.025,28,4.462,29,6.041,30,4.462,31,0.227,32,5.314,33,1.882,34,4.462,35,0.12,36,0.111,37,1.716,38,0.007,39,0.007]],["title/modules/AppModule.html",[40,1.071,41,3.192]],["body/modules/AppModule.html",[3,0.058,4,0.053,5,0.053,9,1.136,16,0.01,31,0.317,35,0.063,36,0.058,38,0.004,39,0.004,40,0.935,41,6.401,42,0.878,43,1.638,44,2.07,45,2.07,46,4.093,47,4.339,48,4.339,49,4.339,50,4.339,51,4.093,52,3.698,53,4.339,54,4.339,55,4.339,56,4.093,57,4.093,58,4.093,59,4.339,60,4.339,61,3.698,62,1.752,63,1.096,64,1.096,65,2.353,66,1.919,67,0.305,68,1.883,69,2.336,70,0.829,71,2.353,72,2.07,73,2.353,74,2.07,75,2.353,76,3.76,77,1.884,78,2.462,79,2.353,80,1.884,81,2.353,82,2.353,83,1.541,84,3.307,85,0.722,86,1.541,87,2.353,88,2.353,89,2.353,90,2.353,91,1.693,92,1.633,93,2.353,94,2.353,95,1.884,96,2.353,97,2.353,98,1.633,99,3.76,100,2.07,101,3.76,102,2.07,103,1.884,104,2.07,105,2.07,106,1.633,107,2.353,108,1.462,109,2.07,110,2.07,111,1.745,112,1.745,113,2.353,114,2.353,115,2.353,116,2.353,117,1.883,118,2.353,119,2.787,120,2.353,121,2.353,122,2.07,123,2.61,124,2.353,125,3.481,126,2.353,127,2.353,128,2.07,129,2.353,130,1.462,131,1.541,132,0.649,133,1.884,134,2.07,135,2.07,136,2.353,137,2.353,138,2.353,139,2.353,140,8.188,141,2.353,142,5.362,143,2.353,144,2.353,145,2.353,146,2.353,147,2.353,148,2.353,149,2.353,150,2.353,151,2.353,152,2.353,153,2.353,154,2.353,155,2.353,156,2.353,157,2.353,158,2.353,159,2.07,160,2.07,161,2.353,162,2.353,163,2.353,164,2.07,165,2.07,166,2.353,167,2.353,168,1.025,169,2.07,170,2.353]],["title/controllers/AuthController.html",[171,1.517,172,3.192]],["body/controllers/AuthController.html",[1,3.797,3,0.069,4,0.063,5,0.063,7,0.217,14,2.549,15,0.455,16,0.01,18,1.466,20,0.662,31,0.279,35,0.075,36,0.069,38,0.005,39,0.005,67,0.363,85,1.612,108,1.739,132,2.159,171,0.987,172,3.195,173,0.987,174,2.464,175,1.458,176,1.834,177,1.044,178,4.309,179,4.309,180,4.309,181,3.195,182,4.205,183,2.8,184,3.968,185,2.8,186,2.8,187,1.356,188,1.189,189,1.287,190,3.765,191,1.504,192,1.75,193,2.8,194,2.8,195,2.8,196,2.8,197,2.8,198,2.8,199,2.8,200,2.8,201,2.8,202,2.464,203,4.095,204,4.309,205,2.8,206,3.791,207,2.159,208,2.8,209,2.076,210,0.933,211,1.584,212,1.458,213,2.076,214,2.847,215,1.944,216,1.944,217,1.352,218,2.464,219,2.076,220,2.8,221,2.8,222,2.076,223,2.8,224,2.464,225,1.584,226,2.365,227,1.657,228,3.263,229,1.305,230,2.242,231,2.8,232,2.8,233,0.815,234,1.489,235,3.195,236,2.336,237,2.8,238,2.8,239,1.713,240,4.621,241,2.8,242,2.01,243,2.241,244,2.8,245,2.8,246,2.8,247,2.8,248,2.8,249,3.45,250,3.791,251,5.19,252,4.309,253,3.791,254,2.076,255,2.8,256,2.8,257,2.242,258,4.621,259,3.895,260,2.464,261,2.8,262,2.8,263,2.8,264,2.242,265,2.8,266,2.8,267,2.8,268,2.8,269,2.8]],["title/modules/AuthModule.html",[40,1.071,46,2.82]],["body/modules/AuthModule.html",[3,0.09,4,0.081,5,0.081,16,0.01,31,0.31,35,0.098,36,0.09,38,0.006,39,0.006,40,1.298,42,1.351,43,2.273,46,5.65,51,4.844,62,2.432,63,1.687,64,1.687,66,2.501,67,0.47,68,3.066,69,2.918,70,1.276,108,2.249,109,3.185,130,2.249,131,2.371,132,0.999,168,2.273,172,4.537,173,1.839,214,4.476,215,2.513,229,1.687,270,3.185,271,3.185,272,3.185,273,3.185,274,5.135,275,5.135,276,5.135,277,5.135,278,5.135,279,3.62,280,2.952,281,3.185,282,5.219,283,1.885,284,3.62,285,3.185,286,2.371,287,3.62,288,5.219,289,3.62,290,3.242,291,3.088,292,2.513,293,3.62,294,3.62,295,3.62,296,2.513,297,2.898,298,3.62,299,2.898,300,3.62]],["title/injectables/AuthService.html",[214,2.334,301,0.783]],["body/injectables/AuthService.html",[1,1.196,3,0.055,4,0.049,5,0.049,7,0.171,12,1.464,14,1.585,15,0.457,16,0.01,17,1.699,20,0.692,23,1.767,31,0.25,35,0.059,36,0.055,37,1.373,38,0.004,39,0.004,67,0.286,69,2.784,70,0.778,85,1.864,91,1.608,119,3.831,132,2.122,177,0.865,181,1.636,182,2.859,187,1.361,188,1.194,189,1.292,191,1.51,192,1.721,202,3.141,203,3.587,206,3.141,214,1.935,216,1.532,226,2.735,233,1.039,234,1.274,239,1.633,242,2.2,243,1.89,250,1.942,253,3.141,254,2.647,286,1.445,296,3.122,299,2.859,301,0.649,302,0.756,303,1.942,304,3.571,305,5.167,306,3.571,307,3.571,308,3.571,309,3.571,310,1.942,311,5.118,312,2.207,313,3.571,314,3.058,315,2.207,316,2.207,317,3.571,318,5.855,319,2.207,320,2.218,321,3.571,322,2.207,323,3.571,324,2.207,325,2.479,326,2.207,327,3.571,328,5.167,329,2.207,330,2.207,331,4.543,332,1.767,333,2.207,334,2.859,335,1.942,336,2.207,337,3.122,338,2.207,339,3.21,340,1.636,341,1.532,342,3.571,343,2.207,344,1.942,345,2.647,346,3.571,347,2.207,348,2.207,349,2.479,350,2.207,351,2.207,352,2.408,353,1.987,354,1.767,355,2.207,356,3.956,357,2.207,358,2.207,359,3.956,360,2.207,361,1.942,362,2.207,363,2.647,364,2.859,365,3.571,366,2.207,367,3.122,368,5.167,369,2.207,370,3.141,371,3.571,372,2.207,373,5.167,374,4.137,375,5.167,376,3.571,377,2.207,378,2.207,379,2.207,380,1.767,381,3.571,382,1.942,383,1.942,384,1.942]],["title/controllers/CategoriesController.html",[171,1.517,385,3.192]],["body/controllers/CategoriesController.html",[3,0.087,4,0.079,5,0.079,7,0.274,12,1.874,15,0.473,16,0.01,17,1.317,18,1.617,20,0.731,31,0.284,35,0.095,36,0.087,38,0.006,39,0.006,67,0.457,78,2.308,80,2.821,171,1.242,173,1.242,175,1.835,177,1.24,187,1.408,188,1.235,189,1.337,191,1.659,207,2.564,209,2.613,210,1.705,212,1.835,217,1.702,234,0.999,235,4.469,236,1.91,239,1.889,249,2.821,264,2.821,385,3.795,386,3.1,387,2.613,388,4.503,389,4.503,390,5.819,391,4.503,392,4.503,393,3.1,394,4.332,395,3.524,396,3.524,397,4.552,398,3.524,399,4.952,400,3.1,401,3.524,402,3.524,403,3.524,404,3.524,405,3.1,406,3.524,407,3.1,408,4.592,409,3.1,410,3.524,411,2.613,412,3.1,413,3.1,414,2.085,415,2.613,416,2.446,417,2.821,418,3.947,419,3.1,420,2.613,421,4.098,422,3.1,423,3.524,424,3.1,425,1.993,426,3.524,427,3.1,428,3.524,429,3.524,430,3.1,431,3.524,432,3.524,433,3.1,434,3.524,435,3.524,436,3.1,437,3.524,438,3.524]],["title/modules/CategoriesModule.html",[40,1.071,47,2.989]],["body/modules/CategoriesModule.html",[3,0.134,4,0.121,5,0.121,16,0.01,31,0.307,35,0.146,36,0.134,38,0.008,39,0.008,40,1.703,42,2.018,43,2.983,47,5.785,62,3.192,63,2.519,64,2.519,66,2.209,67,0.701,168,2.983,173,2.413,385,5.574,397,3.357,418,5.457,419,4.755,439,4.755,440,4.755,441,5.405,442,5.405,443,3.198,444,2.279,445,4.755,446,5.405]],["title/injectables/CategoriesService.html",[301,0.783,418,2.82]],["body/injectables/CategoriesService.html",[3,0.079,4,0.071,5,0.071,7,0.248,12,1.912,15,0.482,16,0.01,20,0.736,23,2.24,31,0.276,33,1.346,35,0.086,36,0.079,38,0.005,39,0.005,67,0.414,85,0.98,132,2.286,177,1.153,187,1.436,188,1.26,189,1.363,191,1.593,192,2.101,210,1.896,233,1.385,234,0.905,239,1.814,242,1.885,243,2.441,301,0.865,302,1.094,352,2.652,353,2.188,388,4.187,389,4.187,390,5.549,391,4.187,392,4.187,393,4.187,394,4.13,397,4.552,407,4.187,408,4.378,418,3.117,420,2.367,421,3.81,422,2.809,444,1.346,445,2.809,447,2.809,448,3.192,449,3.732,450,3.192,451,4.759,452,3.192,453,4.759,454,3.192,455,3.192,456,4.759,457,3.192,458,3.192,459,1.889,460,2.367,461,3.192,462,2.809,463,3.192,464,3.192,465,3.304,466,3.117,467,4.759,468,5.69,469,4.759,470,3.192,471,3.192,472,3.192,473,5.69,474,2.809,475,3.192,476,2.809]],["title/entities/Category.html",[0,1.816,397,2.675]],["body/entities/Category.html",[0,2.734,2,2.69,3,0.123,4,0.111,5,0.111,7,0.385,8,1.38,9,4.11,12,2.046,15,0.516,16,0.01,17,1.417,18,1.662,19,4.273,20,0.751,23,1.887,24,4.273,31,0.244,33,2.093,35,0.134,36,0.123,37,1.908,38,0.007,39,0.007,210,2.765,397,4.485,466,4.729,477,4.367,478,4.273,479,4.963,480,4.963,481,5.704,482,4.963,483,4.963,484,4.367,485,5.704]],["title/classes/CategoryNotFoundException.html",[35,0.116,460,3.192]],["body/classes/CategoryNotFoundException.html",[3,0.144,4,0.13,5,0.13,12,1.648,15,0.416,16,0.01,20,0.605,23,2.262,31,0.219,35,0.157,36,0.144,38,0.008,39,0.008,67,0.754,187,1.238,188,1.086,189,1.175,233,1.692,460,5.315,486,1.737,487,6.307,488,4.655,489,3.228,490,5.395,491,7.169,492,5.115,493,7.169,494,5.814,495,4.036]],["title/classes/ChatGateway.html",[35,0.116,496,3.192]],["body/classes/ChatGateway.html",[3,0.09,4,0.081,5,0.081,7,0.282,8,1.115,15,0.509,16,0.01,17,1.341,18,1.412,20,0.74,31,0.231,35,0.098,36,0.09,38,0.006,39,0.006,103,5.932,132,2.197,177,1.269,187,1.429,188,1.253,189,1.357,191,1.449,192,1.212,233,1.059,234,1.031,239,0.978,242,1.834,243,2.37,425,2.058,486,1.087,496,3.883,497,3.201,498,3.636,499,6.137,500,5.238,501,6.137,502,5.238,503,3.638,504,4.852,505,5.238,506,6.137,507,5.238,508,7.489,509,3.638,510,3.638,511,5.238,512,3.638,513,3.254,514,3.638,515,5.238,516,3.638,517,4.608,518,3.638,519,3.638,520,5.238,521,3.638,522,5.238,523,2.913,524,2.913,525,3.201,526,3.638,527,3.638,528,6.137,529,2.839,530,3.195,531,3.638,532,3.638,533,3.638,534,4.608,535,3.638,536,3.638]],["title/modules/ChatModule.html",[40,1.071,48,2.989]],["body/modules/ChatModule.html",[3,0.124,4,0.111,5,0.111,16,0.01,31,0.307,35,0.134,36,0.124,38,0.007,39,0.007,40,1.616,42,1.859,43,2.831,46,5.34,48,5.912,62,3.028,63,2.321,64,2.321,66,2.656,67,0.646,168,2.831,280,3.675,443,2.947,444,2.1,496,4.818,504,5.704,525,4.381,530,2.593,537,4.381,538,4.381,539,4.98,540,4.381,541,4.98,542,4.98,543,4.98,544,4.381,545,4.98]],["title/injectables/ChatService.html",[301,0.783,504,2.82]],["body/injectables/ChatService.html",[3,0.09,4,0.081,5,0.081,7,0.281,14,2.686,15,0.437,16,0.01,17,1.337,20,0.697,31,0.299,33,1.527,35,0.098,36,0.09,38,0.006,39,0.006,67,0.47,85,1.602,132,2.194,177,1.265,187,1.303,188,1.143,189,1.237,191,1.445,192,2.039,214,3.63,233,1.519,234,1.479,239,1.646,242,2.002,243,2.039,259,3.87,301,0.949,302,1.24,352,1.687,353,1.392,363,2.684,380,2.898,444,1.527,449,3.963,459,2.142,465,2.513,504,3.418,508,6.247,513,3.242,523,2.898,524,2.898,529,3.848,530,1.885,544,3.185,546,3.185,547,6.698,548,5.219,549,5.219,550,3.62,551,6.12,552,3.62,553,5.219,554,3.62,555,5.219,556,3.62,557,5.219,558,3.62,559,3.62,560,3.62,561,3.62,562,2.047,563,3.62,564,3.62,565,5.219,566,3.62,567,3.62,568,3.62,569,5.219,570,3.62,571,3.62,572,3.62]],["title/classes/CheckVerificationCodeDto.html",[35,0.116,573,3.192]],["body/classes/CheckVerificationCodeDto.html",[3,0.145,4,0.13,5,0.13,7,0.453,8,1.53,15,0.417,16,0.01,17,1.57,18,1.343,20,0.607,31,0.219,35,0.194,36,0.145,38,0.008,39,0.008,486,1.744,573,5.328,574,6.322,575,5.753,576,4.673,577,5.773,578,5.837,579,5.837,580,3.47,581,3.895,582,5.837,583,2.462,584,5.837]],["title/entities/Comment.html",[0,1.816,585,2.435]],["body/entities/Comment.html",[0,2.537,2,2.404,3,0.11,4,0.099,5,0.099,7,0.344,8,1.281,9,4.132,12,1.935,14,2.696,15,0.523,16,0.01,17,1.314,18,1.684,19,4.039,20,0.761,23,1.75,24,4.039,31,0.275,33,1.87,35,0.162,36,0.11,37,1.705,38,0.007,39,0.007,210,2.803,513,4.241,529,4.147,562,2.508,585,3.861,586,3.902,587,4.435,588,5.292,589,4.435,590,4.435,591,4.435,592,3.551,593,6.016,594,4.435,595,4.816,596,2.904,597,4.435,598,5.061]],["title/controllers/CommentsController.html",[171,1.517,599,3.192]],["body/controllers/CommentsController.html",[3,0.102,4,0.091,5,0.091,7,0.318,14,2.008,15,0.407,16,0.01,18,1.311,20,0.593,31,0.303,35,0.11,36,0.102,38,0.006,39,0.006,67,0.532,85,1.258,132,2.126,171,1.444,173,1.444,175,2.134,177,1.381,184,3.547,187,1.213,188,1.064,189,1.151,191,1.346,192,1.898,207,2.855,210,2.182,211,4.208,212,2.134,217,1.979,225,2.318,236,2.221,239,1.532,242,1.225,414,2.425,420,3.039,425,2.318,585,3.223,599,4.225,600,3.606,601,3.606,602,6.551,603,5.698,604,4.099,605,4.915,606,4.099,607,4.099,608,5.249,609,4.099,610,2.684,611,6.551,612,6.551,613,2.845,614,2.318,615,2.845,616,4.099,617,3.606,618,3.606,619,4.099,620,4.099,621,2.845,622,4.099,623,3.606,624,4.099,625,3.606,626,4.099,627,4.099,628,4.099,629,2.845,630,4.099,631,4.099]],["title/modules/CommentsModule.html",[40,1.071,49,2.989]],["body/modules/CommentsModule.html",[3,0.136,4,0.122,5,0.122,16,0.01,31,0.319,35,0.148,36,0.136,38,0.008,39,0.008,40,1.72,42,2.048,49,4.8,66,2.242,67,0.712,168,2.39,173,2.436,443,3.246,444,2.314,585,3.103,599,5.613,613,3.808,632,5.486,633,5.486,634,6.914,635,5.126,636,5.486,637,5.486,638,4.392,639,5.126,640,5.486,641,5.486,642,5.486]],["title/classes/ConfirmEmailDto.html",[35,0.116,643,3.447]],["body/classes/ConfirmEmailDto.html",[3,0.146,4,0.131,5,0.131,7,0.457,8,1.537,15,0.421,16,0.01,17,1.578,18,1.354,20,0.612,31,0.221,35,0.195,36,0.146,38,0.008,39,0.008,229,3.365,325,5.424,486,1.758,580,3.487,581,3.914,583,2.482,643,5.782,644,6.354,645,5.177,646,3.482,647,5.884]],["title/classes/CreateCategoryDto.html",[35,0.116,394,2.82]],["body/classes/CreateCategoryDto.html",[3,0.146,4,0.131,5,0.131,7,0.457,8,1.537,15,0.421,16,0.01,17,1.578,18,1.354,20,0.612,31,0.221,35,0.195,36,0.146,38,0.008,39,0.008,394,4.729,478,4.624,486,1.758,580,3.487,581,3.914,583,2.482,648,6.354,649,4.711,650,5.884,651,5.884,652,4.711,653,5.884]],["title/classes/CreateCommentCommand.html",[35,0.116,615,2.989]],["body/classes/CreateCommentCommand.html",[3,0.128,4,0.115,5,0.115,7,0.4,8,1.415,9,3.974,14,2.833,15,0.526,16,0.01,20,0.765,31,0.25,35,0.139,36,0.128,38,0.007,39,0.007,187,1.098,188,0.963,189,1.042,233,1.934,234,2.333,486,1.541,529,4.357,562,2.916,585,4.393,605,5.581,615,4.614,618,4.536,654,6.834,655,4.536,656,5.156,657,5.156,658,5.156,659,5.156,660,4.128]],["title/classes/CreateCommentDto.html",[35,0.116,605,2.989]],["body/classes/CreateCommentDto.html",[3,0.131,4,0.118,5,0.118,7,0.41,8,1.438,15,0.561,16,0.01,17,1.476,18,1.554,20,0.702,31,0.28,35,0.201,36,0.167,37,2.033,38,0.008,39,0.008,210,2.479,486,1.58,513,4.623,580,3.261,581,3.66,583,2.23,596,3.462,605,5.166,646,3.128,660,5.958,661,4.651,662,5.287,663,5.814,664,5.287,665,5.287,666,6.754,667,5.287]],["title/classes/CreateCommentHandler.html",[35,0.116,635,3.192]],["body/classes/CreateCommentHandler.html",[3,0.116,4,0.105,5,0.105,7,0.364,15,0.447,16,0.01,20,0.65,31,0.293,33,1.979,35,0.126,36,0.116,38,0.007,39,0.007,85,1.44,132,1.939,177,1.514,187,1.33,188,1.166,189,1.262,191,1.108,192,1.563,233,1.818,239,1.262,242,1.402,243,2.081,444,1.979,449,4.431,459,2.776,486,1.402,498,4.337,529,2.543,585,2.653,613,3.257,615,5.199,617,4.128,635,4.632,638,3.756,668,6.179,669,4.128,670,7.024,671,5.496,672,4.128,673,4.692,674,5.496,675,6.248,676,4.692,677,4.692,678,4.692,679,4.692,680,4.692,681,4.128,682,5.496,683,4.692,684,4.692,685,4.692,686,4.692]],["title/classes/CreatePostDto.html",[35,0.116,687,2.82]],["body/classes/CreatePostDto.html",[3,0.133,4,0.119,5,0.119,7,0.415,8,1.448,15,0.486,16,0.01,17,1.72,18,1.565,20,0.707,31,0.201,35,0.183,36,0.133,38,0.008,39,0.008,117,2.678,387,3.963,478,4.426,486,1.597,580,3.612,581,4.054,583,2.254,646,3.163,687,4.454,688,6.581,689,4.279,690,4.898,691,4.703,692,4.703,693,5.345,694,5.345,695,5.983,696,5.445,697,5.345]],["title/classes/CreatePostInput.html",[35,0.116,698,3.192]],["body/classes/CreatePostInput.html",[3,0.14,4,0.126,5,0.126,7,0.439,8,1.5,15,0.504,16,0.01,17,1.806,18,1.622,20,0.733,31,0.213,35,0.152,36,0.14,38,0.008,39,0.008,98,3.926,478,4.543,486,1.69,690,5.027,698,5.225,699,4.976,700,5.656,701,5.656,702,8.036,703,5.656,704,7.048]],["title/classes/CreateSubscriberDto.html",[35,0.116,705,3.192]],["body/classes/CreateSubscriberDto.html",[3,0.138,4,0.124,5,0.124,7,0.432,8,1.486,15,0.499,16,0.01,17,1.746,18,1.606,20,0.726,31,0.209,35,0.188,36,0.138,38,0.008,39,0.008,91,3.433,188,1.423,486,1.664,580,3.681,581,3.783,583,2.349,646,3.296,705,5.175,706,6.707,707,4.9,708,4.459,709,5.57,710,5.57,711,5.588]],["title/classes/CreateUserDto.html",[35,0.116,712,3.192]],["body/classes/CreateUserDto.html",[1,4.5,3,0.132,4,0.119,5,0.119,7,0.413,8,1.445,10,4.264,11,4.264,13,4.264,15,0.562,16,0.01,17,1.884,20,0.818,35,0.144,36,0.132,38,0.008,39,0.008,91,3.363,188,1.394,314,4.419,486,1.591,712,5.031,713,7.144,714,4.685,715,5.326,716,5.326,717,5.326,718,5.326,719,2.668]],["title/modules/DatabaseModule.html",[40,1.071,50,2.989]],["body/modules/DatabaseModule.html",[2,2.876,3,0.132,4,0.118,5,0.118,15,0.379,16,0.01,31,0.295,35,0.143,36,0.132,38,0.008,39,0.008,40,1.684,42,1.981,50,4.699,66,2.766,67,0.689,68,3.391,69,3.42,70,1.87,117,2.658,123,3.684,125,3.934,130,3.296,131,3.475,314,3.14,374,4.248,443,3.14,444,2.238,720,5.306,721,4.248,722,5.306,723,5.306,724,5.306,725,5.306,726,4.668,727,5.306,728,5.306,729,5.306,730,5.306,731,5.306,732,5.306,733,5.306]],["title/controllers/EmailConfirmationController.html",[171,1.517,734,3.192]],["body/controllers/EmailConfirmationController.html",[3,0.107,4,0.097,5,0.097,7,0.336,15,0.423,16,0.01,17,1.473,18,1.362,20,0.615,31,0.272,35,0.117,36,0.107,38,0.007,39,0.007,67,0.562,85,1.329,91,3.036,108,4.188,132,2.162,171,1.526,173,1.526,175,2.254,177,1.434,184,3.63,187,1.26,188,1.105,189,1.196,190,3.081,191,1.398,210,1.442,211,2.449,212,2.254,217,2.091,225,2.449,228,4.188,229,3.142,230,3.466,233,1.26,234,1.227,236,2.347,242,1.294,243,2.246,325,4.68,414,2.562,610,2.835,614,2.449,734,4.388,735,3.809,736,6.376,737,5.918,738,5.206,739,4.33,740,5.918,741,4.33,742,4.33,743,5.918,744,4.33,745,4.33,746,3.809,747,4.33,748,4.33,749,4.33,750,4.33,751,4.33,752,4.33]],["title/guards/EmailConfirmationGuard.html",[753,3.447,754,3.192]],["body/guards/EmailConfirmationGuard.html",[3,0.13,4,0.117,5,0.117,7,0.406,15,0.374,16,0.01,20,0.544,31,0.252,35,0.141,36,0.13,38,0.008,39,0.008,67,0.679,91,2.355,117,2.62,177,1.626,184,3.36,187,1.113,188,0.977,189,1.057,190,2.723,191,1.235,225,2.958,229,3.126,239,1.406,242,1.563,301,1.219,352,2.437,353,2.011,498,3.631,614,2.958,754,4.973,755,5.23,756,5.37,757,4.601,758,7.81,759,6.707,760,6.871,761,5.23,762,4.187,763,3.878,764,3.878,765,5.23,766,5.23,767,5.23,768,5.23]],["title/modules/EmailConfirmationModule.html",[40,1.071,51,2.82]],["body/modules/EmailConfirmationModule.html",[3,0.115,4,0.103,5,0.103,16,0.01,31,0.307,35,0.124,36,0.115,38,0.007,39,0.007,40,1.537,42,1.724,43,2.693,51,5.599,52,4.724,61,4.724,62,2.881,63,2.152,64,2.152,66,2.526,67,0.599,68,3.096,70,1.627,91,2.784,108,2.868,168,2.693,173,2.178,228,5.349,229,2.152,230,3.697,280,3.496,285,5.438,286,3.024,734,5.166,769,4.062,770,4.062,771,4.062,772,4.618,773,4.618,774,4.618,775,3.697,776,4.062]],["title/injectables/EmailConfirmationService.html",[228,2.675,301,0.783]],["body/injectables/EmailConfirmationService.html",[3,0.065,4,0.092,5,0.059,7,0.205,12,0.748,14,1.45,15,0.443,16,0.01,17,1.592,20,0.644,23,1.472,31,0.274,35,0.071,36,0.065,38,0.005,39,0.005,67,0.342,69,2.986,70,0.93,85,1.754,91,2.956,108,4.078,132,2.129,159,2.321,160,2.321,177,0.997,187,1.319,188,1.157,189,1.252,191,1.349,192,1.371,226,3.087,227,1.561,228,2.556,229,3.059,233,1.197,234,1.619,239,1.106,242,2.269,243,2.064,286,1.728,296,2.856,299,2.112,301,0.748,302,0.904,311,5.489,325,3.512,337,1.831,341,1.831,345,1.956,349,1.831,352,2.887,353,2.382,354,3.294,361,2.321,367,3.967,370,2.321,374,2.112,382,2.321,721,3.294,736,4.45,738,3.62,777,2.321,778,4.115,779,4.115,780,4.115,781,2.321,782,3.884,783,2.638,784,4.115,785,2.638,786,4.115,787,2.638,788,4.115,789,2.638,790,4.115,791,2.638,792,2.856,793,2.112,794,3.051,795,2.638,796,3.62,797,4.115,798,2.638,799,4.115,800,3.62,801,3.051,802,2.638,803,2.638,804,2.638,805,2.638,806,2.638,807,2.638,808,2.638,809,2.638,810,2.638,811,2.638,812,4.115,813,2.638,814,2.321,815,2.112,816,2.112,817,2.638,818,2.638,819,4.115,820,5.059,821,3.62,822,2.638,823,2.638,824,2.112,825,2.638,826,2.638,827,2.638,828,2.638,829,2.638,830,2.638]],["title/modules/EmailModule.html",[40,1.071,52,2.548]],["body/modules/EmailModule.html",[3,0.131,4,0.118,5,0.118,16,0.01,31,0.295,35,0.143,36,0.131,38,0.008,39,0.008,40,1.68,42,1.974,43,2.942,52,4.984,62,3.147,63,2.464,64,2.464,66,2.161,67,0.686,68,3.383,70,1.863,110,5.942,111,3.92,112,3.92,168,2.942,280,3.82,782,5.198,831,4.651,832,4.651,833,4.651,834,5.287,835,5.287]],["title/classes/EmailScheduleDto.html",[35,0.116,836,2.989]],["body/classes/EmailScheduleDto.html",[3,0.122,4,0.11,5,0.11,7,0.381,8,1.371,15,0.545,16,0.01,17,1.835,18,1.755,20,0.793,31,0.185,35,0.174,36,0.122,38,0.007,39,0.007,229,3.69,486,1.468,513,4.463,580,3.682,581,3.894,583,2.072,646,3.811,708,3.933,711,5.156,816,5.752,836,4.471,837,6.966,838,4.322,839,6.321,840,7.185,841,4.913,842,7.185,843,4.913,844,4.913,845,4.913]],["title/controllers/EmailSchedulingController.html",[171,1.517,846,3.192]],["body/controllers/EmailSchedulingController.html",[3,0.124,4,0.111,5,0.111,7,0.387,15,0.356,16,0.01,18,1.146,20,0.518,31,0.288,35,0.134,36,0.124,38,0.007,39,0.007,67,0.646,85,1.529,91,2.926,92,4.511,132,1.997,171,1.755,173,1.755,175,2.593,177,1.575,187,1.06,188,0.93,189,1.006,191,1.176,207,2.495,210,1.659,212,2.593,217,2.405,229,3.028,233,1.449,234,1.411,236,2.699,414,2.947,746,4.381,836,5.322,846,4.818,847,4.381,848,6.498,849,5.717,850,4.381,851,6.498,852,4.98,853,5.717,854,4.381,855,4.381,856,4.737,857,4.381,858,4.98,859,4.98]],["title/modules/EmailSchedulingModule.html",[40,1.071,53,2.989]],["body/modules/EmailSchedulingModule.html",[3,0.129,4,0.116,5,0.116,16,0.01,31,0.293,35,0.14,36,0.129,38,0.008,39,0.008,40,1.664,42,1.945,43,2.915,52,4.885,53,5.903,62,3.118,63,2.429,64,2.429,66,2.735,67,0.676,91,3.013,92,3.618,168,2.915,173,2.358,229,2.429,775,4.172,846,5.48,856,5.406,857,4.585,860,4.585,861,4.585,862,5.212,863,5.212,864,5.212]],["title/injectables/EmailSchedulingService.html",[301,0.783,856,2.82]],["body/injectables/EmailSchedulingService.html",[3,0.106,4,0.095,5,0.095,7,0.331,15,0.419,16,0.01,20,0.696,31,0.284,35,0.115,36,0.106,38,0.007,39,0.007,67,0.554,85,1.798,92,5,95,3.416,177,1.42,187,1.247,188,1.094,189,1.184,191,1.384,229,3.356,233,1.705,234,1.66,242,1.275,301,1.065,302,1.461,353,1.64,781,3.753,782,4.615,792,2.962,793,3.416,814,3.753,816,3.416,836,5,839,3.753,849,5.154,850,5.154,853,3.753,854,3.753,855,3.753,856,3.837,865,3.753,866,7.203,867,7.988,868,4.266,869,4.266,870,4.69,871,4.266,872,4.266,873,4.266,874,4.266,875,4.266,876,4.266,877,5.859,878,3.416,879,4.266,880,4.266,881,4.266,882,4.266,883,3.416,884,4.266,885,4.266,886,4.266]],["title/injectables/EmailService.html",[301,0.783,782,2.548]],["body/injectables/EmailService.html",[3,0.144,4,0.094,5,0.094,7,0.327,8,1.237,14,1.486,15,0.475,16,0.01,20,0.692,31,0.283,35,0.114,36,0.105,38,0.007,39,0.007,67,0.547,69,3.385,70,1.486,85,2.308,111,3.127,112,3.127,117,2.112,125,3.127,128,3.71,176,2.762,177,1.409,187,1.237,188,1.085,189,1.174,191,0.996,233,1.691,234,1.647,239,1.563,301,1.057,302,1.445,782,3.439,824,5.324,887,3.71,888,6.65,889,5.812,890,2.927,891,7.963,892,5.812,893,5.812,894,4.217,895,3.71,896,6.65,897,5.812,898,3.71,899,4.217,900,4.217,901,4.217,902,4.217,903,4.217,904,4.217,905,4.217,906,4.217,907,4.217,908,4.217,909,5.812,910,4.217,911,4.217]],["title/classes/ExceptionLoggerFilter.html",[35,0.116,78,2.82]],["body/classes/ExceptionLoggerFilter.html",[3,0.134,4,0.12,5,0.12,7,0.418,15,0.385,16,0.01,20,0.56,31,0.257,35,0.145,36,0.134,38,0.008,39,0.008,67,0.699,77,4.311,78,4.475,123,5.48,177,1.656,187,1.146,188,1.005,189,1.088,191,1.272,349,5.48,415,5.066,486,1.609,489,3.077,870,5.47,912,4.737,913,7.506,914,6.833,915,7.895,916,5.385,917,6.833,918,5.385,919,5.385,920,5.385]],["title/classes/FindOneParams.html",[35,0.116,399,2.82]],["body/classes/FindOneParams.html",[3,0.148,4,0.134,5,0.134,7,0.464,8,1.553,12,2.23,15,0.428,16,0.01,17,1.594,18,1.376,20,0.622,31,0.225,35,0.197,36,0.148,38,0.008,39,0.008,399,4.777,416,5.064,486,1.787,583,2.522,921,5.262,922,6.301,923,5.981]],["title/classes/GetCommentsDto.html",[35,0.116,608,3.192]],["body/classes/GetCommentsDto.html",[3,0.144,4,0.13,5,0.13,7,0.451,8,1.526,15,0.416,16,0.01,18,1.338,20,0.605,23,2.086,31,0.219,35,0.193,36,0.178,37,2.235,38,0.008,39,0.008,486,1.737,580,3.461,583,2.452,608,5.763,629,5.395,696,5.739,922,5.739,924,6.307,925,5.115,926,5.814,927,5.814]],["title/classes/GetCommentsHandler.html",[35,0.116,639,3.192]],["body/classes/GetCommentsHandler.html",[3,0.107,4,0.096,5,0.096,7,0.334,12,1.67,15,0.421,16,0.01,20,0.613,31,0.294,33,1.815,35,0.116,36,0.107,38,0.007,39,0.007,67,0.559,85,1.321,132,1.855,177,1.428,187,1.255,188,1.1,189,1.191,191,1.016,192,1.434,210,1.434,233,1.715,239,1.585,242,1.286,243,1.963,352,2.006,353,1.655,444,1.815,449,4.278,459,2.547,486,1.286,490,4.092,495,2.988,498,4.092,585,4.282,610,2.819,613,2.988,621,5.018,623,3.787,638,3.446,639,4.37,671,5.185,672,3.787,674,5.185,681,3.787,928,5.914,929,3.787,930,6.722,931,4.304,932,5.894,933,4.304,934,4.304,935,4.304,936,4.304,937,6.722,938,4.304,939,4.304]],["title/classes/GetCommentsQuery.html",[35,0.116,621,2.989]],["body/classes/GetCommentsQuery.html",[3,0.141,4,0.127,5,0.127,7,0.441,8,1.504,9,3.411,15,0.505,16,0.01,20,0.735,23,2.342,35,0.153,36,0.141,38,0.008,39,0.008,187,1.209,188,1.06,189,1.554,233,1.652,234,2.179,486,1.697,621,4.904,629,5.586,940,6.766,941,4.996,942,4.996,943,5.678,944,4.996,945,5.678,946,5.678]],["title/injectables/GraphqlJwtGuard.html",[301,0.783,947,3.192]],["body/injectables/GraphqlJwtGuard.html",[3,0.135,4,0.121,5,0.121,7,0.421,15,0.388,16,0.01,20,0.564,31,0.283,35,0.146,36,0.135,38,0.008,39,0.008,67,0.704,98,3.766,177,1.664,187,1.155,188,1.013,189,1.096,191,1.281,239,1.459,242,1.621,283,2.824,301,1.248,302,1.858,489,2.443,760,6.964,762,4.343,947,5.09,948,5.496,949,4.773,950,6.865,951,6.865,952,5.425,953,5.425,954,3.766,955,4.022,956,5.425,957,5.425,958,5.425]],["title/classes/ImageProcessor.html",[35,0.116,959,3.192]],["body/classes/ImageProcessor.html",[3,0.127,4,0.114,5,0.114,7,0.397,8,1.408,15,0.366,16,0.01,18,1.178,20,0.688,31,0.276,35,0.138,36,0.127,37,1.969,38,0.007,39,0.007,67,0.664,85,2.25,106,3.554,177,1.603,187,1.09,188,0.956,189,1.035,191,1.209,234,2.077,320,3.18,353,2.544,486,1.53,883,6.422,959,4.905,960,4.504,961,6.203,962,6.616,963,6.616,964,5.12,965,6.616,966,6.616,967,5.12,968,5.12,969,4.504,970,4.099,971,5.12,972,4.504,973,4.099]],["title/injectables/JwtGuard.html",[217,2.079,301,0.783]],["body/injectables/JwtGuard.html",[3,0.156,4,0.14,5,0.14,16,0.01,31,0.283,35,0.17,36,0.156,38,0.008,39,0.008,67,0.816,217,3.631,283,3.275,301,1.367,302,2.155,489,2.833,954,4.367,955,4.664,974,5.534]],["title/injectables/JwtRefreshGuard.html",[219,3.192,301,0.783]],["body/injectables/JwtRefreshGuard.html",[3,0.155,4,0.139,5,0.139,16,0.01,31,0.281,35,0.168,36,0.155,38,0.008,39,0.008,67,0.809,181,4.624,219,5.547,283,3.247,301,1.36,302,2.136,489,2.808,954,4.329,955,4.624,975,4.624,976,5.487]],["title/injectables/JwtRefreshStrategy.html",[275,2.989,301,0.783]],["body/injectables/JwtRefreshStrategy.html",[3,0.103,4,0.092,5,0.092,7,0.321,15,0.41,16,0.01,20,0.596,31,0.298,35,0.111,36,0.103,38,0.006,39,0.006,67,0.536,69,3.364,70,1.456,85,1.759,117,2.071,132,1.816,177,1.389,181,3.065,187,1.22,188,1.07,189,1.158,190,4.123,191,0.976,192,1.377,226,3.2,227,2.446,233,1.668,234,1.624,239,1.541,242,1.235,254,4.25,275,3.979,283,2.152,301,1.042,302,1.416,339,4.414,340,3.065,341,2.869,367,4.568,383,3.636,489,1.861,890,2.869,977,5.268,978,3.636,979,4.25,980,5.789,981,4.133,982,5.732,983,4.133,984,3.309,985,4.25,986,2.869,987,4.25,988,4.25,989,2.24,990,3.065,991,3.309,992,3.309,993,4.133,994,3.309,995,4.133,996,4.133,997,4.133,998,4.133]],["title/injectables/JwtStrategy.html",[276,2.989,301,0.783]],["body/injectables/JwtStrategy.html",[3,0.109,4,0.098,5,0.098,7,0.34,15,0.426,16,0.01,20,0.62,31,0.302,35,0.118,36,0.109,38,0.007,39,0.007,67,0.569,69,3.425,70,1.544,85,1.831,132,1.873,177,1.446,187,1.27,188,1.114,189,1.206,190,3.532,191,1.035,192,1.46,226,3.622,227,2.593,233,1.736,234,1.691,239,1.604,243,1.46,276,4.142,283,2.281,297,3.508,301,1.085,302,1.501,339,4.524,340,3.249,341,3.042,367,3.042,384,3.855,489,1.973,890,3.042,979,4.424,984,3.508,985,3.249,986,3.042,987,4.424,988,3.249,989,2.375,990,3.249,991,3.508,992,3.508,994,3.508,999,3.855,1000,4.382,1001,5.249,1002,4.382,1003,3.855,1004,3.855]],["title/injectables/JwtTwoFactorGuard.html",[301,0.783,1005,3.192]],["body/injectables/JwtTwoFactorGuard.html",[3,0.153,4,0.137,5,0.137,16,0.01,31,0.279,35,0.166,36,0.153,37,2.368,38,0.008,39,0.008,67,0.799,283,3.205,290,4.612,291,3.644,301,1.35,302,2.109,489,2.773,954,4.275,955,4.565,975,4.565,1005,5.504,1006,5.417]],["title/injectables/JwtTwoFactorStrategy.html",[277,2.989,301,0.783]],["body/injectables/JwtTwoFactorStrategy.html",[3,0.101,4,0.09,5,0.09,7,0.315,14,1.992,15,0.404,16,0.01,20,0.588,31,0.296,35,0.109,36,0.101,38,0.006,39,0.006,67,0.526,69,3.343,70,1.428,85,1.736,132,1.797,177,1.37,187,1.204,188,1.056,189,1.143,190,3.39,191,0.957,192,1.35,226,3.173,227,2.398,233,1.645,234,1.602,239,1.52,242,1.211,243,1.35,260,3.566,277,3.925,283,2.11,290,4.377,291,2.398,297,3.245,301,1.028,302,1.388,339,4.377,340,3.005,341,2.814,352,1.889,353,1.558,367,2.814,489,1.825,764,3.005,890,2.814,969,3.566,977,5.213,979,4.192,980,5.729,984,3.245,985,4.192,986,2.814,987,4.192,988,4.192,989,2.197,990,3.005,991,3.245,992,3.245,994,3.245,1001,4.974,1004,3.566,1007,3.566,1008,4.053,1009,4.053,1010,4.053,1011,4.053,1012,4.053,1013,4.053,1014,4.053]],["title/injectables/LocalGuard.html",[222,3.192,301,0.783]],["body/injectables/LocalGuard.html",[3,0.156,4,0.14,5,0.14,16,0.01,31,0.283,35,0.17,36,0.156,38,0.008,39,0.008,67,0.816,222,5.575,283,3.275,301,1.367,302,2.155,489,2.833,954,4.367,1015,5.534,1016,6.291]],["title/injectables/LocalStrategy.html",[278,2.989,301,0.783]],["body/injectables/LocalStrategy.html",[3,0.112,4,0.101,5,0.101,7,0.352,14,2.602,15,0.436,16,0.01,17,1.735,20,0.635,31,0.29,35,0.122,36,0.112,38,0.007,39,0.007,67,0.588,91,2.749,132,1.905,177,1.479,187,1.299,188,1.14,189,1.233,191,1.07,214,4.304,215,3.146,233,1.319,239,1.219,242,1.354,243,1.51,278,4.237,283,2.359,301,1.11,302,1.552,314,4.37,331,4.886,332,3.628,352,2.112,353,1.742,356,3.987,359,3.987,363,3.36,364,3.628,425,2.563,489,2.041,562,2.563,979,4.525,985,3.36,986,3.146,988,3.36,990,3.36,1003,3.987,1017,3.987,1018,4.532,1019,4.532,1020,6.104,1021,4.532,1022,4.886,1023,3.987,1024,4.532,1025,4.532]],["title/injectables/LogsMiddleware.html",[301,0.783,1026,3.447]],["body/injectables/LogsMiddleware.html",[3,0.108,4,0.098,5,0.098,7,0.339,8,1.268,15,0.312,16,0.01,20,0.619,31,0.224,35,0.118,36,0.108,37,2.289,38,0.007,39,0.007,67,0.567,85,2.079,177,1.443,187,0.93,188,0.816,189,0.883,190,4.089,191,1.032,234,1.92,239,1.821,242,2.024,301,1.083,302,1.496,320,2.714,353,2.289,498,3.033,530,2.274,870,3.497,961,5.824,989,2.368,1026,5.423,1027,3.843,1028,5.954,1029,5.954,1030,5.679,1031,6.4,1032,7.274,1033,4.369,1034,5.954,1035,4.369,1036,5.954,1037,4.369,1038,5.954,1039,5.954,1040,7.274,1041,5.954,1042,4.369,1043,4.369,1044,4.369,1045,4.369,1046,4.369]],["title/entities/Message.html",[0,1.816,530,2.241]],["body/entities/Message.html",[0,2.734,2,2.69,3,0.123,4,0.111,5,0.111,7,0.385,8,1.38,9,4.11,12,2.046,14,2.924,15,0.516,16,0.01,17,1.417,18,1.662,19,4.273,20,0.751,23,1.887,24,4.273,31,0.244,33,2.093,35,0.134,36,0.123,37,1.908,38,0.007,39,0.007,513,4.485,529,3.914,530,3.759,562,2.807,592,3.973,598,4.807,1047,4.367,1048,6.484,1049,4.963,1050,4.963,1051,4.963]],["title/classes/ObjectWithIdDto.html",[35,0.116,663,3.192]],["body/classes/ObjectWithIdDto.html",[3,0.148,4,0.134,5,0.134,7,0.464,8,1.553,12,2.23,15,0.428,16,0.01,18,1.376,20,0.622,23,2.123,31,0.225,35,0.197,36,0.148,37,2.3,38,0.008,39,0.008,486,1.787,583,2.522,663,5.835,1052,5.262,1053,7.87,1054,5.981]],["title/controllers/OptimizeController.html",[171,1.517,1055,3.192]],["body/controllers/OptimizeController.html",[3,0.1,4,0.09,5,0.09,7,0.312,12,1.837,15,0.402,16,0.01,17,1.416,18,1.294,20,0.585,31,0.278,35,0.108,36,0.1,38,0.006,39,0.006,67,0.522,85,1.234,106,2.79,132,2.113,171,1.416,173,1.416,175,2.092,177,1.362,187,1.197,188,1.05,189,1.136,191,1.328,192,1.873,210,1.339,213,2.98,234,1.139,239,1.743,242,1.937,243,2.16,411,2.98,883,5.19,970,3.218,972,3.536,989,3.514,1030,5.314,1055,4.168,1056,3.536,1057,4.02,1058,5.622,1059,5.622,1060,4.02,1061,5.622,1062,4.02,1063,4.02,1064,5.703,1065,4.02,1066,4.02,1067,4.5,1068,4.02,1069,2.98,1070,4.02,1071,4.02,1072,3.218,1073,4.946,1074,4.02,1075,4.02,1076,4.02,1077,4.02,1078,4.02,1079,4.02,1080,4.02,1081,4.02,1082,3.536,1083,4.02,1084,4.02,1085,4.02,1086,4.02,1087,4.02,1088,4.02,1089,5.622,1090,4.02,1091,4.02]],["title/modules/OptimizeModule.html",[40,1.071,54,2.989]],["body/modules/OptimizeModule.html",[3,0.142,4,0.128,5,0.128,16,0.01,31,0.304,35,0.155,36,0.142,38,0.008,39,0.008,40,1.77,42,2.145,54,4.94,66,2.348,67,0.746,105,5.055,106,3.988,168,2.503,173,2.507,188,1.073,959,5.276,1055,5.732,1092,5.745,1093,5.745,1094,5.745,1095,5.745,1096,5.745]],["title/classes/PaginationParams.html",[35,0.116,1097,3.192]],["body/classes/PaginationParams.html",[3,0.122,4,0.11,5,0.11,7,0.381,8,1.371,15,0.592,16,0.01,18,1.653,20,0.747,23,2.472,31,0.242,35,0.194,36,0.122,38,0.007,39,0.007,189,1.642,486,1.468,583,2.072,596,3.217,696,6.105,1097,4.775,1098,4.322,1099,5.752,1100,5.752,1101,6.321,1102,6.441,1103,4.913,1104,4.913,1105,4.913,1106,4.913,1107,6.709,1108,3.933,1109,5.156,1110,4.913]],["title/entities/Post.html",[0,1.816,210,1.434]],["body/entities/Post.html",[0,2.249,2,2.022,3,0.093,4,0.083,5,0.083,7,0.414,8,1.135,9,4.165,12,1.764,14,2.531,15,0.534,16,0.01,17,1.484,18,1.72,19,3.683,20,0.777,23,1.552,24,3.683,31,0.27,33,1.574,35,0.144,36,0.093,37,1.435,38,0.006,39,0.006,117,2.672,210,2.074,387,4.615,397,4.779,478,3.683,485,4.692,529,3.894,585,4.063,588,4.692,595,4.983,596,2.444,598,3.954,601,6.321,690,4.076,1111,3.283,1112,3.732,1113,3.732,1114,3.732,1115,5.334,1116,6.225,1117,3.732,1118,3.283,1119,5.334,1120,3.732,1121,3.732,1122,5.334,1123,5.476,1124,3.732,1125,3.732,1126,4.692,1127,3.732,1128,3.732,1129,3.732,1130,3.732,1131,3.732]],["title/classes/PostNotFoundException.html",[35,0.116,1132,3.192]],["body/classes/PostNotFoundException.html",[3,0.144,4,0.13,5,0.13,12,1.648,15,0.416,16,0.01,20,0.605,23,2.262,31,0.219,35,0.157,36,0.144,38,0.008,39,0.008,67,0.754,187,1.238,188,1.086,189,1.175,233,1.692,486,1.737,488,4.655,489,3.228,490,5.395,492,5.115,495,4.036,629,4.976,942,6.307,1132,5.315,1133,6.307,1134,5.814]],["title/interfaces/PostSearchBody.html",[719,2.157,1135,2.989]],["body/interfaces/PostSearchBody.html",[3,0.138,4,0.124,5,0.124,7,0.432,8,1.486,12,2.265,15,0.571,16,0.01,17,1.835,23,2.444,36,0.138,37,2.142,38,0.008,39,0.008,478,4.729,690,5.234,719,2.79,1135,4.845,1136,3.647,1137,4.459,1138,3.866,1139,4.9,1140,7.031]],["title/interfaces/PostSearchResult.html",[719,2.157,1141,3.192]],["body/interfaces/PostSearchResult.html",[3,0.143,4,0.129,5,0.129,7,0.448,8,1.519,12,2.293,15,0.578,16,0.01,23,1.678,31,0.217,36,0.143,37,2.218,38,0.008,39,0.008,210,1.921,719,2.889,1123,5.075,1135,4.004,1136,3.777,1137,4.618,1138,4.952,1141,5.289,1142,5.075,1143,7.315,1144,5.711,1145,5.075,1146,5.768]],["title/controllers/PostsController.html",[171,1.517,1147,3.192]],["body/controllers/PostsController.html",[3,0.071,4,0.064,5,0.064,7,0.223,12,1.827,15,0.461,16,0.01,17,1.667,18,1.484,20,0.671,31,0.287,35,0.078,36,0.071,38,0.005,39,0.005,67,0.373,78,1.884,80,2.304,132,2.106,171,1.014,173,1.014,175,1.498,177,1.066,184,2.997,187,1.373,188,1.204,189,1.303,191,1.523,192,1.78,207,2.204,209,2.133,210,2.431,211,3.646,212,1.498,213,2.133,216,1.998,217,1.389,225,1.627,229,1.341,234,0.815,235,3.961,236,1.56,239,1.962,249,2.304,264,2.304,290,1.787,399,3.918,400,2.532,405,2.532,409,2.532,411,2.133,412,2.532,413,2.532,414,1.703,415,2.133,416,1.998,417,2.304,424,2.532,425,1.627,427,2.532,430,2.532,433,2.532,436,2.532,466,1.884,610,2.882,614,1.627,625,2.532,687,3.918,754,2.133,756,2.304,975,2.133,1005,2.133,1097,4.436,1099,4.277,1100,3.523,1138,3.055,1147,3.262,1148,2.532,1149,3.523,1150,3.871,1151,4.277,1152,3.523,1153,3.871,1154,2.532,1155,2.878,1156,2.878,1157,2.532,1158,2.878,1159,2.878,1160,2.304,1161,2.878,1162,2.878,1163,4.7,1164,2.878,1165,2.878,1166,2.532,1167,4.154,1168,2.878,1169,2.878,1170,2.878,1171,2.878,1172,2.878,1173,3.319,1174,2.304,1175,2.878,1176,2.878,1177,2.878,1178,2.878,1179,2.878,1180,2.878,1181,2.878,1182,2.878,1183,2.532,1184,2.878,1185,2.878,1186,2.878,1187,2.878,1188,2.878,1189,2.878,1190,2.878,1191,2.878,1192,2.878,1193,2.878]],["title/modules/PostsModule.html",[40,1.071,55,2.989]],["body/modules/PostsModule.html",[3,0.107,4,0.096,5,0.096,16,0.01,31,0.315,35,0.116,36,0.107,38,0.007,39,0.007,40,1.466,42,1.607,43,2.567,55,5.808,58,5.121,62,2.747,63,2.006,64,2.006,66,2.747,67,0.559,68,2.953,69,3.149,70,1.517,123,2.988,125,3.191,130,2.674,131,2.819,133,3.446,134,3.787,135,3.787,168,2.567,173,2.077,210,1.963,443,2.547,444,1.815,1147,4.984,1173,4.857,1174,3.446,1194,3.787,1195,3.787,1196,4.304,1197,5.121,1198,4.304,1199,4.304,1200,4.304,1201,3.446,1202,4.304,1203,3.787,1204,5.894,1205,3.446,1206,3.787,1207,5.185,1208,4.37,1209,4.304,1210,4.304,1211,4.304,1212,4.304,1213,4.304]],["title/classes/PostsResolver.html",[35,0.116,1208,3.192]],["body/classes/PostsResolver.html",[3,0.091,4,0.082,5,0.082,7,0.285,12,1.495,15,0.511,16,0.01,18,1.42,20,0.701,23,1.796,31,0.288,35,0.099,36,0.091,38,0.006,39,0.006,67,0.477,98,2.551,132,2.202,177,1.279,184,2.643,187,1.314,188,1.152,189,1.247,191,1.458,192,2.056,210,2.379,211,2.078,212,1.913,225,2.078,233,1.069,234,1.041,239,1.66,242,1.577,243,1.758,425,2.078,466,4.042,486,1.098,610,4.042,614,2.078,698,5.512,762,5.718,947,2.725,948,2.942,1144,4.224,1149,4.941,1151,5.399,1152,4.224,1173,4.618,1174,2.942,1183,3.233,1208,3.912,1214,3.233,1215,3.675,1216,3.675,1217,3.675,1218,3.675,1219,3.675,1220,5.276,1221,3.675,1222,3.233,1223,3.675,1224,3.675,1225,5.276,1226,5.276,1227,3.675,1228,3.675,1229,3.675,1230,3.675,1231,3.675,1232,3.675,1233,3.675,1234,3.675,1235,3.675,1236,3.675]],["title/injectables/PostsSearchService.html",[301,0.783,1197,2.82]],["body/injectables/PostsSearchService.html",[3,0.074,4,0.101,5,0.067,7,0.573,8,0.964,12,1.729,15,0.493,16,0.01,17,1.333,20,0.718,23,1.592,31,0.247,35,0.081,36,0.074,37,1.742,38,0.005,39,0.005,67,0.388,132,2.192,177,1.098,187,1.396,188,1.224,189,1.325,191,1.441,192,1.822,207,2.74,210,2.519,233,0.87,234,0.847,239,1.641,242,1.824,243,0.996,301,0.824,302,1.024,320,2.814,425,1.691,466,2.967,478,3.237,513,1.857,610,3.996,629,3.145,690,2.967,878,3.627,1135,3.145,1138,4.236,1140,3.986,1141,2.217,1143,2.63,1145,2.63,1197,2.967,1201,2.393,1237,6.307,1238,2.63,1239,4.53,1240,4.53,1241,4.53,1242,2.99,1243,6.901,1244,4.53,1245,4.53,1246,2.99,1247,4.53,1248,2.99,1249,4.53,1250,2.99,1251,4.53,1252,2.99,1253,2.393,1254,4.53,1255,2.99,1256,2.99,1257,6.103,1258,2.99,1259,5.47,1260,4.53,1261,4.53,1262,4.53,1263,3.986,1264,2.99,1265,2.99,1266,2.99,1267,2.99,1268,2.99,1269,2.99,1270,2.99,1271,5.47,1272,2.99,1273,1.958,1274,2.99,1275,2.99,1276,4.53,1277,2.99]],["title/injectables/PostsService.html",[301,0.783,1173,2.675]],["body/injectables/PostsService.html",[3,0.053,4,0.048,5,0.048,7,0.165,8,0.738,12,1.785,14,2.313,15,0.469,16,0.01,17,1.305,20,0.706,23,2.383,31,0.247,33,0.898,35,0.057,36,0.053,37,0.819,38,0.005,39,0.004,67,0.276,85,1.71,117,1.738,132,2.221,177,0.841,187,1.398,188,1.226,189,1.327,191,1.487,192,1.99,210,2.47,216,1.478,233,1.009,234,1.579,239,1.765,242,1.962,243,2.428,301,0.631,302,0.729,320,1.323,352,2.045,353,2.142,387,3.751,444,0.898,449,2.994,459,1.26,462,1.874,465,3.047,474,1.874,476,1.874,481,1.874,529,2.742,562,1.204,682,3.052,687,3.314,878,1.705,944,4.901,961,4.051,973,1.705,1099,5.436,1100,5.042,1101,4.901,1132,1.579,1149,2.777,1150,3.052,1151,2.777,1152,2.777,1153,3.052,1154,3.052,1157,3.052,1163,3.861,1166,3.052,1167,3.512,1173,2.155,1197,4.124,1201,1.705,1203,1.874,1205,2.777,1222,3.052,1278,1.874,1279,4.389,1280,3.469,1281,2.13,1282,3.469,1283,3.469,1284,2.13,1285,2.13,1286,3.469,1287,2.13,1288,2.13,1289,2.13,1290,2.13,1291,3.469,1292,2.13,1293,2.13,1294,3.469,1295,2.13,1296,2.13,1297,2.13,1298,2.13,1299,2.13,1300,4.389,1301,2.13,1302,2.13,1303,2.13,1304,3.469,1305,4.389,1306,2.13,1307,2.13,1308,2.13,1309,2.13,1310,2.13,1311,3.469,1312,2.13,1313,1.874,1314,2.13,1315,4.389,1316,2.13,1317,2.13,1318,2.13,1319,4.389,1320,2.13,1321,2.13,1322,2.13,1323,2.13,1324,2.13,1325,2.13,1326,2.13,1327,2.13,1328,2.13,1329,2.13,1330,2.13,1331,2.13,1332,1.874,1333,2.13,1334,2.13,1335,2.13]],["title/entities/PrivateFile.html",[0,1.816,1336,2.82]],["body/entities/PrivateFile.html",[0,2.687,2,2.619,3,0.12,4,0.108,5,0.108,7,0.375,8,1.356,9,4.088,12,2.02,14,2.775,15,0.509,16,0.01,17,1.392,18,1.64,19,4.217,20,0.741,23,1.854,24,4.217,31,0.239,33,2.038,35,0.13,36,0.12,37,1.858,38,0.007,39,0.007,562,2.733,592,3.868,598,4.723,1273,4.667,1336,4.667,1337,4.706,1338,6.066,1339,3.868,1340,6.928,1341,4.832,1342,4.832,1343,6.37,1344,4.832]],["title/modules/PrivateFilesModule.html",[40,1.071,56,2.82]],["body/modules/PrivateFilesModule.html",[3,0.128,4,0.116,5,0.116,16,0.01,31,0.303,35,0.139,36,0.128,38,0.007,39,0.007,40,1.657,42,1.932,43,2.902,56,5.489,62,3.104,63,2.411,64,2.411,66,2.115,67,0.671,68,3.337,70,1.823,85,1.588,86,3.389,168,2.902,280,3.767,443,3.062,444,2.182,1336,3.389,1337,3.214,1345,4.552,1346,4.552,1347,4.552,1348,5.735,1349,4.552,1350,4.552,1351,3.592,1352,4.143,1353,5.175]],["title/injectables/PrivateFilesService.html",[301,0.783,1348,2.82]],["body/injectables/PrivateFilesService.html",[3,0.108,4,0.063,5,0.063,7,0.219,12,1.68,15,0.457,16,0.01,17,1.475,20,0.665,23,2.165,31,0.264,33,1.192,35,0.076,36,0.07,38,0.005,39,0.005,67,0.367,69,3.063,70,0.996,85,1.333,86,4.422,132,2.164,177,1.052,187,1.362,188,1.194,189,1.293,191,1.4,192,1.975,207,1.416,233,1.263,234,1.23,239,1.594,242,2.223,243,2.249,301,0.789,302,0.968,352,1.318,353,2.28,444,1.192,449,3.508,459,1.673,465,1.963,490,1.963,495,1.963,1022,2.263,1273,4.422,1336,1.852,1337,4.194,1340,3.819,1348,2.843,1350,2.487,1351,1.963,1354,2.263,1355,4.341,1356,4.341,1357,4.341,1358,5.285,1359,2.827,1360,2.487,1361,4.341,1362,4.341,1363,2.827,1364,4.747,1365,4.341,1366,2.827,1367,4.341,1368,2.827,1369,2.827,1370,5.216,1371,4.231,1372,4.747,1373,2.487,1374,5.285,1375,6.546,1376,2.263,1377,2.263,1378,2.487,1379,4.231,1380,2.827,1381,2.487,1382,2.487,1383,4.649,1384,5.285,1385,2.827,1386,3.819,1387,2.827,1388,2.487,1389,2.827,1390,5.628,1391,2.827,1392,3.819,1393,2.827,1394,2.827,1395,2.827,1396,2.827,1397,2.827,1398,2.827]],["title/entities/PublicFile.html",[0,1.816,1399,2.82]],["body/entities/PublicFile.html",[0,2.765,2,2.737,3,0.125,4,0.113,5,0.113,7,0.392,8,1.396,9,4.123,12,2.063,15,0.52,16,0.01,17,1.684,18,1.676,19,4.726,20,0.757,23,1.908,24,4.308,31,0.19,33,2.129,35,0.136,36,0.125,37,1.941,38,0.007,39,0.007,801,5.398,1273,4.768,1339,4.042,1399,4.768,1400,4.787,1401,6.17,1402,5.049,1403,5.049,1404,5.049]],["title/modules/PublicFilesModule.html",[40,1.071,57,2.82]],["body/modules/PublicFilesModule.html",[3,0.128,4,0.116,5,0.116,9,2.498,16,0.01,31,0.303,35,0.139,36,0.128,38,0.007,39,0.007,40,1.657,42,1.932,43,2.902,57,5.489,62,3.104,63,2.411,64,2.411,66,2.115,67,0.671,68,3.337,70,1.823,83,3.389,168,2.902,280,3.767,443,3.062,444,2.182,1349,4.552,1351,3.592,1352,4.143,1399,3.389,1400,3.214,1405,4.552,1406,4.552,1407,4.552,1408,5.735,1409,4.552,1410,5.175]],["title/injectables/PublicFilesService.html",[301,0.783,1408,2.82]],["body/injectables/PublicFilesService.html",[3,0.076,4,0.069,5,0.124,7,0.238,9,1.483,12,1.576,15,0.442,16,0.01,17,1.215,20,0.643,23,2.029,31,0.272,33,1.295,35,0.083,36,0.076,38,0.005,39,0.005,67,0.399,69,3.152,70,1.082,83,4.345,85,1.419,132,2.103,177,1.121,187,1.317,188,1.155,189,1.25,191,1.313,192,1.023,207,1.539,233,1.345,234,1.31,239,0.826,242,2.225,243,2.538,301,0.841,302,1.052,353,2.138,444,1.295,449,3.661,459,1.817,801,2.277,1022,4.451,1273,4.051,1351,2.132,1354,2.459,1360,2.702,1364,5.582,1370,4.068,1371,4.451,1372,4.953,1373,2.702,1375,6.828,1376,2.459,1377,2.459,1378,2.702,1379,4.451,1381,2.702,1382,2.702,1383,4.892,1386,4.068,1388,2.702,1399,2.011,1400,4.122,1408,3.028,1409,2.702,1411,4.624,1412,5.56,1413,4.624,1414,3.071,1415,4.624,1416,4.624,1417,3.071,1418,3.071,1419,6.365,1420,3.071,1421,4.624,1422,3.071,1423,3.071,1424,2.702,1425,5.56,1426,3.071,1427,3.071,1428,3.071,1429,3.071,1430,3.071,1431,4.624,1432,4.068,1433,3.071,1434,3.071,1435,3.071]],["title/classes/RegistrationDto.html",[35,0.116,203,2.989]],["body/classes/RegistrationDto.html",[1,3.997,3,0.112,4,0.101,5,0.101,7,0.351,8,1.297,10,3.617,11,3.617,13,3.617,15,0.55,16,0.01,17,1.861,18,1.772,20,0.801,31,0.17,35,0.186,36,0.151,38,0.007,39,0.007,91,3.103,188,1.287,203,4.228,314,4.078,486,1.35,580,4.034,581,4.395,583,1.905,646,2.673,652,3.617,695,5.359,708,3.617,711,4.876,1436,3.974,1437,5.517,1438,4.517,1439,4.517,1440,4.517,1441,4.517,1442,4.517,1443,4.517,1444,4.517,1445,6.091,1446,4.517,1447,4.517,1448,4.517,1449,4.517]],["title/interfaces/RequestUser.html",[184,2.157,719,2.157]],["body/interfaces/RequestUser.html",[3,0.148,4,0.133,5,0.133,7,0.462,8,1.549,14,3.075,15,0.426,16,0.01,31,0.274,36,0.148,38,0.008,39,0.008,184,3.645,190,4.09,489,3.276,562,3.369,614,3.369,719,2.984,989,3.228,1136,3.901,1450,5.24]],["title/modules/SearchModule.html",[40,1.071,58,2.82]],["body/modules/SearchModule.html",[3,0.137,4,0.123,5,0.123,16,0.01,31,0.285,35,0.148,36,0.137,38,0.008,39,0.008,40,1.724,42,2.056,58,4.538,66,2.832,67,0.715,68,3.799,69,3.467,70,1.94,130,3.421,131,3.606,132,1.52,176,3.606,280,3.114,314,3.258,726,4.845,1253,4.409,1451,5.507,1452,6.93,1453,5.507,1454,5.507,1455,5.507,1456,5.507,1457,5.507]],["title/classes/SendMessageDto.html",[35,0.116,1458,3.192]],["body/classes/SendMessageDto.html",[3,0.137,4,0.123,5,0.123,7,0.428,8,1.475,15,0.495,16,0.01,17,1.739,18,1.595,20,0.721,31,0.207,35,0.187,36,0.137,38,0.008,39,0.008,486,1.646,530,3.948,580,3.662,581,4.11,583,2.322,652,4.409,1458,5.138,1459,6.672,1460,4.845,1461,6.672,1462,5.507,1463,5.507,1464,5.507,1465,5.507,1466,5.507,1467,5.507,1468,5.507]],["title/controllers/SmsController.html",[171,1.517,1469,3.192]],["body/controllers/SmsController.html",[3,0.088,4,0.079,5,0.079,7,0.276,15,0.433,16,0.01,18,1.393,20,0.629,23,1.497,31,0.276,35,0.096,36,0.088,38,0.006,39,0.006,67,0.461,132,2.184,171,1.251,173,1.251,175,1.848,177,1.247,184,4.025,187,1.288,188,1.13,189,1.223,190,3.825,191,1.429,207,3.032,210,1.183,211,3.423,212,1.848,217,1.714,225,2.008,234,1.006,236,1.924,243,2.016,352,2.398,353,1.978,354,4.119,414,2.101,425,2.008,517,5.325,530,2.679,573,4.921,575,5.641,577,3.815,614,2.008,792,2.464,821,4.527,1458,4.921,1469,3.815,1470,3.123,1471,3.123,1472,6.052,1473,4.527,1474,5.325,1475,3.55,1476,6.052,1477,5.146,1478,3.55,1479,3.55,1480,5.146,1481,3.55,1482,3.55,1483,5.146,1484,3.55,1485,3.55,1486,3.123,1487,3.55,1488,3.55,1489,3.963,1490,3.123,1491,3.55,1492,3.55,1493,5.146,1494,5.146,1495,3.55,1496,5.146,1497,3.55,1498,2.842,1499,3.55,1500,3.55,1501,3.55,1502,3.55]],["title/modules/SmsModule.html",[40,1.071,59,2.989]],["body/modules/SmsModule.html",[3,0.124,4,0.111,5,0.111,16,0.01,31,0.299,35,0.134,36,0.124,38,0.007,39,0.007,40,1.616,42,1.859,43,2.831,59,5.912,61,4.825,62,3.028,63,2.321,64,2.321,66,2.656,67,0.646,68,3.255,70,1.755,74,4.381,168,2.831,173,2.29,280,3.675,1469,5.363,1489,5.704,1490,4.381,1503,4.381,1504,4.381,1505,4.381,1506,4.98,1507,4.98,1508,4.98]],["title/injectables/SmsService.html",[301,0.783,1489,2.82]],["body/injectables/SmsService.html",[3,0.081,4,0.073,5,0.073,7,0.255,8,1.035,15,0.488,16,0.01,17,1.819,20,0.71,23,1.684,31,0.24,35,0.089,36,0.081,38,0.005,39,0.005,67,0.426,69,3.114,70,1.158,85,2.096,132,1.973,164,4.278,165,2.891,177,1.178,187,1.362,188,1.194,189,1.293,191,1.367,192,1.095,207,1.646,226,3.331,227,1.944,233,1.415,234,1.378,239,1.308,242,2.136,243,1.62,301,0.884,302,1.126,352,1.531,353,1.87,364,2.631,530,3.33,577,3.605,792,2.281,800,5.092,890,2.281,1263,2.891,1437,5.723,1461,4.278,1471,2.891,1473,4.278,1474,4.278,1489,3.184,1509,2.891,1510,5.788,1511,5.788,1512,4.862,1513,3.286,1514,6.397,1515,3.286,1516,4.278,1517,4.862,1518,3.286,1519,4.862,1520,3.286,1521,5.628,1522,3.286,1523,3.286,1524,4.862,1525,3.286,1526,3.286,1527,3.286,1528,4.862,1529,4.862,1530,4.862,1531,3.286,1532,3.286,1533,3.286,1534,3.286,1535,3.286,1536,3.286,1537,3.286,1538,3.286,1539,3.286,1540,3.286,1541,4.862,1542,3.286]],["title/controllers/SubscribersController.html",[171,1.517,1543,3.192]],["body/controllers/SubscribersController.html",[3,0.099,4,0.089,5,0.089,7,0.309,15,0.285,16,0.01,18,1.286,20,0.581,31,0.263,35,0.107,36,0.099,38,0.006,39,0.006,67,0.517,85,1.224,130,2.476,132,2.164,171,1.405,173,1.405,175,2.075,177,1.355,187,0.849,188,0.744,189,0.806,191,1.32,192,1.862,207,1.997,210,2.33,212,2.075,217,1.925,233,1.16,236,2.161,239,1.981,243,2.15,337,4.856,345,4.144,349,3.88,414,2.359,420,2.956,705,5.461,1543,4.144,1544,3.507,1545,5.589,1546,5.589,1547,6.995,1548,3.987,1549,3.987,1550,7.841,1551,3.987,1552,5.589,1553,3.191,1554,3.987,1555,3.987,1556,3.987,1557,3.987,1558,5.589,1559,6.454,1560,5.589,1561,5.589,1562,3.987]],["title/modules/SubscribersModule.html",[40,1.071,60,2.989]],["body/modules/SubscribersModule.html",[3,0.122,4,0.11,5,0.11,14,1.731,16,0.01,31,0.287,35,0.132,36,0.122,38,0.007,39,0.007,40,1.602,42,1.834,60,4.471,66,2.008,67,0.638,68,3.226,69,3.322,70,1.731,117,2.461,122,5.666,123,3.411,130,3.052,131,3.217,168,2.14,169,4.322,173,2.269,239,1.321,242,2.279,314,2.907,895,4.322,1073,4.322,1543,5.327,1553,3.933,1563,4.913,1564,4.913,1565,4.913,1566,4.913,1567,4.913,1568,4.913,1569,4.913,1570,6.441,1571,4.913,1572,4.913,1573,4.913,1574,4.913,1575,4.913,1576,4.913,1577,4.913]],["title/interfaces/TokenPayload.html",[339,2.675,719,2.157]],["body/interfaces/TokenPayload.html",[3,0.15,4,0.135,5,0.135,7,0.468,8,1.561,12,2.329,15,0.524,16,0.01,23,2.298,36,0.15,38,0.008,39,0.008,318,7.229,339,4.554,719,3.021,763,5.856,1136,3.949,1578,5.305,1579,4.828]],["title/classes/TwoFactorAuthCodeDto.html",[35,0.116,1580,3.192]],["body/classes/TwoFactorAuthCodeDto.html",[3,0.142,4,0.128,5,0.128,7,0.446,8,1.515,15,0.411,16,0.01,17,1.555,18,1.322,20,0.598,31,0.216,35,0.192,36,0.142,38,0.008,39,0.008,176,4.66,291,4.781,486,1.717,576,4.6,580,3.436,581,3.857,583,2.423,646,3.4,1580,5.276,1581,4.94,1582,6.261,1583,6.802,1584,5.745]],["title/controllers/TwoFactorAuthController.html",[171,1.517,1585,3.192]],["body/controllers/TwoFactorAuthController.html",[3,0.073,4,0.066,5,0.066,7,0.23,15,0.389,16,0.01,18,1.251,20,0.565,31,0.277,35,0.08,36,0.073,38,0.005,39,0.005,67,0.384,85,1.668,117,1.482,132,2.081,171,1.043,173,1.043,175,1.541,176,1.938,177,1.089,182,3.599,184,3.851,187,1.157,188,1.015,189,1.098,190,3.719,191,1.284,192,1.498,207,2.723,209,2.194,210,0.986,211,3.433,212,1.541,214,2.946,215,3.121,217,1.429,218,2.603,224,2.603,225,1.674,226,2.448,227,1.751,233,0.861,234,1.54,235,3.333,236,1.604,239,1.209,240,5.341,242,1.814,243,1.498,251,3.955,258,2.603,259,2.194,290,1.838,291,4.549,292,4.214,352,2.533,353,2.09,380,3.599,577,3.333,764,2.194,792,3.121,989,1.604,1030,4.772,1069,2.194,1160,3.599,1486,2.603,1498,2.369,1580,5.297,1581,4.214,1583,5.341,1585,3.333,1586,2.603,1587,4.495,1588,5.436,1589,4.782,1590,2.959,1591,2.959,1592,2.959,1593,2.959,1594,4.495,1595,2.959,1596,2.959,1597,4.495,1598,2.959,1599,2.959,1600,2.959,1601,3.56,1602,2.959,1603,2.959,1604,3.955,1605,2.959,1606,2.959,1607,6.071,1608,4.495,1609,4.495,1610,2.959,1611,2.959,1612,2.959,1613,2.603,1614,2.959,1615,2.959,1616,2.959,1617,2.959]],["title/modules/TwoFactorAuthModule.html",[40,1.071,274,2.989]],["body/modules/TwoFactorAuthModule.html",[3,0.117,4,0.105,5,0.105,16,0.01,31,0.308,35,0.127,36,0.117,38,0.007,39,0.007,40,1.561,42,1.763,43,2.733,61,4.755,62,2.924,63,2.201,64,2.201,66,2.564,67,0.613,68,3.143,70,1.664,168,2.733,173,2.211,214,4.355,215,4.356,274,5.91,281,4.154,286,3.092,290,3.898,291,4.443,292,3.278,311,5.023,776,4.154,1581,3.278,1585,5.224,1601,5.262,1618,4.154,1619,4.722,1620,4.154,1621,4.722]],["title/injectables/TwoFactorAuthService.html",[301,0.783,1601,2.82]],["body/injectables/TwoFactorAuthService.html",[3,0.087,4,0.078,5,0.078,7,0.272,14,2.86,15,0.501,16,0.01,17,1.599,20,0.686,31,0.284,35,0.095,36,0.087,38,0.006,39,0.006,67,0.455,69,3.289,70,1.236,85,1.566,132,2.02,177,1.236,187,1.405,188,1.232,189,1.334,191,1.419,192,1.699,226,3.295,227,2.075,233,1.484,234,1.445,239,1.616,242,1.524,243,1.168,257,2.808,291,4.741,292,4.867,296,4.581,301,0.927,302,1.201,310,3.086,325,2.435,562,1.983,989,1.901,1030,4.581,1392,3.086,1581,4.867,1601,3.34,1604,6.437,1622,3.086,1623,5.101,1624,6.011,1625,5.101,1626,3.507,1627,5.101,1628,3.507,1629,3.507,1630,3.507,1631,6.011,1632,5.101,1633,3.507,1634,3.507,1635,3.086,1636,3.507,1637,3.086,1638,3.507,1639,3.507,1640,3.507,1641,3.507,1642,3.507,1643,3.507,1644,3.507,1645,3.507,1646,3.507,1647,3.507]],["title/classes/UpdateCategoryDto.html",[35,0.116,408,2.989]],["body/classes/UpdateCategoryDto.html",[3,0.138,4,0.124,5,0.124,7,0.432,8,1.486,12,2.16,15,0.398,16,0.01,18,1.282,20,0.579,23,2.031,31,0.287,35,0.188,36,0.138,38,0.008,39,0.008,394,3.647,408,4.845,421,4.459,486,1.664,489,2.508,580,3.37,583,2.349,649,4.459,922,5.588,1108,4.459,1109,4.459,1648,6.141,1649,5.57,1650,5.57,1651,5.57,1652,4.9,1653,4.9,1654,4.13,1655,5.57]],["title/classes/UpdatePostDto.html",[35,0.116,1167,2.989]],["body/classes/UpdatePostDto.html",[3,0.128,4,0.115,5,0.115,7,0.4,8,1.415,12,2.084,15,0.526,16,0.01,17,1.452,18,1.692,20,0.765,23,1.934,31,0.25,35,0.179,36,0.128,38,0.007,39,0.007,478,3.933,486,1.541,489,2.993,580,3.209,583,2.175,646,3.051,687,5.265,689,4.128,690,4.352,691,4.536,692,4.536,1107,5.847,1108,4.128,1109,4.128,1167,4.614,1654,3.823,1656,5.847,1657,5.156,1658,5.156,1659,6.646,1660,5.156,1661,5.156,1662,5.156]],["title/entities/User.html",[0,1.816,14,1.517]],["body/entities/User.html",[0,1.654,1,3.261,2,1.345,3,0.062,4,0.055,5,0.055,7,0.193,8,0.835,9,4.251,12,1.378,14,1.713,15,0.564,16,0.01,17,1.66,18,1.816,19,4.494,20,0.821,23,1.141,24,2.877,27,5.293,31,0.252,32,4.277,33,1.046,35,0.106,36,0.062,37,2.124,38,0.004,39,0.004,91,2.189,117,3.86,119,4.742,188,0.908,189,1.293,210,2.231,314,2.877,466,3.184,484,2.183,530,3.487,534,4.277,595,4.423,596,1.625,763,4.742,1067,3.892,1118,4.277,1126,4.86,1336,4.387,1337,1.541,1338,1.986,1351,2.722,1399,2.568,1400,1.541,1401,1.986,1437,3.892,1663,2.183,1664,4.277,1665,4.277,1666,4.277,1667,4.277,1668,4.277,1669,4.277,1670,3.921,1671,5.525,1672,3.921,1673,2.481,1674,5.525,1675,2.481,1676,2.481,1677,2.481,1678,2.481,1679,2.481,1680,2.481,1681,3.921,1682,2.481,1683,2.481,1684,4.862,1685,2.481,1686,2.481,1687,2.481,1688,3.921,1689,2.481,1690,2.481,1691,2.481,1692,2.481,1693,2.481,1694,3.921,1695,2.481,1696,2.481,1697,2.481,1698,4.862,1699,2.481,1700,2.481,1701,2.481]],["title/controllers/UsersController.html",[171,1.517,1702,3.192]],["body/controllers/UsersController.html",[3,0.075,4,0.068,5,0.165,7,0.235,12,0.858,15,0.439,16,0.01,18,1.413,20,0.639,31,0.271,35,0.082,36,0.075,38,0.005,39,0.005,67,0.393,132,2.198,171,1.067,173,1.067,175,1.576,177,1.108,184,4.034,187,1.307,188,1.147,189,1.241,190,3.859,191,1.45,192,1.836,210,1.008,211,3.473,212,1.576,213,2.244,217,1.461,225,1.712,226,2.482,234,0.858,236,1.64,239,1.482,242,0.905,243,1.008,353,2.535,399,4.022,411,3.39,414,1.791,416,2.101,417,2.423,425,1.712,614,1.712,989,2.987,1030,4.998,1064,6.1,1069,3.39,1072,2.423,1160,2.423,1498,4.412,1702,3.39,1703,2.663,1704,3.027,1705,4.848,1706,4.848,1707,4.023,1708,4.848,1709,3.027,1710,3.027,1711,3.027,1712,3.027,1713,3.027,1714,3.027,1715,3.027,1716,4.573,1717,3.027,1718,3.027,1719,4.573,1720,3.027,1721,4.573,1722,5.511,1723,5.511,1724,5.511,1725,3.027,1726,2.663,1727,3.027,1728,3.027,1729,4.573,1730,4.573,1731,4.573,1732,3.027,1733,4.573,1734,3.027,1735,3.027,1736,4.573,1737,4.573,1738,3.027,1739,3.027,1740,3.027,1741,3.027,1742,3.027,1743,3.027,1744,3.027,1745,3.027,1746,3.027]],["title/modules/UsersModule.html",[40,1.071,61,2.548]],["body/modules/UsersModule.html",[1,3.227,3,0.108,4,0.098,5,0.098,14,1.539,16,0.01,31,0.312,35,0.118,36,0.108,38,0.007,39,0.007,40,1.481,42,1.631,43,2.594,52,4.648,56,5.144,57,5.144,61,5.085,62,2.775,63,2.036,64,2.036,66,2.433,67,0.567,83,2.861,84,5.238,86,2.861,168,2.594,173,2.098,226,3.844,280,3.367,443,2.585,444,1.842,775,3.497,1337,2.714,1400,2.714,1702,5.022,1726,3.843,1747,3.843,1748,3.843,1749,4.369,1750,3.843,1751,4.369,1752,5.954,1753,4.369,1754,3.843,1755,3.843,1756,4.369]],["title/injectables/UsersService.html",[226,1.939,301,0.783]],["body/injectables/UsersService.html",[1,1.309,3,0.034,4,0.031,5,0.086,7,0.108,12,1.354,14,2.529,15,0.507,16,0.01,17,1.604,20,0.737,23,2.393,31,0.223,33,0.585,35,0.037,36,0.034,38,0.003,39,0.003,67,0.18,83,0.908,85,1.466,86,0.908,91,1.959,117,1.607,119,1.028,132,2.319,177,0.585,187,1.509,188,1.323,189,1.432,191,1.65,192,2.208,216,0.963,226,1.087,233,0.703,234,1.354,239,1.818,242,1.981,243,2.568,254,2.378,257,1.11,296,1.676,301,0.439,302,0.475,331,2.568,332,1.11,334,1.933,337,0.963,344,1.22,345,1.028,349,0.963,352,2.028,353,1.673,363,1.028,444,0.585,449,3.039,459,0.82,465,0.963,490,0.963,495,2.227,712,2.846,764,1.028,782,3.039,793,1.11,801,1.79,1067,1.11,1313,1.22,1337,0.861,1348,3.363,1352,1.933,1364,3.824,1371,3.824,1372,4.356,1390,1.22,1400,0.861,1408,3.363,1419,2.125,1432,1.22,1516,6.458,1589,2.125,1654,1.79,1664,3.377,1665,2.822,1666,1.22,1667,1.22,1668,2.125,1669,1.22,1705,2.125,1706,2.125,1707,2.125,1708,2.125,1754,1.22,1755,1.22,1757,1.22,1758,2.415,1759,2.415,1760,2.415,1761,2.415,1762,2.415,1763,2.415,1764,2.415,1765,2.415,1766,2.415,1767,2.415,1768,2.415,1769,1.387,1770,3.208,1771,5.135,1772,1.387,1773,2.415,1774,2.415,1775,5.442,1776,1.387,1777,2.415,1778,1.387,1779,2.415,1780,1.387,1781,2.415,1782,2.415,1783,1.387,1784,2.415,1785,1.387,1786,2.415,1787,1.387,1788,2.415,1789,1.387,1790,2.415,1791,1.387,1792,2.415,1793,1.387,1794,2.415,1795,1.387,1796,2.415,1797,1.387,1798,2.415,1799,1.387,1800,2.415,1801,1.387,1802,2.415,1803,1.387,1804,2.415,1805,1.387,1806,2.415,1807,1.387,1808,2.415,1809,1.387,1810,2.415,1811,1.387,1812,1.387,1813,2.415,1814,2.415,1815,2.415,1816,1.387,1817,1.387,1818,3.208,1819,1.387,1820,1.387,1821,1.387,1822,4.777,1823,1.387,1824,1.387,1825,1.387,1826,1.387,1827,1.387,1828,1.387,1829,2.415,1830,1.387,1831,1.387,1832,1.387,1833,1.387,1834,1.387,1835,1.387,1836,1.387,1837,1.387,1838,1.387,1839,1.387,1840,2.415,1841,1.387,1842,1.387,1843,1.387,1844,1.387,1845,1.387,1846,1.387,1847,2.415,1848,1.387,1849,1.387,1850,2.415]],["title/interfaces/VerificationTokenPayload.html",[719,2.157,794,3.192]],["body/interfaces/VerificationTokenPayload.html",[3,0.155,4,0.139,5,0.139,7,0.484,8,1.593,15,0.446,16,0.01,17,1.751,36,0.155,38,0.008,39,0.008,91,3.742,229,2.906,719,3.124,794,5.547,1136,4.084,1579,4.993,1851,5.487]],["title/coverage.html",[1852,4.72]],["body/coverage.html",[0,2.583,1,2.108,5,0.04,6,1.579,14,0.632,15,0.128,16,0.01,35,0.221,38,0.003,39,0.003,78,1.175,83,1.175,86,1.175,92,2.09,108,1.87,171,2.382,172,1.33,174,1.579,176,1.175,184,0.899,203,1.246,210,1.296,214,0.972,217,0.866,219,1.33,222,1.33,226,0.808,228,1.115,229,2.854,275,1.246,276,1.246,277,1.246,278,1.246,290,1.87,291,3.25,292,2.09,301,1.436,303,1.579,339,1.115,353,0.69,385,1.33,386,1.579,394,1.175,397,1.115,399,1.175,408,1.246,415,1.33,416,1.246,418,1.175,447,1.579,460,1.33,477,1.579,487,1.579,488,2.41,496,1.33,497,1.579,504,1.175,530,0.934,546,1.579,573,1.33,574,1.579,575,1.436,576,2.41,585,1.015,586,1.579,599,1.33,600,1.579,605,1.246,608,1.33,614,1.015,615,1.246,621,1.246,635,1.33,639,1.33,643,1.436,644,1.579,645,1.579,648,1.579,649,2.41,654,1.579,655,1.579,660,1.436,661,1.579,663,1.33,668,1.579,669,1.579,687,1.175,688,1.579,689,2.41,698,1.33,699,1.579,705,1.33,706,1.579,707,1.579,712,1.33,713,2.649,714,2.649,719,2.924,734,1.33,735,1.579,753,1.436,754,1.33,756,1.436,757,1.579,777,1.579,782,1.062,794,1.33,836,1.246,837,1.579,838,1.579,846,1.33,847,1.579,856,1.175,865,1.579,887,1.579,912,1.579,921,1.579,924,1.579,925,1.579,928,1.579,929,1.579,940,1.579,941,1.579,947,1.33,948,1.436,949,1.579,959,1.33,960,1.579,973,7.137,974,1.579,975,2.232,976,1.579,977,2.41,978,1.579,999,1.579,1005,1.33,1006,1.579,1007,1.579,1015,1.579,1017,1.579,1026,1.436,1027,1.579,1047,1.579,1052,1.579,1055,1.33,1056,1.579,1097,1.33,1098,1.579,1111,1.579,1132,1.33,1133,1.579,1135,1.246,1137,2.41,1138,2.09,1139,1.579,1141,1.33,1142,1.579,1147,1.33,1148,1.579,1167,1.246,1173,1.115,1197,1.175,1208,1.33,1214,1.579,1237,1.579,1238,1.579,1278,1.579,1336,1.175,1337,1.87,1338,1.436,1339,2.41,1348,1.175,1354,2.41,1399,1.175,1400,1.87,1401,1.436,1408,1.175,1436,2.649,1450,1.579,1458,1.33,1459,1.579,1460,1.579,1469,1.33,1470,1.579,1489,1.175,1509,1.579,1543,1.33,1544,1.579,1578,1.579,1579,2.41,1580,1.33,1581,2.7,1582,1.579,1585,1.33,1586,1.579,1601,1.175,1622,1.579,1648,1.579,1656,1.579,1663,1.579,1702,1.33,1703,1.579,1757,1.579,1851,1.579,1852,1.436,1853,1.794,1854,1.794,1855,1.794,1856,1.579,1857,4.554,1858,1.579,1859,7.652,1860,1.436,1861,1.579,1862,1.579,1863,3.89,1864,1.579,1865,6.124,1866,1.794,1867,6.76,1868,7.4,1869,7.722,1870,6.124,1871,3.011,1872,1.579,1873,1.579,1874,1.794,1875,1.794,1876,1.794,1877,1.794,1878,1.579,1879,1.579,1880,1.579,1881,1.579,1882,1.579,1883,1.579,1884,1.579,1885,1.579,1886,1.794,1887,1.794]],["title/dependencies.html",[43,2.258,1888,3.155]],["body/dependencies.html",[16,0.01,33,1.534,35,0.141,38,0.006,39,0.006,43,1.585,67,0.472,70,1.282,72,3.201,77,2.913,95,2.913,98,2.526,100,3.201,102,4.608,103,4.193,104,3.201,106,2.526,111,2.698,112,2.698,133,2.913,259,3.883,283,1.894,286,2.383,334,2.913,444,1.534,523,2.913,524,2.913,583,1.534,596,2.383,613,2.526,796,3.201,898,3.201,970,2.913,986,3.636,987,2.698,989,2.839,1023,3.201,1072,4.193,1205,4.193,1206,5.399,1207,3.201,1253,2.913,1376,2.913,1377,2.913,1379,2.913,1521,3.201,1553,2.913,1635,3.201,1637,3.201,1652,3.201,1653,3.201,1889,3.638,1890,3.638,1891,3.638,1892,3.638,1893,3.638,1894,3.638,1895,3.638,1896,3.638,1897,3.638,1898,3.638,1899,3.638,1900,3.638,1901,3.638,1902,3.638,1903,7.635,1904,3.638,1905,5.238,1906,3.638,1907,3.638,1908,3.638,1909,5.238,1910,3.638,1911,3.638,1912,3.638,1913,3.638,1914,3.638,1915,3.638,1916,3.638,1917,3.638,1918,3.638,1919,3.638,1920,3.638,1921,3.638,1922,3.638,1923,3.638,1924,5.238,1925,3.638,1926,3.638,1927,3.638,1928,3.638,1929,3.638,1930,3.638,1931,3.638,1932,3.638,1933,3.638,1934,3.638,1935,3.638,1936,3.638,1937,3.638,1938,5.238,1939,3.638,1940,3.638,1941,3.638,1942,3.638,1943,3.638,1944,3.638,1945,3.201,1946,3.638,1947,3.638,1948,3.638,1949,3.638,1950,3.638,1951,3.638,1952,3.638,1953,3.638,1954,3.638,1955,3.638,1956,3.638,1957,3.638]],["title/miscellaneous/enumerations.html",[1958,2.122,1959,4.561]],["body/miscellaneous/enumerations.html",[7,0.506,16,0.009,38,0.009,39,0.009,320,4.047,335,6.755,337,5.33,1958,3.855,1959,5.732,1960,6.515,1961,7.678,1962,6.515,1963,6.515,1964,6.515]],["title/miscellaneous/functions.html",[1958,2.122,1965,4.561]],["body/miscellaneous/functions.html",[7,0.42,15,0.537,16,0.009,38,0.008,39,0.008,187,1.601,188,1.404,189,1.519,191,1.276,211,3.057,763,5.078,1069,5.078,1856,4.755,1858,6.026,1860,4.327,1861,6.026,1872,4.755,1873,6.615,1878,4.755,1879,6.026,1880,6.026,1881,6.026,1958,3.198,1965,4.755,1966,5.405,1967,5.405,1968,4.755,1969,5.405,1970,5.405,1971,5.405,1972,5.405,1973,5.405,1974,6.849,1975,6.849,1976,5.405,1977,6.849,1978,6.849,1979,6.849]],["title/index.html",[7,0.278,1980,3.587,1981,3.587]],["body/index.html",[4,0.114,16,0.01,38,0.007,39,0.007,529,2.765,721,4.085,815,4.085,1424,4.489,1613,4.489,1852,4.085,1982,5.102,1983,8.354,1984,5.102,1985,5.102,1986,8.209,1987,5.102,1988,5.102,1989,6.601,1990,5.102,1991,5.102,1992,5.102,1993,5.102,1994,6.601,1995,6.601,1996,5.102,1997,5.102,1998,5.102,1999,6.601,2000,6.601,2001,6.601,2002,5.102,2003,5.102,2004,5.102,2005,5.102,2006,5.102,2007,4.489,2008,5.102,2009,5.102,2010,5.102,2011,5.102,2012,5.102,2013,5.102,2014,5.102,2015,5.102,2016,5.102,2017,5.102,2018,5.102,2019,5.102,2020,5.102,2021,4.489]],["title/modules.html",[42,2.201]],["body/modules.html",[16,0.007,38,0.007,39,0.007,41,3.667,42,1.846,46,3.239,47,3.434,48,3.434,49,3.434,50,3.434,51,3.239,52,2.927,53,3.434,54,3.434,55,3.434,56,3.239,57,3.239,58,3.239,59,3.434,60,3.434,61,2.927,274,3.434,2007,7.696,2022,8.748,2023,8.748,2024,8.907,2025,7.935,2026,7.935]],["title/overview.html",[2027,5.187]],["body/overview.html",[2,1.394,16,0.01,38,0.005,39,0.005,41,6.432,42,0.96,43,1.758,44,2.264,45,2.264,46,5.376,47,4.25,48,4.882,49,3.456,50,3.456,51,4.939,52,4.279,53,4.715,54,3.456,55,5.02,56,4.448,57,4.448,58,3.691,59,4.882,60,3.456,61,4.705,62,1.88,63,1.199,64,1.199,173,0.907,214,3.811,226,3.059,228,4.219,270,2.264,271,2.264,272,2.264,273,2.264,274,5.02,275,3.456,276,3.456,277,3.456,278,3.456,302,0.881,418,3.26,439,2.264,440,2.264,486,0.769,504,4.448,537,2.264,538,2.264,540,2.264,753,2.06,769,2.264,770,2.264,771,2.264,782,4.019,831,2.264,832,2.264,833,2.264,856,3.26,860,2.264,861,2.264,1136,1.685,1173,3.092,1194,2.264,1195,2.264,1197,3.26,1332,2.264,1345,2.264,1346,2.264,1347,2.264,1348,4.448,1405,2.264,1406,2.264,1407,2.264,1408,4.448,1489,4.448,1503,2.264,1504,2.264,1505,2.264,1601,3.26,1618,2.264,1620,2.264,1747,2.264,1748,2.264,1750,2.264,2027,2.264,2028,2.573,2029,2.573,2030,2.573,2031,2.573,2032,2.573,2033,2.573]],["title/properties.html",[8,1.104,1888,3.155]],["body/properties.html",[8,1.4,16,0.01,38,0.009,39,0.009,529,3.563,1945,5.784,2021,5.784,2034,6.574,2035,6.574,2036,6.574,2037,6.574,2038,6.574]],["title/miscellaneous/typealiases.html",[1958,2.122,2039,5.184]],["body/miscellaneous/typealiases.html",[7,0.517,15,0.556,16,0.009,38,0.009,39,0.009,1144,5.335,1860,5.335,1958,3.943,1968,5.863,2040,6.664,2041,7.781]],["title/miscellaneous/variables.html",[1958,2.122,2042,4.561]],["body/miscellaneous/variables.html",[7,0.383,15,0.514,16,0.01,17,1.077,37,2.767,38,0.007,39,0.007,239,1.736,320,4.471,815,3.947,824,5.168,1031,4.337,1082,5.679,1273,3.228,1654,3.655,1862,4.337,1864,5.679,1882,4.337,1883,5.679,1884,4.337,1885,5.679,1958,2.917,2042,4.337,2043,4.93,2044,4.93,2045,4.93,2046,4.93,2047,4.93,2048,4.93,2049,4.93,2050,4.93,2051,4.93,2052,4.93,2053,4.93,2054,4.93,2055,4.93,2056,4.93,2057,4.93,2058,4.93,2059,4.93,2060,4.93,2061,4.93,2062,4.93,2063,4.93,2064,4.93,2065,4.93,2066,4.93,2067,4.93,2068,4.93,2069,4.93,2070,4.93,2071,4.93,2072,4.93,2073,4.93,2074,4.93]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"modules/SearchModule.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":973,"title":{},"body":{"classes/ImageProcessor.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":1951,"title":{},"body":{"dependencies.html":{}}}],["0.10.3",{"_index":1923,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":1931,"title":{},"body":{"dependencies.html":{}}}],["0.3.9",{"_index":1957,"title":{},"body":{"dependencies.html":{}}}],["0.5.0",{"_index":1932,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1930,"title":{},"body":{"dependencies.html":{}}}],["0.5.9",{"_index":1918,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":1902,"title":{},"body":{"dependencies.html":{}}}],["0.7.2",{"_index":1898,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1859,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1876,"title":{},"body":{"coverage.html":{}}}],["0/19",{"_index":1877,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1868,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1869,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1867,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1870,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1865,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1871,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1866,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1332,"title":{},"body":{"injectables/PostsService.html":{},"overview.html":{}}}],["1.0.0",{"_index":1945,"title":{},"body":{"dependencies.html":{},"properties.html":{}}}],["1.1.0",{"_index":1907,"title":{},"body":{"dependencies.html":{}}}],["1.1.19",{"_index":1890,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":1934,"title":{},"body":{"dependencies.html":{}}}],["1.5.1",{"_index":1948,"title":{},"body":{"dependencies.html":{}}}],["1.7.0",{"_index":1895,"title":{},"body":{"dependencies.html":{}}}],["1.8.1",{"_index":1900,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["10.1.0",{"_index":1901,"title":{},"body":{"dependencies.html":{}}}],["10.1.2",{"_index":1906,"title":{},"body":{"dependencies.html":{}}}],["1025",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["1048576",{"_index":1732,"title":{},"body":{"controllers/UsersController.html":{}}}],["10485760",{"_index":1740,"title":{},"body":{"controllers/UsersController.html":{}}}],["11",{"_index":2029,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":1943,"title":{},"body":{"dependencies.html":{}}}],["120",{"_index":1212,"title":{},"body":{"modules/PostsModule.html":{}}}],["16.6.0",{"_index":1936,"title":{},"body":{"dependencies.html":{}}}],["17.1.1",{"_index":1899,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":2028,"title":{},"body":{"overview.html":{}}}],["2",{"_index":1334,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.0",{"_index":1929,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":1910,"title":{},"body":{"dependencies.html":{}}}],["2.1218.0",{"_index":1925,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":1904,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":2031,"title":{},"body":{"overview.html":{}}}],["23505",{"_index":1964,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["2fa",{"_index":1587,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["3",{"_index":1335,"title":{},"body":{"injectables/PostsService.html":{}}}],["3.0.0",{"_index":1913,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":1953,"title":{},"body":{"dependencies.html":{}}}],["3.10.2",{"_index":1924,"title":{},"body":{"dependencies.html":{}}}],["3.15.9",{"_index":1915,"title":{},"body":{"dependencies.html":{}}}],["3.82.0",{"_index":1956,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":2032,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":1944,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":1928,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1921,"title":{},"body":{"dependencies.html":{}}}],["4.7.7",{"_index":1937,"title":{},"body":{"dependencies.html":{}}}],["4.9.0",{"_index":1927,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":1044,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["5.0.1",{"_index":1926,"title":{},"body":{"dependencies.html":{}}}],["500",{"_index":1042,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["6.7.8",{"_index":1942,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":2033,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":1955,"title":{},"body":{"dependencies.html":{}}}],["7d",{"_index":2073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":2030,"title":{},"body":{"overview.html":{}}}],["8.0.1",{"_index":1939,"title":{},"body":{"dependencies.html":{}}}],["8.4.0",{"_index":1892,"title":{},"body":{"dependencies.html":{}}}],["8.8.0",{"_index":1947,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":1903,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":1905,"title":{},"body":{"dependencies.html":{}}}],["9.0.11",{"_index":1908,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":1941,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":1909,"title":{},"body":{"dependencies.html":{}}}],["9]\\d{11,14",{"_index":1445,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["__dirname",{"_index":804,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["access",{"_index":1313,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["accesstokencookie",{"_index":251,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["accountsid",{"_index":1522,"title":{},"body":{"injectables/SmsService.html":{}}}],["accounttoken",{"_index":1524,"title":{},"body":{"injectables/SmsService.html":{}}}],["acl",{"_index":1423,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["add",{"_index":1561,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["addavatar",{"_index":1705,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addavatar(request",{"_index":1709,"title":{},"body":{"controllers/UsersController.html":{}}}],["addavatar(userid",{"_index":1774,"title":{},"body":{"injectables/UsersService.html":{}}}],["addprivatefile",{"_index":1706,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addprivatefile(request",{"_index":1712,"title":{},"body":{"controllers/UsersController.html":{}}}],["addprivatefile(userid",{"_index":1777,"title":{},"body":{"injectables/UsersService.html":{}}}],["address",{"_index":1,"title":{"entities/Address.html":{}},"body":{"entities/Address.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/RegistrationDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["address.entity",{"_index":1699,"title":{},"body":{"entities/User.html":{}}}],["addressrepository",{"_index":1770,"title":{},"body":{"injectables/UsersService.html":{}}}],["addsubscriber",{"_index":1546,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["addsubscriber(@body",{"_index":1560,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["addsubscriber(subscriber",{"_index":1548,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["adipisicing",{"_index":2054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adm",{"_index":1916,"title":{},"body":{"dependencies.html":{}}}],["age=${exptime",{"_index":376,"title":{},"body":{"injectables/AuthService.html":{}}}],["age=0",{"_index":381,"title":{},"body":{"injectables/AuthService.html":{}}}],["aliases",{"_index":2040,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{}}}],["amazing",{"_index":2008,"title":{},"body":{"index.html":{}}}],["amet",{"_index":2052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["amqp",{"_index":1919,"title":{},"body":{"dependencies.html":{}}}],["amqp://${user}:${password}@${host",{"_index":1575,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["amqplib",{"_index":1922,"title":{},"body":{"dependencies.html":{}}}],["any(paragraphs",{"_index":1333,"title":{},"body":{"injectables/PostsService.html":{}}}],["anyfilesinterceptor",{"_index":1071,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["aperiam",{"_index":2059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apollo",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["apollodriver",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["apolloserverpluginlandingpagelocaldefault",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["app",{"_index":815,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["app_filter",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":41,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appprops",{"_index":1978,"title":{},"body":{"miscellaneous/functions.html":{}}}],["approved",{"_index":1538,"title":{},"body":{"injectables/SmsService.html":{}}}],["args",{"_index":1224,"title":{},"body":{"classes/PostsResolver.html":{}}}],["args('createpostinput",{"_index":1234,"title":{},"body":{"classes/PostsResolver.html":{}}}],["argumentshost",{"_index":915,"title":{},"body":{"classes/ExceptionLoggerFilter.html":{}}}],["array",{"_index":1123,"title":{},"body":{"entities/Post.html":{},"interfaces/PostSearchResult.html":{}}}],["asc",{"_index":1308,"title":{},"body":{"injectables/PostsService.html":{}}}],["async",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"classes/GetCommentsHandler.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"modules/SearchModule.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["atque",{"_index":2065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailService.html":{},"modules/SearchModule.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"coverage.html":{}}}],["auth.controller",{"_index":281,"title":{},"body":{"modules/AuthModule.html":{},"modules/TwoFactorAuthModule.html":{}}}],["auth.controller.ts",{"_index":1586,"title":{},"body":{"controllers/TwoFactorAuthController.html":{},"coverage.html":{}}}],["auth.controller.ts:30",{"_index":1595,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["auth.controller.ts:41",{"_index":1599,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["auth.controller.ts:58",{"_index":1592,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["auth.module",{"_index":293,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.module.ts",{"_index":1621,"title":{},"body":{"modules/TwoFactorAuthModule.html":{}}}],["auth.service",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{}}}],["auth.service.ts",{"_index":1622,"title":{},"body":{"injectables/TwoFactorAuthService.html":{},"coverage.html":{}}}],["auth.service.ts:10",{"_index":1626,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["auth.service.ts:16",{"_index":1628,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["auth.service.ts:33",{"_index":1633,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["auth.service.ts:38",{"_index":1630,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["auth/auth.module",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/dto/two",{"_index":1582,"title":{},"body":{"classes/TwoFactorAuthCodeDto.html":{},"coverage.html":{}}}],["auth/two",{"_index":292,"title":{},"body":{"modules/AuthModule.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{}}}],["authcontroller",{"_index":172,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":1588,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["authenticate(request",{"_index":1590,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["authenticating",{"_index":1616,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["authentication",{"_index":380,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"controllers/TwoFactorAuthController.html":{}}}],["authentication=${token",{"_index":372,"title":{},"body":{"injectables/AuthService.html":{}}}],["authenticationservice",{"_index":553,"title":{},"body":{"injectables/ChatService.html":{}}}],["authenticationtoken",{"_index":565,"title":{},"body":{"injectables/ChatService.html":{}}}],["authenticator",{"_index":1634,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["authenticator.generatesecret",{"_index":1638,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["authenticator.keyuri",{"_index":1639,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["authenticator.verify",{"_index":1646,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["authguard",{"_index":954,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LocalGuard.html":{}}}],["authguard('jwt",{"_index":955,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{}}}],["authguard('local",{"_index":1016,"title":{},"body":{"injectables/LocalGuard.html":{}}}],["authmodule",{"_index":46,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":529,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"entities/Comment.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"index.html":{},"properties.html":{}}}],["author.posts",{"_index":588,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{}}}],["authorid",{"_index":1140,"title":{},"body":{"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{}}}],["authservice",{"_index":214,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/LocalStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["autoschemafile",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":2026,"title":{},"body":{"modules.html":{}}}],["avatar",{"_index":1664,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["avatars/${id",{"_index":1426,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["await",{"_index":243,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"classes/GetCommentsHandler.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/OptimizeController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":1376,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"dependencies.html":{}}}],["backers",{"_index":2009,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":792,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthController.html":{}}}],["badrequestexception('bad",{"_index":829,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('email",{"_index":820,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["badrequestexception('phone",{"_index":1494,"title":{},"body":{"controllers/SmsController.html":{}}}],["badrequestexception('wrong",{"_index":1539,"title":{},"body":{"injectables/SmsService.html":{}}}],["baseexceptionfilter",{"_index":913,"title":{},"body":{"classes/ExceptionLoggerFilter.html":{}}}],["bcrypt",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1848,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(inputpassword",{"_index":366,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(refreshtoken",{"_index":1846,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(registrationdata.password",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{}}}],["before",{"_index":1615,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["body",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["body('address",{"_index":241,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.interface",{"_index":1145,"title":{},"body":{"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{}}}],["body.interface.ts",{"_index":1139,"title":{},"body":{"interfaces/PostSearchBody.html":{},"coverage.html":{}}}],["boolean",{"_index":763,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"interfaces/TokenPayload.html":{},"entities/User.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":1873,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":2024,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":2022,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":1383,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["buffer",{"_index":1371,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/UsersService.html":{}}}],["bull",{"_index":970,"title":{},"body":{"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"dependencies.html":{}}}],["bullmodule",{"_index":105,"title":{},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{}}}],["bullmodule.forrootasync",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["bullmodule.registerqueue",{"_index":1095,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["cache",{"_index":1205,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":1169,"title":{},"body":{"controllers/PostsController.html":{}}}],["cachemodule",{"_index":1199,"title":{},"body":{"modules/PostsModule.html":{}}}],["cachemodule.registerasync",{"_index":1210,"title":{},"body":{"modules/PostsModule.html":{}}}],["canactivate",{"_index":758,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["canactivate(context",{"_index":759,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["cancelallscheduledemails",{"_index":866,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cascade",{"_index":1672,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":2071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{},"classes/ExceptionLoggerFilter.html":{},"controllers/SubscribersController.html":{},"injectables/UsersService.html":{}}}],["catch(exception",{"_index":914,"title":{},"body":{"classes/ExceptionLoggerFilter.html":{}}}],["categories",{"_index":387,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["categories.controller",{"_index":442,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":419,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/categories.module",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["categories/entity/category.entity",{"_index":1129,"title":{},"body":{"entities/Post.html":{}}}],["categoriescontroller",{"_index":385,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":47,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesrepository",{"_index":451,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["categoriesservice",{"_index":418,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":397,"title":{"entities/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Post.html":{},"coverage.html":{}}}],["category.dto",{"_index":421,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts",{"_index":649,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:7",{"_index":651,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:9",{"_index":1650,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.posts",{"_index":1115,"title":{},"body":{"entities/Post.html":{}}}],["categorynotfoundexception",{"_index":460,"title":{"classes/CategoryNotFoundException.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["categorynotfoundexception(id",{"_index":468,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["catid",{"_index":493,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["channel",{"_index":1532,"title":{},"body":{"injectables/SmsService.html":{}}}],["chat.gateway",{"_index":543,"title":{},"body":{"modules/ChatModule.html":{}}}],["chat.service",{"_index":525,"title":{},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{}}}],["chat/chat.module",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["chatgateway",{"_index":496,"title":{"classes/ChatGateway.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"coverage.html":{}}}],["chatmodule",{"_index":48,"title":{"modules/ChatModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ChatModule.html":{},"modules.html":{},"overview.html":{}}}],["chatservice",{"_index":504,"title":{"injectables/ChatService.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"coverage.html":{},"overview.html":{}}}],["checkverificationcode",{"_index":1472,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcode(request",{"_index":1475,"title":{},"body":{"controllers/SmsController.html":{}}}],["checkverificationcodedto",{"_index":573,"title":{"classes/CheckVerificationCodeDto.html":{}},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"coverage.html":{}}}],["city",{"_index":10,"title":{},"body":{"entities/Address.html":{},"classes/CreateUserDto.html":{},"classes/RegistrationDto.html":{}}}],["class",{"_index":35,"title":{"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/ImageProcessor.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/PostNotFoundException.html":{},"classes/PostsResolver.html":{},"classes/RegistrationDto.html":{},"classes/SendMessageDto.html":{},"classes/TwoFactorAuthCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"modules/SearchModule.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":486,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"classes/ImageProcessor.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/PostNotFoundException.html":{},"classes/PostsResolver.html":{},"classes/RegistrationDto.html":{},"classes/SendMessageDto.html":{},"classes/TwoFactorAuthCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["client/.../_app.tsx",{"_index":1969,"title":{},"body":{"miscellaneous/functions.html":{}}}],["client/.../hello.ts",{"_index":1968,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["client/.../index.tsx",{"_index":2043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["client/pages/_app.tsx",{"_index":1856,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["client/pages/api/hello.ts",{"_index":1860,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["client/pages/index.tsx",{"_index":1862,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["clientproxy",{"_index":1552,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["clientproxyfactory",{"_index":1564,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["clientproxyfactory.create",{"_index":1572,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["cluster_appmodule",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":270,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":272,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":271,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":273,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":439,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_providers",{"_index":440,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_chatmodule",{"_index":537,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_exports",{"_index":540,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_chatmodule_imports",{"_index":539,"title":{},"body":{"modules/ChatModule.html":{}}}],["cluster_chatmodule_providers",{"_index":538,"title":{},"body":{"modules/ChatModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule",{"_index":769,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_exports",{"_index":770,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailconfirmationmodule_imports",{"_index":772,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["cluster_emailconfirmationmodule_providers",{"_index":771,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":831,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":833,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":832,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule",{"_index":860,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_emailschedulingmodule_imports",{"_index":862,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["cluster_emailschedulingmodule_providers",{"_index":861,"title":{},"body":{"modules/EmailSchedulingModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":1194,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":1196,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":1195,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_privatefilesmodule",{"_index":1345,"title":{},"body":{"modules/PrivateFilesModule.html":{},"overview.html":{}}}],["cluster_privatefilesmodule_exports",{"_index":1346,"title":{},"body":{"modules/PrivateFilesModule.html":{},"overview.html":{}}}],["cluster_privatefilesmodule_providers",{"_index":1347,"title":{},"body":{"modules/PrivateFilesModule.html":{},"overview.html":{}}}],["cluster_publicfilesmodule",{"_index":1405,"title":{},"body":{"modules/PublicFilesModule.html":{},"overview.html":{}}}],["cluster_publicfilesmodule_exports",{"_index":1406,"title":{},"body":{"modules/PublicFilesModule.html":{},"overview.html":{}}}],["cluster_publicfilesmodule_providers",{"_index":1407,"title":{},"body":{"modules/PublicFilesModule.html":{},"overview.html":{}}}],["cluster_smsmodule",{"_index":1503,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_exports",{"_index":1505,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_smsmodule_imports",{"_index":1506,"title":{},"body":{"modules/SmsModule.html":{}}}],["cluster_smsmodule_providers",{"_index":1504,"title":{},"body":{"modules/SmsModule.html":{},"overview.html":{}}}],["cluster_twofactorauthmodule",{"_index":1618,"title":{},"body":{"modules/TwoFactorAuthModule.html":{},"overview.html":{}}}],["cluster_twofactorauthmodule_imports",{"_index":1619,"title":{},"body":{"modules/TwoFactorAuthModule.html":{}}}],["cluster_twofactorauthmodule_providers",{"_index":1620,"title":{},"body":{"modules/TwoFactorAuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1747,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1750,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1749,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1748,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cmd",{"_index":1559,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["code",{"_index":577,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthController.html":{}}}],["code.dto",{"_index":1486,"title":{},"body":{"controllers/SmsController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["code.dto.ts",{"_index":576,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"classes/TwoFactorAuthCodeDto.html":{},"coverage.html":{}}}],["code.dto.ts:6",{"_index":1584,"title":{},"body":{"classes/TwoFactorAuthCodeDto.html":{}}}],["code.dto.ts:7",{"_index":579,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{}}}],["codes.enum",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["codes.enum.ts",{"_index":1961,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["column",{"_index":19,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["column('simple",{"_index":1130,"title":{},"body":{"entities/Post.html":{}}}],["column('text",{"_index":1122,"title":{},"body":{"entities/Post.html":{}}}],["column()@exclude",{"_index":1691,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":1684,"title":{},"body":{"entities/User.html":{}}}],["column({nullable",{"_index":1676,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":1679,"title":{},"body":{"entities/User.html":{}}}],["command",{"_index":677,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["command.author",{"_index":685,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["command.comment",{"_index":684,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandbus",{"_index":611,"title":{},"body":{"controllers/CommentsController.html":{}}}],["commandhandler",{"_index":678,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commandhandler(createcommentcommand",{"_index":680,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["commands/handlers/create",{"_index":636,"title":{},"body":{"modules/CommentsModule.html":{}}}],["commands/implementation/create",{"_index":616,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comment",{"_index":585,"title":{"entities/Comment.html":{}},"body":{"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/Post.html":{},"coverage.html":{}}}],["comment.command",{"_index":617,"title":{},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{}}}],["comment.command.ts",{"_index":655,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["comment.command.ts:4",{"_index":657,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.command.ts:6",{"_index":659,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.command.ts:7",{"_index":658,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["comment.dto",{"_index":618,"title":{},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{}}}],["comment.dto.ts",{"_index":661,"title":{},"body":{"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["comment.dto.ts:12",{"_index":665,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.dto.ts:8",{"_index":662,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["comment.handler",{"_index":637,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comment.handler.ts",{"_index":669,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["comment.handler.ts:10",{"_index":673,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comment.handler.ts:16",{"_index":676,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["comments",{"_index":601,"title":{},"body":{"controllers/CommentsController.html":{},"entities/Post.html":{}}}],["comments.controller",{"_index":633,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.dto",{"_index":620,"title":{},"body":{"controllers/CommentsController.html":{}}}],["comments.dto.ts",{"_index":925,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["comments.dto.ts:7",{"_index":927,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["comments.handler",{"_index":641,"title":{},"body":{"modules/CommentsModule.html":{}}}],["comments.handler.ts",{"_index":929,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["comments.handler.ts:15",{"_index":933,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["comments.handler.ts:9",{"_index":931,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["comments.post",{"_index":1119,"title":{},"body":{"entities/Post.html":{}}}],["comments.query",{"_index":623,"title":{},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsHandler.html":{}}}],["comments.query.ts",{"_index":941,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["comments.query.ts:1",{"_index":943,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments.query.ts:2",{"_index":945,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["comments/comments.module",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["comments/entity/comment.entity",{"_index":1128,"title":{},"body":{"entities/Post.html":{}}}],["commentscontroller",{"_index":599,"title":{"controllers/CommentsController.html":{}},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"coverage.html":{}}}],["commentsmodule",{"_index":49,"title":{"modules/CommentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommentsModule.html":{},"modules.html":{},"overview.html":{}}}],["commentsrepository",{"_index":674,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["complete",{"_index":1013,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["compodoc/compodoc",{"_index":1889,"title":{},"body":{"dependencies.html":{}}}],["component",{"_index":1977,"title":{},"body":{"miscellaneous/functions.html":{}}}],["configmodule",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/SubscribersModule.html":{},"modules/TwoFactorAuthModule.html":{}}}],["configmodule.forroot",{"_index":136,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/PostsModule.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"modules/SearchModule.html":{},"injectables/SmsService.html":{},"modules/SubscribersModule.html":{},"injectables/TwoFactorAuthService.html":{}}}],["configservice.get('elasticsearch_node",{"_index":1455,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_password",{"_index":1457,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('elasticsearch_username",{"_index":1456,"title":{},"body":{"modules/SearchModule.html":{}}}],["configservice.get('email_password",{"_index":906,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_port",{"_index":903,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":902,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":904,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('jwt_access_token_expiration_time",{"_index":300,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":297,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":995,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["configservice.get('postgres_db",{"_index":730,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_host",{"_index":724,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_password",{"_index":728,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_port",{"_index":725,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('postgres_user",{"_index":727,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.get('rabbitmq_host",{"_index":1569,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('rabbitmq_password",{"_index":1568,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('rabbitmq_queue_name",{"_index":1571,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('rabbitmq_user",{"_index":1567,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["configservice.get('redis_host",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["configservice.get('redis_port",{"_index":135,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{}}}],["confirm",{"_index":737,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirm(@query('token",{"_index":747,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirm(token",{"_index":739,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation",{"_index":736,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["confirmation.controller",{"_index":774,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["confirmation.controller.ts",{"_index":735,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"coverage.html":{}}}],["confirmation.controller.ts:13",{"_index":741,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation.controller.ts:22",{"_index":745,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["confirmation.guard",{"_index":1171,"title":{},"body":{"controllers/PostsController.html":{}}}],["confirmation.guard.ts",{"_index":757,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["confirmation.guard.ts:11",{"_index":761,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["confirmation.module",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["confirmation.module.ts",{"_index":773,"title":{},"body":{"modules/EmailConfirmationModule.html":{}}}],["confirmation.service",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{}}}],["confirmation.service.ts",{"_index":777,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["confirmation.service.ts:12",{"_index":783,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:20",{"_index":791,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:50",{"_index":789,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:58",{"_index":787,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation.service.ts:76",{"_index":785,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmation/dto/confirmation",{"_index":644,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["confirmation/email",{"_index":108,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{}}}],["confirmation/guard/email",{"_index":756,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["confirmation/interface/verification",{"_index":1851,"title":{},"body":{"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["confirmed",{"_index":821,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"controllers/SmsController.html":{}}}],["confirmemail",{"_index":778,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemail(email",{"_index":784,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["confirmemaildto",{"_index":643,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["confirmphonenumber",{"_index":1511,"title":{},"body":{"injectables/SmsService.html":{}}}],["confirmphonenumber(userid",{"_index":1513,"title":{},"body":{"injectables/SmsService.html":{}}}],["connectedsocket",{"_index":520,"title":{},"body":{"classes/ChatGateway.html":{}}}],["connection",{"_index":1920,"title":{},"body":{"dependencies.html":{}}}],["consectetur",{"_index":2053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log('called",{"_index":972,"title":{},"body":{"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{}}}],["console.log('exception",{"_index":918,"title":{},"body":{"classes/ExceptionLoggerFilter.html":{}}}],["console.log(err",{"_index":910,"title":{},"body":{"injectables/EmailService.html":{}}}],["console.log(info",{"_index":911,"title":{},"body":{"injectables/EmailService.html":{}}}],["console.log(job",{"_index":880,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["const",{"_index":242,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"classes/GetCommentsHandler.html":{},"injectables/GraphqlJwtGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/SmsService.html":{},"modules/SubscribersModule.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constants/postgres",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/PostNotFoundException.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectqueue('image",{"_index":1075,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["constructor(authenticationservice",{"_index":550,"title":{},"body":{"injectables/ChatService.html":{}}}],["constructor(authservice",{"_index":1018,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(categoriesrepository",{"_index":448,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(catid",{"_index":491,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["constructor(chatservice",{"_index":503,"title":{},"body":{"classes/ChatGateway.html":{}}}],["constructor(comment",{"_index":656,"title":{},"body":{"classes/CreateCommentCommand.html":{}}}],["constructor(commentsrepository",{"_index":672,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["constructor(configservice",{"_index":890,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/SmsService.html":{}}}],["constructor(elasticsearchservice",{"_index":1242,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["constructor(emailservice",{"_index":781,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["constructor(postid",{"_index":942,"title":{},"body":{"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{}}}],["constructor(postsrepository",{"_index":1281,"title":{},"body":{"injectables/PostsService.html":{}}}],["constructor(postsservice",{"_index":1215,"title":{},"body":{"classes/PostsResolver.html":{}}}],["constructor(private",{"_index":425,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/ChatGateway.html":{},"controllers/CommentsController.html":{},"injectables/LocalStrategy.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"controllers/SmsController.html":{},"controllers/UsersController.html":{}}}],["constructor(privatefilesrepository",{"_index":1359,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["constructor(public",{"_index":946,"title":{},"body":{"classes/GetCommentsQuery.html":{}}}],["constructor(publicfilesrepository",{"_index":1414,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["constructor(usersrepository",{"_index":1769,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TwoFactorAuthService.html":{}}}],["content",{"_index":513,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/EmailScheduleDto.html":{},"entities/Message.html":{},"injectables/PostsSearchService.html":{}}}],["context",{"_index":762,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/PostsResolver.html":{}}}],["context.req.user",{"_index":1236,"title":{},"body":{"classes/PostsResolver.html":{}}}],["context.switchtohttp().getrequest",{"_index":765,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["controller",{"_index":171,"title":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('2fa",{"_index":1602,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["controller('auth",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('categories",{"_index":423,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('comments",{"_index":624,"title":{},"body":{"controllers/CommentsController.html":{}}}],["controller('email",{"_index":746,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{}}}],["controller('optimize",{"_index":1074,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["controller('posts",{"_index":1175,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('sms",{"_index":1491,"title":{},"body":{"controllers/SmsController.html":{}}}],["controller('subscribers",{"_index":1555,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["controller('users",{"_index":1727,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":259,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ChatService.html":{},"controllers/TwoFactorAuthController.html":{},"dependencies.html":{}}}],["core",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["cors",{"_index":526,"title":{},"body":{"classes/ChatGateway.html":{}}}],["count",{"_index":1305,"title":{},"body":{"injectables/PostsService.html":{}}}],["country",{"_index":11,"title":{},"body":{"entities/Address.html":{},"classes/CreateUserDto.html":{},"classes/RegistrationDto.html":{}}}],["coverage",{"_index":1852,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cqrsmodule",{"_index":634,"title":{},"body":{"modules/CommentsModule.html":{}}}],["create",{"_index":1654,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["create(userdata",{"_index":1779,"title":{},"body":{"injectables/UsersService.html":{}}}],["createcategory",{"_index":388,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["createcategory(@body",{"_index":431,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["createcategory(category",{"_index":393,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["createcategorydto",{"_index":394,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createcomment",{"_index":602,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcomment(comment",{"_index":604,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcommentcommand",{"_index":615,"title":{"classes/CreateCommentCommand.html":{}},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createcommentcommand(comment",{"_index":627,"title":{},"body":{"controllers/CommentsController.html":{}}}],["createcommentdto",{"_index":605,"title":{"classes/CreateCommentDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["createcommenthandler",{"_index":635,"title":{"classes/CreateCommentHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["createduser",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["createpost",{"_index":1149,"title":{},"body":{"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":1188,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostinput",{"_index":1217,"title":{},"body":{"classes/PostsResolver.html":{}}}],["createpost(post",{"_index":1154,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpostdto",{"_index":687,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["createpostdto:10",{"_index":1661,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostdto:6",{"_index":1660,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["createpostinput",{"_index":698,"title":{"classes/CreatePostInput.html":{}},"body":{"classes/CreatePostInput.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["createreadstream",{"_index":1395,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["createsubscriberdto",{"_index":705,"title":{"classes/CreateSubscriberDto.html":{}},"body":{"classes/CreateSubscriberDto.html":{},"controllers/SubscribersController.html":{},"coverage.html":{}}}],["createtransport",{"_index":897,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":712,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":363,"title":{},"body":{"injectables/AuthService.html":{},"injectables/ChatService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["cron",{"_index":873,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob",{"_index":872,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["ctx",{"_index":956,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{}}}],["ctx._source.${key}='${value",{"_index":1274,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["ctx.getcontext().req",{"_index":958,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{}}}],["currenthashedrefreshtoken",{"_index":1665,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["data",{"_index":2041,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["data.dto.ts",{"_index":645,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["data.dto.ts:6",{"_index":647,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["database",{"_index":729,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":50,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["databuffer",{"_index":1370,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["datasource",{"_index":1771,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":839,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{}}}],["date(emailschedule.date",{"_index":874,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date.gettime",{"_index":875,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date.now",{"_index":882,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["decodeconfirmationtoken",{"_index":779,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":786,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["decorators",{"_index":18,"title":{},"body":{"entities/Address.html":{},"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"controllers/EmailConfirmationController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/ImageProcessor.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"classes/RegistrationDto.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":37,"title":{},"body":{"entities/Address.html":{},"injectables/AuthService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/GetCommentsDto.html":{},"classes/ImageProcessor.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":20,"title":{},"body":{"entities/Address.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":249,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["delete(':id",{"_index":436,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["delete(':id')@httpcode(204",{"_index":400,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["deleteavatar",{"_index":1758,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteavatar(userid",{"_index":1782,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletecategory",{"_index":389,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["deletecategory(@param('id",{"_index":437,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deletecategory(id",{"_index":453,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["deletecategory(undefined",{"_index":398,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["deleteobject",{"_index":1431,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["deletepost",{"_index":1150,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepost(@param('id",{"_index":1192,"title":{},"body":{"controllers/PostsController.html":{}}}],["deletepost(id",{"_index":1157,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["deletepublicfile",{"_index":1411,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["deletepublicfile(fileid",{"_index":1416,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["deletepublicfilewithqueryrunner",{"_index":1412,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["deletepublicfilewithqueryrunner(fileid",{"_index":1418,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["deleteresponse",{"_index":474,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["deleteresponse.affected",{"_index":476,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["deleteuseravatar",{"_index":1759,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuseravatar(user",{"_index":1784,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":43,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SmsModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":2035,"title":{},"body":{"properties.html":{}}}],["development",{"_index":1985,"title":{},"body":{"index.html":{}}}],["dist/email/template/email",{"_index":805,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["document",{"_index":1258,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["documentation",{"_index":1853,"title":{},"body":{"coverage.html":{}}}],["dolor",{"_index":2050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doloribus",{"_index":2060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["downloadprivatefile",{"_index":1355,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["downloadprivatefile(fileid",{"_index":1362,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["driver",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["dto",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["dto/check",{"_index":1485,"title":{},"body":{"controllers/SmsController.html":{}}}],["dto/create",{"_index":420,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/CommentsController.html":{},"controllers/SubscribersController.html":{}}}],["dto/email",{"_index":854,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["dto/get",{"_index":619,"title":{},"body":{"controllers/CommentsController.html":{}}}],["dto/send",{"_index":1487,"title":{},"body":{"controllers/SmsController.html":{}}}],["dto/two",{"_index":1600,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["dto/update",{"_index":422,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["durable",{"_index":1577,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["e2e",{"_index":1996,"title":{},"body":{"index.html":{}}}],["each",{"_index":697,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":1671,"title":{},"body":{"entities/User.html":{}}}],["elastic/elasticsearch",{"_index":1891,"title":{},"body":{"dependencies.html":{}}}],["elasticsearchmodule",{"_index":1452,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchmodule.registerasync",{"_index":1453,"title":{},"body":{"modules/SearchModule.html":{}}}],["elasticsearchservice",{"_index":1243,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["elit",{"_index":2055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["email",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/LocalStrategy.html":{},"classes/RegistrationDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["email.service",{"_index":835,"title":{},"body":{"modules/EmailModule.html":{}}}],["email/email.module",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["email_confirmation_url",{"_index":160,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailConfirmationService.html":{}}}],["email_password",{"_index":157,"title":{},"body":{"modules/AppModule.html":{}}}],["email_port",{"_index":155,"title":{},"body":{"modules/AppModule.html":{}}}],["email_service",{"_index":154,"title":{},"body":{"modules/AppModule.html":{}}}],["email_user",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmationcontroller",{"_index":734,"title":{"controllers/EmailConfirmationController.html":{}},"body":{"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"coverage.html":{}}}],["emailconfirmationguard",{"_index":754,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["emailconfirmationmodule",{"_index":51,"title":{"modules/EmailConfirmationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EmailConfirmationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailconfirmationservice",{"_index":228,"title":{"injectables/EmailConfirmationService.html":{}},"body":{"controllers/AuthController.html":{},"controllers/EmailConfirmationController.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"coverage.html":{},"overview.html":{}}}],["emailmodule",{"_index":52,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedule",{"_index":853,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":879,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipient",{"_index":876,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":877,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":836,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailschedulingcontroller",{"_index":846,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"coverage.html":{}}}],["emailschedulingmodule",{"_index":53,"title":{"modules/EmailSchedulingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailSchedulingModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedulingservice",{"_index":856,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":782,"title":{"injectables/EmailService.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["en",{"_index":1534,"title":{},"body":{"injectables/SmsService.html":{}}}],["entities",{"_index":2,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"modules/DatabaseModule.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":0,"title":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{}},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity.{ts,js",{"_index":732,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["entity/address.entity",{"_index":1755,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity/category.entity",{"_index":445,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["entity/comment.entity",{"_index":638,"title":{},"body":{"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["entity/message.entity",{"_index":544,"title":{},"body":{"modules/ChatModule.html":{},"injectables/ChatService.html":{}}}],["entity/post.entity",{"_index":1201,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["entity/private",{"_index":1350,"title":{},"body":{"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{}}}],["entity/public",{"_index":1409,"title":{},"body":{"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{}}}],["entity/user.entity",{"_index":1754,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["enumerations",{"_index":1959,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":909,"title":{},"body":{"injectables/EmailService.html":{}}}],["error",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{},"controllers/SubscribersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["error?.code",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{}}}],["error?.name",{"_index":826,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["exception",{"_index":917,"title":{},"body":{"classes/ExceptionLoggerFilter.html":{}}}],["exception/category",{"_index":461,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["exception/post",{"_index":1297,"title":{},"body":{"injectables/PostsService.html":{}}}],["exceptionloggerfilter",{"_index":78,"title":{"classes/ExceptionLoggerFilter.html":{}},"body":{"modules/AppModule.html":{},"controllers/CategoriesController.html":{},"classes/ExceptionLoggerFilter.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["exclude",{"_index":595,"title":{},"body":{"entities/Comment.html":{},"entities/Post.html":{},"entities/User.html":{}}}],["exclude()@column({nullable",{"_index":1696,"title":{},"body":{"entities/User.html":{}}}],["exclude()@index('post_authorid_index')@manytoone(undefined",{"_index":1112,"title":{},"body":{"entities/Post.html":{}}}],["exclude()@manytomany(undefined",{"_index":1114,"title":{},"body":{"entities/Post.html":{}}}],["exclude()@manytoone(undefined",{"_index":587,"title":{},"body":{"entities/Comment.html":{}}}],["execute",{"_index":671,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["execute(command",{"_index":675,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["execute(query",{"_index":932,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["executioncontext",{"_index":760,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/GraphqlJwtGuard.html":{}}}],["exist",{"_index":1314,"title":{},"body":{"injectables/PostsService.html":{}}}],["exists",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["expired",{"_index":828,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["expiresin",{"_index":299,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{}}}],["export",{"_index":36,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"modules/SearchModule.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["exports",{"_index":280,"title":{},"body":{"modules/AuthModule.html":{},"modules/ChatModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":989,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"interfaces/RequestUser.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":1064,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{}}}],["exptime",{"_index":368,"title":{},"body":{"injectables/AuthService.html":{}}}],["extends",{"_index":489,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/ExceptionLoggerFilter.html":{},"injectables/GraphqlJwtGuard.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"classes/PostNotFoundException.html":{},"interfaces/RequestUser.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["extractjwt",{"_index":984,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":992,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["factor",{"_index":291,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{}}}],["factor.guard",{"_index":1170,"title":{},"body":{"controllers/PostsController.html":{}}}],["factor.guard.ts",{"_index":1006,"title":{},"body":{"injectables/JwtTwoFactorGuard.html":{},"coverage.html":{}}}],["factor.strategy",{"_index":294,"title":{},"body":{"modules/AuthModule.html":{}}}],["factor.strategy.ts",{"_index":1007,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["factor.strategy.ts:12",{"_index":1008,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["factor.strategy.ts:27",{"_index":1009,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["false",{"_index":119,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["field",{"_index":702,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["field(undefined",{"_index":700,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["fields",{"_index":1266,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["file",{"_index":5,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"modules/SearchModule.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["file.buffer",{"_index":1736,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.entity",{"_index":1351,"title":{},"body":{"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"entities/User.html":{}}}],["file.entity.ts",{"_index":1339,"title":{},"body":{"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"coverage.html":{}}}],["file.entity.ts:10",{"_index":1342,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:12",{"_index":1403,"title":{},"body":{"entities/PublicFile.html":{}}}],["file.entity.ts:13",{"_index":1344,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:6",{"_index":1402,"title":{},"body":{"entities/PublicFile.html":{}}}],["file.entity.ts:7",{"_index":1341,"title":{},"body":{"entities/PrivateFile.html":{}}}],["file.entity.ts:9",{"_index":1404,"title":{},"body":{"entities/PublicFile.html":{}}}],["file.key",{"_index":1432,"title":{},"body":{"injectables/PublicFilesService.html":{},"injectables/UsersService.html":{}}}],["file.originalname",{"_index":1737,"title":{},"body":{"controllers/UsersController.html":{}}}],["file.stream.pipe(response",{"_index":1744,"title":{},"body":{"controllers/UsersController.html":{}}}],["fileid",{"_index":1364,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/UsersService.html":{}}}],["fileinfo",{"_index":1390,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/UsersService.html":{}}}],["fileinfo.key",{"_index":1394,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["fileinfo.owner.id",{"_index":1837,"title":{},"body":{"injectables/UsersService.html":{}}}],["fileinterceptor",{"_index":1725,"title":{},"body":{"controllers/UsersController.html":{}}}],["filename",{"_index":1372,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/UsersService.html":{}}}],["filepath",{"_index":803,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["files",{"_index":1067,"title":{},"body":{"controllers/OptimizeController.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["files.module",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["files.module.ts",{"_index":1349,"title":{},"body":{"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{}}}],["files.service",{"_index":1352,"title":{},"body":{"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"injectables/UsersService.html":{}}}],["files.service.ts",{"_index":1354,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"coverage.html":{}}}],["files.service.ts:10",{"_index":1360,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["files.service.ts:17",{"_index":1373,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["files.service.ts:37",{"_index":1417,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["files.service.ts:42",{"_index":1363,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["files.service.ts:51",{"_index":1420,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["files.service.ts:58",{"_index":1368,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["files.service.ts:69",{"_index":1366,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["files/entity/private",{"_index":1338,"title":{},"body":{"entities/PrivateFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["files/entity/public",{"_index":1401,"title":{},"body":{"entities/PublicFile.html":{},"entities/User.html":{},"coverage.html":{}}}],["files/private",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["files/public",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["filetype",{"_index":1733,"title":{},"body":{"controllers/UsersController.html":{}}}],["filetypevalidator",{"_index":1721,"title":{},"body":{"controllers/UsersController.html":{}}}],["finally",{"_index":1833,"title":{},"body":{"injectables/UsersService.html":{}}}],["findmanyoptions",{"_index":1295,"title":{},"body":{"injectables/PostsService.html":{}}}],["findmanyoptions['where",{"_index":1299,"title":{},"body":{"injectables/PostsService.html":{}}}],["findoneparams",{"_index":399,"title":{"classes/FindOneParams.html":{}},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["first",{"_index":768,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["found",{"_index":495,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/GetCommentsHandler.html":{},"classes/PostNotFoundException.html":{},"injectables/PrivateFilesService.html":{},"injectables/UsersService.html":{}}}],["found.exception",{"_index":462,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/PostsService.html":{}}}],["found.exception.ts",{"_index":488,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["found.exception.ts:3",{"_index":492,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/PostNotFoundException.html":{}}}],["fs",{"_index":797,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["fs.readfilesync(filepath",{"_index":807,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["function",{"_index":1857,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1965,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatepresignedurl",{"_index":1356,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["generatepresignedurl(key",{"_index":1365,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["generatetwofactorauthenticationsecret",{"_index":1623,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["generatetwofactorauthenticationsecret(user",{"_index":1627,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["get(':id",{"_index":427,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["get(':id')@httpcode(200",{"_index":405,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["get('confirm",{"_index":740,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["get('files",{"_index":1716,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('files/:id",{"_index":1719,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('image/:id",{"_index":1061,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["get('logout",{"_index":265,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('profile",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('refresh",{"_index":262,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('search",{"_index":1180,"title":{},"body":{"controllers/PostsController.html":{}}}],["get()@httpcode(200",{"_index":402,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["get()@httpcode(200)@useinterceptors(cacheinterceptor",{"_index":1161,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(key",{"_index":2069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["getallcategories",{"_index":390,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getallmessages",{"_index":547,"title":{},"body":{"injectables/ChatService.html":{}}}],["getallposts",{"_index":1151,"title":{},"body":{"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["getallposts(offset",{"_index":1286,"title":{},"body":{"injectables/PostsService.html":{}}}],["getallposts(paragraph",{"_index":1159,"title":{},"body":{"controllers/PostsController.html":{}}}],["getallprivatefiles",{"_index":1707,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getallprivatefiles(@req",{"_index":1745,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(request",{"_index":1715,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallprivatefiles(userid",{"_index":1786,"title":{},"body":{"injectables/UsersService.html":{}}}],["getallsubscribers",{"_index":1547,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["getauthenticateduser",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["getauthenticateduser(email",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["getbyemail",{"_index":1760,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":1788,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":1761,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":1790,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcategorybyid",{"_index":391,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getcategorybyid(@param",{"_index":428,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcategorybyid(id",{"_index":456,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["getcategorybyid(undefined",{"_index":404,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["getcomments",{"_index":603,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcomments(@query",{"_index":628,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcomments(undefined",{"_index":607,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcommentsdto",{"_index":608,"title":{"classes/GetCommentsDto.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["getcommentshandler",{"_index":639,"title":{"classes/GetCommentsHandler.html":{}},"body":{"modules/CommentsModule.html":{},"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["getcommentsquery",{"_index":621,"title":{"classes/GetCommentsQuery.html":{}},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["getcommentsquery(postid",{"_index":631,"title":{},"body":{"controllers/CommentsController.html":{}}}],["getcookiesforlogout",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwtrefreshtoken(id",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwttoken",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["getcookiewithjwttoken(id",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{}}}],["getfileinfo",{"_index":1357,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["getfileinfo(fileid",{"_index":1367,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["getjobresult",{"_index":1058,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(@res",{"_index":1085,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getjobresult(response",{"_index":1060,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["getloglevels",{"_index":1881,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getloglevels(isproduction",{"_index":1970,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getobject",{"_index":1393,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["getpostbyid",{"_index":1152,"title":{},"body":{"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["getpostbyid(@args('id",{"_index":1232,"title":{},"body":{"classes/PostsResolver.html":{}}}],["getpostbyid(@param",{"_index":1184,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostbyid(id",{"_index":1222,"title":{},"body":{"classes/PostsResolver.html":{},"injectables/PostsService.html":{}}}],["getpostbyid(undefined",{"_index":1164,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@query('q",{"_index":1181,"title":{},"body":{"controllers/PostsController.html":{}}}],["getpostswithparagraph",{"_index":1279,"title":{},"body":{"injectables/PostsService.html":{}}}],["getpostswithparagraph(paragraph",{"_index":1289,"title":{},"body":{"injectables/PostsService.html":{}}}],["getprivatefile",{"_index":1708,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getprivatefile(request",{"_index":1718,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprivatefile(userid",{"_index":1792,"title":{},"body":{"injectables/UsersService.html":{}}}],["getrequest",{"_index":950,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{}}}],["getrequest(context",{"_index":951,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{}}}],["getting",{"_index":1980,"title":{"index.html":{}},"body":{}}],["getuserfromauthenticationtoken",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserfromauthenticationtoken(token",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["getuserfromsocket",{"_index":548,"title":{},"body":{"injectables/ChatService.html":{}}}],["getuserfromsocket(socket",{"_index":555,"title":{},"body":{"injectables/ChatService.html":{}}}],["getuserifrefreshtokenmatches",{"_index":1762,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":1794,"title":{},"body":{"injectables/UsersService.html":{}}}],["global",{"_index":1752,"title":{},"body":{"modules/UsersModule.html":{}}}],["gqlexecutioncontext",{"_index":953,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":957,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{}}}],["graph",{"_index":2025,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":1935,"title":{},"body":{"dependencies.html":{}}}],["graphqljwtguard",{"_index":947,"title":{"injectables/GraphqlJwtGuard.html":{}},"body":{"injectables/GraphqlJwtGuard.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["graphqlmodule",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["grow",{"_index":2004,"title":{},"body":{"index.html":{}}}],["grpc/grpc",{"_index":1893,"title":{},"body":{"dependencies.html":{}}}],["grpc/proto",{"_index":1896,"title":{},"body":{"dependencies.html":{}}}],["guard",{"_index":753,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guard/jwt",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["guard/jwt.guard",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["guard/local.guard",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards",{"_index":755,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["handlebars",{"_index":796,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"dependencies.html":{}}}],["handlebars.compile(source",{"_index":810,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["handleconnection",{"_index":500,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleconnection(socket",{"_index":507,"title":{},"body":{"classes/ChatGateway.html":{}}}],["handleoptimize",{"_index":962,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["handleoptimize(job",{"_index":965,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["handler",{"_index":1861,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["handler(req",{"_index":1973,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hapi/joi",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hashedpassword",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["hello",{"_index":1082,"title":{},"body":{"controllers/OptimizeController.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":2012,"title":{},"body":{"index.html":{}}}],["hits",{"_index":1143,"title":{},"body":{"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{}}}],["hits.map((item",{"_index":1268,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["home",{"_index":1864,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["host",{"_index":123,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"classes/ExceptionLoggerFilter.html":{},"modules/PostsModule.html":{},"modules/SubscribersModule.html":{}}}],["html",{"_index":817,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["htmltosend",{"_index":812,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["httpcode",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["httpcode(200",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["httpcode(200)@useguards(jwtguard)@get('profile",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200)@useguards(localguard)@post('login",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(201",{"_index":430,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["httpcode(204",{"_index":264,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["httpcode(204)@useguards(jwtguard)@get('logout",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":373,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":2018,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["httpstatus.internal_server_error",{"_index":360,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.not_found",{"_index":1814,"title":{},"body":{"injectables/UsersService.html":{}}}],["icommandhandler",{"_index":670,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["id",{"_index":12,"title":{},"body":{"entities/Address.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"injectables/EmailConfirmationService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsHandler.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"injectables/PublicFilesService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1854,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":1324,"title":{},"body":{"injectables/PostsService.html":{}}}],["ids.length",{"_index":1327,"title":{},"body":{"injectables/PostsService.html":{}}}],["ignoretls",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["image",{"_index":1096,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["image/png",{"_index":1644,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["imagebuffer",{"_index":1775,"title":{},"body":{"injectables/UsersService.html":{}}}],["imagemin",{"_index":1938,"title":{},"body":{"dependencies.html":{}}}],["imageprocessor",{"_index":959,"title":{"classes/ImageProcessor.html":{}},"body":{"classes/ImageProcessor.html":{},"modules/OptimizeModule.html":{},"coverage.html":{}}}],["imagequeue",{"_index":1076,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["implementation/create",{"_index":679,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["implementation/get",{"_index":935,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["implements",{"_index":498,"title":{},"body":{"classes/ChatGateway.html":{},"classes/CreateCommentHandler.html":{},"guards/EmailConfirmationGuard.html":{},"classes/GetCommentsHandler.html":{},"injectables/LogsMiddleware.html":{}}}],["import",{"_index":31,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"modules/SearchModule.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/SubscribersModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules/UsersModule.html":{}}}],["in(ids",{"_index":1329,"title":{},"body":{"injectables/PostsService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"entities/Address.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["index('post_authorid_index",{"_index":1131,"title":{},"body":{"entities/Post.html":{}}}],["indexpost",{"_index":1239,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["indexpost(post",{"_index":1245,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["info",{"_index":3,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"modules/SearchModule.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["inherited",{"_index":1659,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["initiatephonenumberverification",{"_index":1473,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["initiatephonenumberverification(@req",{"_index":1492,"title":{},"body":{"controllers/SmsController.html":{}}}],["initiatephonenumberverification(phonenumber",{"_index":1517,"title":{},"body":{"injectables/SmsService.html":{}}}],["initiatephonenumberverification(request",{"_index":1479,"title":{},"body":{"controllers/SmsController.html":{}}}],["inject",{"_index":130,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/SearchModule.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{}}}],["inject('subscribers_service",{"_index":1556,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["injectable",{"_index":301,"title":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/GraphqlJwtGuard.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/SmsService.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/GraphqlJwtGuard.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/SmsService.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/GraphqlJwtGuard.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/SmsService.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectqueue",{"_index":1068,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["injectrepository",{"_index":459,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(address",{"_index":1812,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(category",{"_index":463,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(comment",{"_index":681,"title":{},"body":{"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{}}}],["injectrepository(message",{"_index":563,"title":{},"body":{"injectables/ChatService.html":{}}}],["injectrepository(post",{"_index":1298,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(privatefile",{"_index":1380,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["injectrepository(publicfile",{"_index":1422,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["injectrepository(user",{"_index":1811,"title":{},"body":{"injectables/UsersService.html":{}}}],["input/post.input",{"_index":1228,"title":{},"body":{"classes/PostsResolver.html":{}}}],["inputpassword",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["inputtype",{"_index":704,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["installation",{"_index":1982,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1984,"title":{},"body":{"index.html":{}}}],["interface",{"_index":719,"title":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["interface/request",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["interface/token",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["interface/verification",{"_index":795,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["interfaces",{"_index":1136,"title":{},"body":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"interfaces/RequestUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":1810,"title":{},"body":{"injectables/UsersService.html":{}}}],["ipsum",{"_index":2049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iqueryhandler",{"_index":930,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["is2faunthenticated",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/TokenPayload.html":{}}}],["iscodevalid",{"_index":1607,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["iscompleted",{"_index":1089,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["isdatestring",{"_index":842,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isemail",{"_index":711,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegistrationDto.html":{}}}],["isemail()@isnotempty",{"_index":708,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegistrationDto.html":{}}}],["isemailconfirmed",{"_index":1666,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["isint",{"_index":1107,"title":{},"body":{"classes/PaginationParams.html":{},"classes/UpdatePostDto.html":{}}}],["isint()@isnotempty()@min(1",{"_index":1657,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["isnotempty",{"_index":580,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/EmailScheduleDto.html":{},"classes/GetCommentsDto.html":{},"classes/RegistrationDto.html":{},"classes/SendMessageDto.html":{},"classes/TwoFactorAuthCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["isnotempty()@isobject",{"_index":1438,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["isnotempty()@isstring",{"_index":1462,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["isnotempty()@minlength(11)@maxlength(14)@isstring",{"_index":1464,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["isnumber",{"_index":1053,"title":{},"body":{"classes/ObjectWithIdDto.html":{}}}],["isnumberstring",{"_index":922,"title":{},"body":{"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["isnumberstring()@isnotempty()@isoptional",{"_index":926,"title":{},"body":{"classes/GetCommentsDto.html":{}}}],["isnumberstring()@isnotempty()@min(1",{"_index":1649,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["isobject",{"_index":695,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/RegistrationDto.html":{}}}],["isoptional",{"_index":696,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetCommentsDto.html":{},"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isint()@min(0",{"_index":1104,"title":{},"body":{"classes/PaginationParams.html":{}}}],["isoptional()@type(undefined)@isint()@min(1",{"_index":1102,"title":{},"body":{"classes/PaginationParams.html":{}}}],["ispasswordmatch",{"_index":365,"title":{},"body":{"injectables/AuthService.html":{}}}],["isphonenumberconfirmed",{"_index":1667,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["isproduction",{"_index":1971,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isrefreshtokenmatching",{"_index":1847,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":581,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegistrationDto.html":{},"classes/SendMessageDto.html":{},"classes/TwoFactorAuthCodeDto.html":{}}}],["isstring()@isnotempty",{"_index":646,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/EmailScheduleDto.html":{},"classes/RegistrationDto.html":{},"classes/TwoFactorAuthCodeDto.html":{},"classes/UpdatePostDto.html":{}}}],["isstring()@isnotempty()@length(6",{"_index":578,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{}}}],["isstring()@isnotempty()@matches(/^\\+[1",{"_index":1444,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["isstring()@isnotempty()@minlength(3",{"_index":650,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["isstring()@isnotempty()@minlength(7",{"_index":1442,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["isstring({each",{"_index":691,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["istwofactorauthenticationcodevalid",{"_index":1624,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["istwofactorauthenticationcodevalid(twofactorauthenticationcode",{"_index":1629,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["istwofactorauthenticationenabled",{"_index":1668,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["item._source",{"_index":1269,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["items",{"_index":1304,"title":{},"body":{"injectables/PostsService.html":{}}}],["job",{"_index":883,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{}}}],["job.id",{"_index":1084,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.iscompleted",{"_index":1090,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["job.start",{"_index":884,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["job.stop",{"_index":886,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["jobid",{"_index":1083,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["joi",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":142,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":138,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":140,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":721,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{},"index.html":{}}}],["join(__dirname",{"_index":731,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["joincolumn",{"_index":1698,"title":{},"body":{"entities/User.html":{}}}],["joincolumn()@onetoone(undefined",{"_index":1670,"title":{},"body":{"entities/User.html":{}}}],["jointable",{"_index":1116,"title":{},"body":{"entities/Post.html":{}}}],["jpeg|jpg|png|jpng",{"_index":1734,"title":{},"body":{"controllers/UsersController.html":{}}}],["jpeg|jpg|png|jpng|txt|pdf|doc|docx",{"_index":1738,"title":{},"body":{"controllers/UsersController.html":{}}}],["js",{"_index":1894,"title":{},"body":{"dependencies.html":{}}}],["jwt",{"_index":987,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"dependencies.html":{}}}],["jwt.guard",{"_index":1227,"title":{},"body":{"classes/PostsResolver.html":{}}}],["jwt.guard.ts",{"_index":949,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{},"coverage.html":{}}}],["jwt.guard.ts:7",{"_index":952,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{}}}],["jwt_access_token_expiration_time",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_access_token_secret",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_expiration_time",{"_index":2072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwt_refresh_token_expiration_time",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_secret",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_verification_token_expiration_time",{"_index":159,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailConfirmationService.html":{}}}],["jwt_verification_token_secret",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["jwtfromrequest",{"_index":991,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["jwtguard",{"_index":217,"title":{"injectables/JwtGuard.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/JwtGuard.html":{},"controllers/PostsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtmodule",{"_index":285,"title":{},"body":{"modules/AuthModule.html":{},"modules/EmailConfirmationModule.html":{}}}],["jwtmodule.registerasync",{"_index":295,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtrefreshguard",{"_index":219,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshstrategy",{"_index":275,"title":{"injectables/JwtRefreshStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtRefreshStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{},"modules/TwoFactorAuthModule.html":{}}}],["jwtstrategy",{"_index":276,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttwofactorguard",{"_index":1005,"title":{"injectables/JwtTwoFactorGuard.html":{}},"body":{"injectables/JwtTwoFactorGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["jwttwofactorstrategy",{"_index":277,"title":{"injectables/JwtTwoFactorStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":2015,"title":{},"body":{"index.html":{}}}],["key",{"_index":1273,"title":{},"body":{"injectables/PostsSearchService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"injectables/PublicFilesService.html":{},"miscellaneous/variables.html":{}}}],["length",{"_index":582,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{}}}],["length(6",{"_index":584,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{}}}],["level.ts",{"_index":1880,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["license",{"_index":2021,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":2001,"title":{},"body":{"index.html":{}}}],["limit",{"_index":1099,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["link",{"_index":750,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["link')@useguards(jwtguard",{"_index":744,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["listenformessages",{"_index":501,"title":{},"body":{"classes/ChatGateway.html":{}}}],["listenformessages(content",{"_index":510,"title":{},"body":{"classes/ChatGateway.html":{}}}],["literal",{"_index":1144,"title":{},"body":{"interfaces/PostSearchResult.html":{},"classes/PostsResolver.html":{},"miscellaneous/typealiases.html":{}}}],["loader",{"_index":1897,"title":{},"body":{"dependencies.html":{}}}],["local",{"_index":1023,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["locale",{"_index":1533,"title":{},"body":{"injectables/SmsService.html":{}}}],["localguard",{"_index":222,"title":{"injectables/LocalGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalGuard.html":{},"coverage.html":{}}}],["localhost",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["localstrategy",{"_index":278,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":1879,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["logger",{"_index":961,"title":{},"body":{"classes/ImageProcessor.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsService.html":{}}}],["logger('http",{"_index":1034,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["logger(imageprocessor.name",{"_index":963,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["logger(postsservice.name",{"_index":1294,"title":{},"body":{"injectables/PostsService.html":{}}}],["logger.filter",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["logger.filter.ts",{"_index":912,"title":{},"body":{"classes/ExceptionLoggerFilter.html":{},"coverage.html":{}}}],["logger.filter.ts:6",{"_index":916,"title":{},"body":{"classes/ExceptionLoggerFilter.html":{}}}],["login",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@req",{"_index":248,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(request",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["loglevel",{"_index":1972,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logout",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@req",{"_index":266,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(request",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["logsmiddleware",{"_index":1026,"title":{"injectables/LogsMiddleware.html":{}},"body":{"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["lorem",{"_index":2048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mail",{"_index":896,"title":{},"body":{"injectables/EmailService.html":{}}}],["mailermodule",{"_index":110,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["mailermodule.forroot",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["mailerservice",{"_index":891,"title":{},"body":{"injectables/EmailService.html":{}}}],["manager",{"_index":1206,"title":{},"body":{"modules/PostsModule.html":{},"dependencies.html":{}}}],["manytomany",{"_index":485,"title":{},"body":{"entities/Category.html":{},"entities/Post.html":{}}}],["manytomany(undefined",{"_index":480,"title":{},"body":{"entities/Category.html":{}}}],["manytoone",{"_index":598,"title":{},"body":{"entities/Comment.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{}}}],["manytoone(undefined",{"_index":592,"title":{},"body":{"entities/Comment.html":{},"entities/Message.html":{},"entities/PrivateFile.html":{}}}],["markemailasconfirmed",{"_index":1763,"title":{},"body":{"injectables/UsersService.html":{}}}],["markemailasconfirmed(email",{"_index":1796,"title":{},"body":{"injectables/UsersService.html":{}}}],["markphonenumberasconfirmed",{"_index":1764,"title":{},"body":{"injectables/UsersService.html":{}}}],["markphonenumberasconfirmed(id",{"_index":1798,"title":{},"body":{"injectables/UsersService.html":{}}}],["match",{"_index":1276,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["matches",{"_index":1447,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["matches(/^\\+[1",{"_index":1449,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["matching",{"_index":39,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"modules/SearchModule.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":375,"title":{},"body":{"injectables/AuthService.html":{}}}],["maxfilesizevalidator",{"_index":1722,"title":{},"body":{"controllers/UsersController.html":{}}}],["maxlength",{"_index":1466,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["maxlength(14",{"_index":1468,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["maxsize",{"_index":1731,"title":{},"body":{"controllers/UsersController.html":{}}}],["message",{"_index":530,"title":{"entities/Message.html":{}},"body":{"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"entities/User.html":{},"coverage.html":{}}}],["message.author",{"_index":1688,"title":{},"body":{"entities/User.html":{}}}],["message.dto",{"_index":1488,"title":{},"body":{"controllers/SmsController.html":{}}}],["message.dto.ts",{"_index":1460,"title":{},"body":{"classes/SendMessageDto.html":{},"coverage.html":{}}}],["message.dto.ts:12",{"_index":1463,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["message.dto.ts:8",{"_index":1465,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["messagebody",{"_index":517,"title":{},"body":{"classes/ChatGateway.html":{},"controllers/SmsController.html":{}}}],["messagebody.message",{"_index":1502,"title":{},"body":{"controllers/SmsController.html":{}}}],["messagebody.receiverphonenumber",{"_index":1501,"title":{},"body":{"controllers/SmsController.html":{}}}],["messages",{"_index":534,"title":{},"body":{"classes/ChatGateway.html":{},"entities/User.html":{}}}],["messagesrepository",{"_index":551,"title":{},"body":{"injectables/ChatService.html":{}}}],["metadata",{"_index":1950,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":1038,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["methods",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/GetCommentsHandler.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":1108,"title":{},"body":{"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["min(0",{"_index":1110,"title":{},"body":{"classes/PaginationParams.html":{}}}],["min(1",{"_index":1109,"title":{},"body":{"classes/PaginationParams.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{}}}],["minlength",{"_index":652,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/RegistrationDto.html":{},"classes/SendMessageDto.html":{}}}],["minlength(11",{"_index":1467,"title":{},"body":{"classes/SendMessageDto.html":{}}}],["minlength(3",{"_index":653,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["minlength(7",{"_index":1448,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["miscellaneous",{"_index":1958,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":2000,"title":{},"body":{"index.html":{}}}],["mockedconfigservice",{"_index":1883,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mockedjwtservice",{"_index":1885,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":1989,"title":{},"body":{"index.html":{}}}],["models/post.model",{"_index":1229,"title":{},"body":{"classes/PostsResolver.html":{}}}],["module",{"_index":40,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/SubscribersModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/SubscribersModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":42,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"modules/SubscribersModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["modules/mailer",{"_index":112,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"dependencies.html":{}}}],["molestias",{"_index":2064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["more",{"_index":2011,"title":{},"body":{"index.html":{}}}],["morethan",{"_index":1296,"title":{},"body":{"injectables/PostsService.html":{}}}],["morethan(startid",{"_index":1302,"title":{},"body":{"injectables/PostsService.html":{}}}],["msg",{"_index":1081,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["multi_match",{"_index":1265,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["mutation",{"_index":1225,"title":{},"body":{"classes/PostsResolver.html":{}}}],["mutation(undefined",{"_index":1218,"title":{},"body":{"classes/PostsResolver.html":{}}}],["myapp",{"_index":1858,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["myapp(__namedparameters",{"_index":1976,"title":{},"body":{"miscellaneous/functions.html":{}}}],["myśliwiec",{"_index":2016,"title":{},"body":{"index.html":{}}}],["nam",{"_index":2061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["necessitatibus",{"_index":2062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nest",{"_index":1999,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":2020,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":111,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"dependencies.html":{}}}],["nestjs/apollo",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/bull",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"classes/ImageProcessor.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/GetCommentsHandler.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"modules/SearchModule.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"modules/SearchModule.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"modules/SubscribersModule.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"classes/ExceptionLoggerFilter.html":{},"dependencies.html":{}}}],["nestjs/cqrs",{"_index":613,"title":{},"body":{"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"dependencies.html":{}}}],["nestjs/elasticsearch",{"_index":1253,"title":{},"body":{"injectables/PostsSearchService.html":{},"modules/SearchModule.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostInput.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/PostsResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":286,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/TwoFactorAuthModule.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1652,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"dependencies.html":{}}}],["nestjs/microservices",{"_index":1553,"title":{},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":283,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GraphqlJwtGuard.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1072,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1911,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":444,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"modules/CommentsModule.html":{},"classes/CreateCommentHandler.html":{},"modules/DatabaseModule.html":{},"classes/GetCommentsHandler.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":523,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":1036,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["new",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"classes/GetCommentsHandler.html":{},"classes/ImageProcessor.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newbody",{"_index":1270,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["newcategory",{"_index":469,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["newfile",{"_index":1386,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["newmessage",{"_index":569,"title":{},"body":{"injectables/ChatService.html":{}}}],["newpost",{"_index":682,"title":{},"body":{"classes/CreateCommentHandler.html":{},"injectables/PostsService.html":{}}}],["newuser",{"_index":1815,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":1031,"title":{},"body":{"injectables/LogsMiddleware.html":{},"miscellaneous/variables.html":{}}}],["nextapirequest",{"_index":1974,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nextapiresponse",{"_index":1975,"title":{},"body":{"miscellaneous/functions.html":{}}}],["nextfunction",{"_index":1032,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["nextpage",{"_index":2046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["node",{"_index":1454,"title":{},"body":{"modules/SearchModule.html":{}}}],["nodemailer",{"_index":898,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":899,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":888,"title":{},"body":{"injectables/EmailService.html":{}}}],["notfoundexception",{"_index":490,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"classes/GetCommentsHandler.html":{},"classes/PostNotFoundException.html":{},"injectables/PrivateFilesService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('file",{"_index":1397,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["notfoundexception('user",{"_index":1845,"title":{},"body":{"injectables/UsersService.html":{}}}],["npm",{"_index":1983,"title":{},"body":{"index.html":{}}}],["null",{"_index":1829,"title":{},"body":{"injectables/UsersService.html":{}}}],["nullable",{"_index":1674,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":23,"title":{},"body":{"entities/Address.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"entities/Comment.html":{},"injectables/EmailConfirmationService.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"injectables/PublicFilesService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["number(id",{"_index":1743,"title":{},"body":{"controllers/UsersController.html":{}}}],["object",{"_index":824,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"miscellaneous/variables.html":{}}}],["object.entries(newbody).reduce((result",{"_index":1272,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["objectwithiddto",{"_index":663,"title":{"classes/ObjectWithIdDto.html":{}},"body":{"classes/CreateCommentDto.html":{},"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["offset",{"_index":1100,"title":{},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["on')@httpcode(200",{"_index":1598,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["one.params",{"_index":417,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["one.params.ts",{"_index":921,"title":{},"body":{"classes/FindOneParams.html":{},"coverage.html":{}}}],["one.params.ts:5",{"_index":923,"title":{},"body":{"classes/FindOneParams.html":{}}}],["onetomany",{"_index":1126,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["onetomany(undefined",{"_index":1118,"title":{},"body":{"entities/Post.html":{},"entities/User.html":{}}}],["onetoone",{"_index":32,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":28,"title":{},"body":{"entities/Address.html":{}}}],["ongatewayconnection",{"_index":499,"title":{},"body":{"classes/ChatGateway.html":{}}}],["ongatewaydisconnect",{"_index":518,"title":{},"body":{"classes/ChatGateway.html":{}}}],["ongatewayinit",{"_index":519,"title":{},"body":{"classes/ChatGateway.html":{}}}],["open",{"_index":2002,"title":{},"body":{"index.html":{}}}],["optimize",{"_index":1057,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["optimize.controller",{"_index":1093,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["optimize.processor",{"_index":1094,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["optimize/optimize.module",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["optimizecontroller",{"_index":1055,"title":{"controllers/OptimizeController.html":{}},"body":{"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"coverage.html":{}}}],["optimizemodule",{"_index":54,"title":{"modules/OptimizeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/OptimizeModule.html":{},"modules.html":{},"overview.html":{}}}],["optional",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":895,"title":{},"body":{"injectables/EmailService.html":{},"modules/SubscribersModule.html":{}}}],["order",{"_index":1307,"title":{},"body":{"injectables/PostsService.html":{}}}],["origin",{"_index":527,"title":{},"body":{"classes/ChatGateway.html":{}}}],["originalurl",{"_index":1039,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["otpauthurl",{"_index":1604,"title":{},"body":{"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{}}}],["otplib",{"_index":1635,"title":{},"body":{"injectables/TwoFactorAuthService.html":{},"dependencies.html":{}}}],["out",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SmsModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":2027,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":1340,"title":{},"body":{"entities/PrivateFile.html":{},"injectables/PrivateFilesService.html":{}}}],["owner.files",{"_index":1343,"title":{},"body":{"entities/PrivateFile.html":{}}}],["ownerid",{"_index":1374,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["package",{"_index":1888,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pageprops",{"_index":1979,"title":{},"body":{"miscellaneous/functions.html":{}}}],["paginationparams",{"_index":1097,"title":{"classes/PaginationParams.html":{}},"body":{"classes/PaginationParams.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["paragraph",{"_index":1163,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["paragraphs",{"_index":690,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{},"classes/UpdatePostDto.html":{}}}],["param",{"_index":411,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":1086,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["parameters",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentHandler.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"classes/PostNotFoundException.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":559,"title":{},"body":{"injectables/ChatService.html":{}}}],["parse(cookie",{"_index":566,"title":{},"body":{"injectables/ChatService.html":{}}}],["parsefilepipe",{"_index":1723,"title":{},"body":{"controllers/UsersController.html":{}}}],["parser",{"_index":1933,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1651,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createcategorydto",{"_index":1655,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["pass",{"_index":905,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":986,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":282,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":988,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1003,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":996,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["password",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"classes/RegistrationDto.html":{},"modules/SearchModule.html":{},"modules/SubscribersModule.html":{},"entities/User.html":{}}}],["path",{"_index":374,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/EmailConfirmationService.html":{}}}],["payload",{"_index":367,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.email",{"_index":825,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["payload.id",{"_index":383,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["payload.interface",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["payload.interface.ts",{"_index":1579,"title":{},"body":{"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["payload.is2faunthenticated",{"_index":1014,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["people",{"_index":2068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pg",{"_index":1946,"title":{},"body":{"dependencies.html":{}}}],["phonenumber",{"_index":1437,"title":{},"body":{"classes/RegistrationDto.html":{},"injectables/SmsService.html":{},"entities/User.html":{}}}],["pipeqrcodestream",{"_index":1625,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["pipeqrcodestream(stream",{"_index":1632,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["playground",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["please",{"_index":1613,"title":{},"body":{"controllers/TwoFactorAuthController.html":{},"index.html":{}}}],["plugins",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["pngquant",{"_index":1940,"title":{},"body":{"dependencies.html":{}}}],["port",{"_index":125,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/EmailService.html":{},"modules/PostsModule.html":{}}}],["post",{"_index":210,"title":{"entities/Post.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentDto.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"classes/GetCommentsHandler.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["post('authenticate",{"_index":1611,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["post('authenticate')@httpcode(200",{"_index":1591,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["post('avatar",{"_index":1728,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('avatar')@useinterceptors(undefined",{"_index":1710,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('check",{"_index":1477,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('files",{"_index":1739,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('files')@useinterceptors(undefined",{"_index":1713,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('generate",{"_index":1594,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["post('image",{"_index":1077,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('image')@useinterceptors(undefined",{"_index":1065,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["post('initiate",{"_index":1480,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('login",{"_index":247,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('resend",{"_index":743,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["post('schedule",{"_index":851,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('send",{"_index":1483,"title":{},"body":{"controllers/SmsController.html":{}}}],["post('turn",{"_index":1597,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["post()@httpcode(201",{"_index":395,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["post()@httpcode(201)@useguards(emailconfirmationguard)@useguards(jwttwofactorguard",{"_index":1155,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.author",{"_index":1694,"title":{},"body":{"entities/User.html":{}}}],["post.author.id",{"_index":1262,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.categories",{"_index":481,"title":{},"body":{"entities/Category.html":{},"injectables/PostsService.html":{}}}],["post.comments",{"_index":593,"title":{},"body":{"entities/Comment.html":{}}}],["post.dto",{"_index":1662,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.dto.ts",{"_index":689,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["post.dto.ts:10",{"_index":694,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:6",{"_index":693,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:8",{"_index":1658,"title":{},"body":{"classes/UpdatePostDto.html":{}}}],["post.id",{"_index":1259,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.paragraphs",{"_index":1261,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["post.resolver",{"_index":1209,"title":{},"body":{"modules/PostsModule.html":{}}}],["post.title",{"_index":1260,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["postgres",{"_index":723,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres_db",{"_index":145,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":139,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":144,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":141,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["postgreserrorcode",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcode.uniqueviolation",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{}}}],["postid",{"_index":629,"title":{},"body":{"controllers/CommentsController.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/PostNotFoundException.html":{},"injectables/PostsSearchService.html":{}}}],["postnotfoundexception",{"_index":1132,"title":{"classes/PostNotFoundException.html":{}},"body":{"classes/PostNotFoundException.html":{},"injectables/PostsService.html":{},"coverage.html":{}}}],["postnotfoundexception(id",{"_index":1315,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":466,"title":{},"body":{"injectables/CategoriesService.html":{},"entities/Category.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"entities/User.html":{}}}],["posts.controller",{"_index":1200,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts.items",{"_index":1231,"title":{},"body":{"classes/PostsResolver.html":{}}}],["posts.service",{"_index":1174,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{}}}],["posts/entity/post.entity",{"_index":484,"title":{},"body":{"entities/Category.html":{},"entities/User.html":{}}}],["posts/posts.module",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":1147,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsearchbody",{"_index":1135,"title":{"interfaces/PostSearchBody.html":{}},"body":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["postsearchresult",{"_index":1141,"title":{"interfaces/PostSearchResult.html":{}},"body":{"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["postsmodule",{"_index":55,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsrepository",{"_index":1283,"title":{},"body":{"injectables/PostsService.html":{}}}],["postsresolver",{"_index":1208,"title":{"classes/PostsResolver.html":{}},"body":{"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["postssearchservice",{"_index":1197,"title":{"injectables/PostsSearchService.html":{}},"body":{"modules/PostsModule.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["postsservice",{"_index":1173,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["prefix",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":24,"title":{},"body":{"entities/Address.html":{},"entities/Category.html":{},"entities/Comment.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"entities/User.html":{}}}],["private",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/GetCommentsHandler.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"injectables/PostsService.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{}}}],["private/${id",{"_index":1385,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["privatefile",{"_index":1336,"title":{"entities/PrivateFile.html":{}},"body":{"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["privatefile.owner",{"_index":1681,"title":{},"body":{"entities/User.html":{}}}],["privatefilesmodule",{"_index":56,"title":{"modules/PrivateFilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PrivateFilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["privatefilesrepository",{"_index":1361,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["privatefilesservice",{"_index":1348,"title":{"injectables/PrivateFilesService.html":{}},"body":{"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["process",{"_index":969,"title":{},"body":{"classes/ImageProcessor.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["process('optimize",{"_index":966,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["processimage",{"_index":1059,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(@uploadedfiles",{"_index":1079,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processimage(files",{"_index":1063,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["processor",{"_index":968,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["processor('image",{"_index":971,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["production",{"_index":1991,"title":{},"body":{"index.html":{}}}],["profile",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile(@req",{"_index":238,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile(request",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":2003,"title":{},"body":{"index.html":{}}}],["promise",{"_index":1022,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["promise.all",{"_index":1842,"title":{},"body":{"injectables/UsersService.html":{}}}],["properties",{"_index":8,"title":{"properties.html":{}},"body":{"entities/Address.html":{},"entities/Category.html":{},"classes/ChatGateway.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailService.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsQuery.html":{},"classes/ImageProcessor.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"classes/SendMessageDto.html":{},"injectables/SmsService.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"interfaces/VerificationTokenPayload.html":{},"properties.html":{}}}],["provide",{"_index":169,"title":{},"body":{"modules/AppModule.html":{},"modules/SubscribersModule.html":{}}}],["provided",{"_index":364,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/SmsService.html":{}}}],["providers",{"_index":168,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/OptimizeModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SmsModule.html":{},"modules/SubscribersModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":9,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"entities/Category.html":{},"entities/Comment.html":{},"classes/CreateCommentCommand.html":{},"classes/GetCommentsQuery.html":{},"entities/Message.html":{},"entities/Post.html":{},"entities/PrivateFile.html":{},"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"entities/User.html":{}}}],["publicfile",{"_index":1399,"title":{"entities/PublicFile.html":{}},"body":{"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"entities/User.html":{},"coverage.html":{}}}],["publicfilesmodule",{"_index":57,"title":{"modules/PublicFilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PublicFilesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["publicfilesrepository",{"_index":1415,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["publicfilesservice",{"_index":1408,"title":{"injectables/PublicFilesService.html":{}},"body":{"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["put",{"_index":413,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["put(':id",{"_index":433,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["put(':id')@httpcode(200",{"_index":409,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["qrcode",{"_index":1637,"title":{},"body":{"injectables/TwoFactorAuthService.html":{},"dependencies.html":{}}}],["queries/handlers/get",{"_index":640,"title":{},"body":{"modules/CommentsModule.html":{}}}],["queries/implementation/get",{"_index":622,"title":{},"body":{"controllers/CommentsController.html":{}}}],["query",{"_index":610,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"classes/GetCommentsHandler.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{}}}],["query('paragraph",{"_index":1177,"title":{},"body":{"controllers/PostsController.html":{}}}],["query(undefined",{"_index":1220,"title":{},"body":{"classes/PostsResolver.html":{}}}],["query.postid",{"_index":937,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["querybus",{"_index":612,"title":{},"body":{"controllers/CommentsController.html":{}}}],["queryhandler",{"_index":934,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryhandler(getcommentsquery",{"_index":936,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["queryrunner",{"_index":1419,"title":{},"body":{"injectables/PublicFilesService.html":{},"injectables/UsersService.html":{}}}],["queryrunner.committransaction",{"_index":1831,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.connect",{"_index":1826,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.manager.delete(publicfile",{"_index":1435,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["queryrunner.manager.findone(publicfile",{"_index":1434,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["queryrunner.manager.update(user",{"_index":1828,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.release",{"_index":1834,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.rollbacktransaction",{"_index":1832,"title":{},"body":{"injectables/UsersService.html":{}}}],["queryrunner.starttransaction",{"_index":1827,"title":{},"body":{"injectables/UsersService.html":{}}}],["queue",{"_index":1073,"title":{},"body":{"controllers/OptimizeController.html":{},"modules/SubscribersModule.html":{}}}],["queuename",{"_index":1570,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["queueoptions",{"_index":1576,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["quia",{"_index":2067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["quibusdam",{"_index":2066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["read",{"_index":1424,"title":{},"body":{"injectables/PublicFilesService.html":{},"index.html":{}}}],["readonly",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CreateCommentCommand.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/GetCommentsQuery.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["receiverphonenumber",{"_index":1461,"title":{},"body":{"classes/SendMessageDto.html":{},"injectables/SmsService.html":{}}}],["recipient",{"_index":840,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["redis",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"dependencies.html":{}}}],["redis_host",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["redisstore",{"_index":1204,"title":{},"body":{"modules/PostsModule.html":{}}}],["reflect",{"_index":1949,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{}}}],["refresh(@req",{"_index":263,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh(request",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh.guard",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{}}}],["refresh.guard.ts",{"_index":976,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh.strategy",{"_index":289,"title":{},"body":{"modules/AuthModule.html":{}}}],["refresh.strategy.ts",{"_index":978,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"coverage.html":{}}}],["refresh.strategy.ts:13",{"_index":981,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refresh.strategy.ts:29",{"_index":983,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["refresh=${refreshtoken",{"_index":379,"title":{},"body":{"injectables/AuthService.html":{}}}],["refreshtoken",{"_index":254,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":253,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TwoFactorAuthController.html":{}}}],["register(@res",{"_index":1603,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["register(registrationdata",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(response",{"_index":1593,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["registrationdata",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registrationdata.address",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{}}}],["registrationdto",{"_index":203,"title":{"classes/RegistrationDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegistrationDto.html":{},"coverage.html":{}}}],["relation",{"_index":27,"title":{},"body":{"entities/Address.html":{},"entities/User.html":{}}}],["relations",{"_index":465,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/UsersService.html":{}}}],["rem",{"_index":2057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":1240,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["remove(postid",{"_index":1247,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["removerefreshtoken",{"_index":1765,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(userid",{"_index":1800,"title":{},"body":{"injectables/UsersService.html":{}}}],["replacements",{"_index":811,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["repository",{"_index":449,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/UsersService.html":{}}}],["reprehenderit",{"_index":2058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/SmsController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["req.user",{"_index":625,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/PostsController.html":{}}}],["request",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LogsMiddleware.html":{},"interfaces/RequestUser.html":{},"controllers/SmsController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["request.cookies?.refresh",{"_index":997,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["request.res.setheader('set",{"_index":258,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["request.user",{"_index":240,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TwoFactorAuthController.html":{}}}],["request.user.id",{"_index":1498,"title":{},"body":{"controllers/SmsController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["request.user.isphonenumberconfirmed",{"_index":1493,"title":{},"body":{"controllers/SmsController.html":{}}}],["request.user.istwofactorauthenticationenabled",{"_index":1612,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["request.user.phonenumber",{"_index":1496,"title":{},"body":{"controllers/SmsController.html":{}}}],["request.user?.isemailconfirmed",{"_index":766,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["request?.cookies?.authentication",{"_index":1004,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":993,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["requestallmessages",{"_index":502,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestallmessages(@connectedsocket",{"_index":533,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestallmessages(socket",{"_index":514,"title":{},"body":{"classes/ChatGateway.html":{}}}],["requestuser",{"_index":184,"title":{"interfaces/RequestUser.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"interfaces/RequestUser.html":{},"controllers/SmsController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["required",{"_index":1012,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["res",{"_index":1069,"title":{},"body":{"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{},"miscellaneous/functions.html":{}}}],["resendconfirmationlink",{"_index":738,"title":{},"body":{"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{}}}],["resendconfirmationlink(@req",{"_index":751,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["resendconfirmationlink(id",{"_index":788,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["resendconfirmationlink(request",{"_index":742,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["reset",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SmsModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolver",{"_index":1226,"title":{},"body":{"classes/PostsResolver.html":{}}}],["response",{"_index":1030,"title":{},"body":{"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{}}}],["response.on('finish",{"_index":1037,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["response.sendstatus(202",{"_index":1091,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["response.sendstatus(404",{"_index":1088,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["result",{"_index":1263,"title":{},"body":{"injectables/PostsSearchService.html":{},"injectables/SmsService.html":{}}}],["result.hits.hits",{"_index":1267,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["result.id",{"_index":1326,"title":{},"body":{"injectables/PostsService.html":{}}}],["result.interface",{"_index":1255,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["result.interface.ts",{"_index":1142,"title":{},"body":{"interfaces/PostSearchResult.html":{},"coverage.html":{}}}],["result.status",{"_index":1537,"title":{},"body":{"injectables/SmsService.html":{}}}],["result.valid",{"_index":1536,"title":{},"body":{"injectables/SmsService.html":{}}}],["results",{"_index":38,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"modules/SearchModule.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.map((result",{"_index":1325,"title":{},"body":{"injectables/PostsService.html":{}}}],["return",{"_index":239,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"classes/GetCommentsHandler.html":{},"injectables/GraphqlJwtGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/GetCommentsHandler.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/functions.html":{}}}],["rimraf",{"_index":1952,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":1986,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1954,"title":{},"body":{"dependencies.html":{}}}],["s3",{"_index":1375,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["s3.getsignedurlpromise('getobject",{"_index":1398,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["savemessage",{"_index":549,"title":{},"body":{"injectables/ChatService.html":{}}}],["savemessage(content",{"_index":557,"title":{},"body":{"injectables/ChatService.html":{}}}],["schedule.dto",{"_index":855,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedule.dto.ts",{"_index":838,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["schedule.dto.ts:10",{"_index":845,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:14",{"_index":841,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:17",{"_index":843,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:6",{"_index":844,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["scheduleemail",{"_index":849,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":858,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":850,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulemodule",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":867,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling",{"_index":848,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduling.controller",{"_index":864,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["scheduling.controller.ts",{"_index":847,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["scheduling.controller.ts:14",{"_index":852,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduling.module",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["scheduling.module.ts",{"_index":863,"title":{},"body":{"modules/EmailSchedulingModule.html":{}}}],["scheduling.service",{"_index":857,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{}}}],["scheduling.service.ts",{"_index":865,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["scheduling.service.ts:14",{"_index":871,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:37",{"_index":869,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling.service.ts:8",{"_index":868,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduling/dto/email",{"_index":837,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["scheduling/email",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["script",{"_index":1271,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["sdk",{"_index":1377,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"dependencies.html":{}}}],["search",{"_index":1138,"title":{},"body":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["search(text",{"_index":1249,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service",{"_index":1203,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["search.service.ts",{"_index":1238,"title":{},"body":{"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["search.service.ts:13",{"_index":1246,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:25",{"_index":1250,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:41",{"_index":1252,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:68",{"_index":1248,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search.service.ts:9",{"_index":1244,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["search/search.module",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["searchforposts",{"_index":1280,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchforposts(text",{"_index":1291,"title":{},"body":{"injectables/PostsService.html":{}}}],["searchmodule",{"_index":58,"title":{"modules/SearchModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/SearchModule.html":{},"modules.html":{},"overview.html":{}}}],["secret",{"_index":296,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{}}}],["secretorkey",{"_index":994,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["secure",{"_index":128,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{}}}],["select",{"_index":1331,"title":{},"body":{"injectables/PostsService.html":{}}}],["senderphonenumber",{"_index":1541,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendmail",{"_index":889,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":893,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmessage",{"_index":1474,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["sendmessage(receiverphonenumber",{"_index":1519,"title":{},"body":{"injectables/SmsService.html":{}}}],["sendmessage(request",{"_index":1482,"title":{},"body":{"controllers/SmsController.html":{}}}],["sendmessagedto",{"_index":1458,"title":{"classes/SendMessageDto.html":{}},"body":{"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"coverage.html":{}}}],["sendverificationlink",{"_index":780,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["sendverificationlink(email",{"_index":790,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["seperatecount",{"_index":1300,"title":{},"body":{"injectables/PostsService.html":{}}}],["server",{"_index":103,"title":{},"body":{"modules/AppModule.html":{},"classes/ChatGateway.html":{},"dependencies.html":{}}}],["service",{"_index":901,"title":{},"body":{"injectables/EmailService.html":{}}}],["services(servicesid",{"_index":1530,"title":{},"body":{"injectables/SmsService.html":{}}}],["servicesid",{"_index":1528,"title":{},"body":{"injectables/SmsService.html":{}}}],["setcurrentrefreshtoken",{"_index":1766,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":1802,"title":{},"body":{"injectables/UsersService.html":{}}}],["settwofactorauthenticationsecret",{"_index":1767,"title":{},"body":{"injectables/UsersService.html":{}}}],["settwofactorauthenticationsecret(secret",{"_index":1804,"title":{},"body":{"injectables/UsersService.html":{}}}],["sign",{"_index":2074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signoptions",{"_index":298,"title":{},"body":{"modules/AuthModule.html":{}}}],["sit",{"_index":2051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["skip",{"_index":1309,"title":{},"body":{"injectables/PostsService.html":{}}}],["sms",{"_index":1471,"title":{},"body":{"controllers/SmsController.html":{},"injectables/SmsService.html":{}}}],["sms.controller",{"_index":1508,"title":{},"body":{"modules/SmsModule.html":{}}}],["sms.service",{"_index":1490,"title":{},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{}}}],["sms/sms.module",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["smscontroller",{"_index":1469,"title":{"controllers/SmsController.html":{}},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{},"coverage.html":{}}}],["smsmodule",{"_index":59,"title":{"modules/SmsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SmsModule.html":{},"modules.html":{},"overview.html":{}}}],["smsservice",{"_index":1489,"title":{"injectables/SmsService.html":{}},"body":{"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"coverage.html":{},"overview.html":{}}}],["socket",{"_index":508,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{}}}],["socket.handshake.headers.cookie",{"_index":564,"title":{},"body":{"injectables/ChatService.html":{}}}],["socket.io",{"_index":524,"title":{},"body":{"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"dependencies.html":{}}}],["something",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["soneye",{"_index":2038,"title":{},"body":{"properties.html":{}}}],["source",{"_index":4,"title":{},"body":{"entities/Address.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"modules/ChatModule.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"modules/CommentsModule.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"modules/OptimizeModule.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"modules/SearchModule.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"modules/SmsModule.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"index.html":{}}}],["sponsors",{"_index":2006,"title":{},"body":{"index.html":{}}}],["src/.../config.service.ts",{"_index":2044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":1967,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../jwt.service.ts",{"_index":2045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1966,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgres",{"_index":1960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":205,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:52",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:71",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:82",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":542,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/auth/auth.module.ts",{"_index":279,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service",{"_index":561,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/auth/auth.service.ts",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:11",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:18",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:54",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:64",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:74",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:89",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:96",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/registration.dto.ts",{"_index":1436,"title":{},"body":{"classes/RegistrationDto.html":{},"coverage.html":{}}}],["src/auth/dto/registration.dto.ts:26",{"_index":1440,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["src/auth/dto/registration.dto.ts:30",{"_index":1441,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["src/auth/dto/registration.dto.ts:35",{"_index":1443,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["src/auth/dto/registration.dto.ts:40",{"_index":1446,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["src/auth/dto/registration.dto.ts:44",{"_index":1439,"title":{},"body":{"classes/RegistrationDto.html":{}}}],["src/auth/guard/graphql",{"_index":948,"title":{},"body":{"injectables/GraphqlJwtGuard.html":{},"classes/PostsResolver.html":{},"coverage.html":{}}}],["src/auth/guard/jwt",{"_index":975,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"injectables/JwtTwoFactorGuard.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["src/auth/guard/jwt.guard",{"_index":414,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/UsersController.html":{}}}],["src/auth/guard/jwt.guard.ts",{"_index":974,"title":{},"body":{"injectables/JwtGuard.html":{},"coverage.html":{}}}],["src/auth/guard/local.guard.ts",{"_index":1015,"title":{},"body":{"injectables/LocalGuard.html":{},"coverage.html":{}}}],["src/auth/interface/request",{"_index":614,"title":{},"body":{"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"interfaces/RequestUser.html":{},"controllers/SmsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/interface/token",{"_index":1578,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt",{"_index":977,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts",{"_index":999,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts:10",{"_index":1000,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:25",{"_index":1002,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts",{"_index":1017,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/local.strategy.ts:15",{"_index":1021,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts:8",{"_index":1019,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/two",{"_index":1581,"title":{},"body":{"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts",{"_index":386,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts:28",{"_index":403,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:34",{"_index":406,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:40",{"_index":396,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:46",{"_index":410,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:52",{"_index":401,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.module.ts",{"_index":441,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/categories.service.ts",{"_index":447,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/categories/categories.service.ts:10",{"_index":450,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:16",{"_index":455,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:22",{"_index":457,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:33",{"_index":452,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:41",{"_index":458,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:52",{"_index":454,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/dto/create",{"_index":648,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/update",{"_index":1648,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/entity/category.entity.ts",{"_index":477,"title":{},"body":{"entities/Category.html":{},"coverage.html":{}}}],["src/categories/entity/category.entity.ts:10",{"_index":483,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entity/category.entity.ts:13",{"_index":482,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/entity/category.entity.ts:7",{"_index":479,"title":{},"body":{"entities/Category.html":{}}}],["src/categories/exception/category",{"_index":487,"title":{},"body":{"classes/CategoryNotFoundException.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts",{"_index":497,"title":{},"body":{"classes/ChatGateway.html":{},"coverage.html":{}}}],["src/chat/chat.gateway.ts:21",{"_index":505,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:25",{"_index":509,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:30",{"_index":512,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.gateway.ts:43",{"_index":516,"title":{},"body":{"classes/ChatGateway.html":{}}}],["src/chat/chat.module.ts",{"_index":541,"title":{},"body":{"modules/ChatModule.html":{}}}],["src/chat/chat.service.ts",{"_index":546,"title":{},"body":{"injectables/ChatService.html":{},"coverage.html":{}}}],["src/chat/chat.service.ts:12",{"_index":552,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:19",{"_index":556,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:32",{"_index":558,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/chat.service.ts:41",{"_index":554,"title":{},"body":{"injectables/ChatService.html":{}}}],["src/chat/entity/message.entity",{"_index":1700,"title":{},"body":{"entities/User.html":{}}}],["src/chat/entity/message.entity.ts",{"_index":1047,"title":{},"body":{"entities/Message.html":{},"coverage.html":{}}}],["src/chat/entity/message.entity.ts:10",{"_index":1050,"title":{},"body":{"entities/Message.html":{}}}],["src/chat/entity/message.entity.ts:13",{"_index":1049,"title":{},"body":{"entities/Message.html":{}}}],["src/chat/entity/message.entity.ts:7",{"_index":1051,"title":{},"body":{"entities/Message.html":{}}}],["src/comments/commands/handlers/create",{"_index":668,"title":{},"body":{"classes/CreateCommentHandler.html":{},"coverage.html":{}}}],["src/comments/commands/implementation/create",{"_index":654,"title":{},"body":{"classes/CreateCommentCommand.html":{},"coverage.html":{}}}],["src/comments/comments.controller.ts",{"_index":600,"title":{},"body":{"controllers/CommentsController.html":{},"coverage.html":{}}}],["src/comments/comments.controller.ts:24",{"_index":606,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.controller.ts:33",{"_index":609,"title":{},"body":{"controllers/CommentsController.html":{}}}],["src/comments/comments.module.ts",{"_index":632,"title":{},"body":{"modules/CommentsModule.html":{}}}],["src/comments/dto/create",{"_index":660,"title":{},"body":{"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"coverage.html":{}}}],["src/comments/dto/get",{"_index":924,"title":{},"body":{"classes/GetCommentsDto.html":{},"coverage.html":{}}}],["src/comments/entity/comment.entity.ts",{"_index":586,"title":{},"body":{"entities/Comment.html":{},"coverage.html":{}}}],["src/comments/entity/comment.entity.ts:12",{"_index":590,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entity/comment.entity.ts:15",{"_index":594,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entity/comment.entity.ts:19",{"_index":589,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/entity/comment.entity.ts:9",{"_index":591,"title":{},"body":{"entities/Comment.html":{}}}],["src/comments/queries/handlers/get",{"_index":928,"title":{},"body":{"classes/GetCommentsHandler.html":{},"coverage.html":{}}}],["src/comments/queries/implementation/get",{"_index":940,"title":{},"body":{"classes/GetCommentsQuery.html":{},"coverage.html":{}}}],["src/constants/postgres",{"_index":1962,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/database/database.module.ts",{"_index":720,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/email",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"modules/EmailConfirmationModule.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"modules/EmailSchedulingModule.html":{},"injectables/EmailSchedulingService.html":{},"controllers/PostsController.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["src/email/email.module",{"_index":775,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/UsersModule.html":{}}}],["src/email/email.module.ts",{"_index":834,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service",{"_index":793,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/UsersService.html":{}}}],["src/email/email.service.ts",{"_index":887,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:26",{"_index":894,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:9",{"_index":892,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/main.ts",{"_index":1872,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middlewares/logs.middleware.ts",{"_index":1027,"title":{},"body":{"injectables/LogsMiddleware.html":{},"coverage.html":{}}}],["src/middlewares/logs.middleware.ts:6",{"_index":1035,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/middlewares/logs.middleware.ts:8",{"_index":1033,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["src/optimize/optimize.controller.ts",{"_index":1056,"title":{},"body":{"controllers/OptimizeController.html":{},"coverage.html":{}}}],["src/optimize/optimize.controller.ts:21",{"_index":1066,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.controller.ts:33",{"_index":1062,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["src/optimize/optimize.module.ts",{"_index":1092,"title":{},"body":{"modules/OptimizeModule.html":{}}}],["src/optimize/optimize.processor.ts",{"_index":960,"title":{},"body":{"classes/ImageProcessor.html":{},"coverage.html":{}}}],["src/optimize/optimize.processor.ts:10",{"_index":967,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["src/optimize/optimize.processor.ts:7",{"_index":964,"title":{},"body":{"classes/ImageProcessor.html":{}}}],["src/posts/dto/create",{"_index":688,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/posts/dto/update",{"_index":1656,"title":{},"body":{"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity",{"_index":597,"title":{},"body":{"entities/Comment.html":{}}}],["src/posts/entity/post.entity.ts",{"_index":1111,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/entity/post.entity.ts:19",{"_index":1121,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:22",{"_index":1125,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:26",{"_index":1124,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:31",{"_index":1113,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:36",{"_index":1117,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/entity/post.entity.ts:39",{"_index":1120,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/exception/post",{"_index":1133,"title":{},"body":{"classes/PostNotFoundException.html":{},"coverage.html":{}}}],["src/posts/input/post.input.ts",{"_index":699,"title":{},"body":{"classes/CreatePostInput.html":{},"coverage.html":{}}}],["src/posts/input/post.input.ts:6",{"_index":703,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/input/post.input.ts:9",{"_index":701,"title":{},"body":{"classes/CreatePostInput.html":{}}}],["src/posts/interface/post.interface.ts",{"_index":1874,"title":{},"body":{"coverage.html":{}}}],["src/posts/models/post.model.ts",{"_index":1875,"title":{},"body":{"coverage.html":{}}}],["src/posts/post",{"_index":1237,"title":{},"body":{"injectables/PostsSearchService.html":{},"coverage.html":{}}}],["src/posts/post.resolver.ts",{"_index":1214,"title":{},"body":{"classes/PostsResolver.html":{},"coverage.html":{}}}],["src/posts/post.resolver.ts:11",{"_index":1216,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/post.resolver.ts:15",{"_index":1221,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/post.resolver.ts:21",{"_index":1223,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/post.resolver.ts:27",{"_index":1219,"title":{},"body":{"classes/PostsResolver.html":{}}}],["src/posts/posts.controller.ts",{"_index":1148,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:36",{"_index":1162,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:56",{"_index":1165,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:64",{"_index":1156,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:70",{"_index":1168,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:76",{"_index":1158,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":1198,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/posts.service.ts",{"_index":1278,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/posts.service.ts:12",{"_index":1282,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:18",{"_index":1287,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:41",{"_index":1288,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:54",{"_index":1284,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:64",{"_index":1293,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:78",{"_index":1285,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:85",{"_index":1292,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/posts.service.ts:96",{"_index":1290,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/types/post",{"_index":1137,"title":{},"body":{"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"coverage.html":{}}}],["src/private",{"_index":1337,"title":{},"body":{"entities/PrivateFile.html":{},"modules/PrivateFilesModule.html":{},"injectables/PrivateFilesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/public",{"_index":1400,"title":{},"body":{"entities/PublicFile.html":{},"modules/PublicFilesModule.html":{},"injectables/PublicFilesService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/search/search.module",{"_index":1202,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/search/search.module.ts",{"_index":1451,"title":{},"body":{"modules/SearchModule.html":{}}}],["src/sms/dto/check",{"_index":574,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"coverage.html":{}}}],["src/sms/dto/send",{"_index":1459,"title":{},"body":{"classes/SendMessageDto.html":{},"coverage.html":{}}}],["src/sms/sms.controller.ts",{"_index":1470,"title":{},"body":{"controllers/SmsController.html":{},"coverage.html":{}}}],["src/sms/sms.controller.ts:21",{"_index":1481,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.controller.ts:31",{"_index":1478,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.controller.ts:46",{"_index":1484,"title":{},"body":{"controllers/SmsController.html":{}}}],["src/sms/sms.module.ts",{"_index":1507,"title":{},"body":{"modules/SmsModule.html":{}}}],["src/sms/sms.service.ts",{"_index":1509,"title":{},"body":{"injectables/SmsService.html":{},"coverage.html":{}}}],["src/sms/sms.service.ts:20",{"_index":1518,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:30",{"_index":1515,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:50",{"_index":1520,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/sms/sms.service.ts:8",{"_index":1512,"title":{},"body":{"injectables/SmsService.html":{}}}],["src/subscribers/dto/create",{"_index":706,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.controller.ts",{"_index":1544,"title":{},"body":{"controllers/SubscribersController.html":{},"coverage.html":{}}}],["src/subscribers/subscribers.controller.ts:14",{"_index":1551,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.controller.ts:28",{"_index":1549,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["src/subscribers/subscribers.module.ts",{"_index":1563,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["src/users/dto/create",{"_index":713,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/entity/address.entity.ts",{"_index":6,"title":{},"body":{"entities/Address.html":{},"coverage.html":{}}}],["src/users/entity/address.entity.ts:13",{"_index":25,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entity/address.entity.ts:16",{"_index":26,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entity/address.entity.ts:19",{"_index":21,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entity/address.entity.ts:22",{"_index":22,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entity/address.entity.ts:25",{"_index":30,"title":{},"body":{"entities/Address.html":{}}}],["src/users/entity/user.entity",{"_index":562,"title":{},"body":{"injectables/ChatService.html":{},"entities/Comment.html":{},"classes/CreateCommentCommand.html":{},"injectables/LocalStrategy.html":{},"entities/Message.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"interfaces/RequestUser.html":{},"injectables/TwoFactorAuthService.html":{}}}],["src/users/entity/user.entity.ts",{"_index":1663,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entity/user.entity.ts:20",{"_index":1683,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:23",{"_index":1680,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:26",{"_index":1690,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:30",{"_index":1692,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:34",{"_index":1678,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:38",{"_index":1697,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:41",{"_index":1687,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:44",{"_index":1685,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:47",{"_index":1693,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:50",{"_index":1686,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:54",{"_index":1673,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:61",{"_index":1675,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:64",{"_index":1695,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:67",{"_index":1682,"title":{},"body":{"entities/User.html":{}}}],["src/users/entity/user.entity.ts:70",{"_index":1689,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":1703,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:29",{"_index":1711,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:51",{"_index":1714,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:68",{"_index":1720,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:81",{"_index":1717,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":776,"title":{},"body":{"modules/EmailConfirmationModule.html":{},"modules/TwoFactorAuthModule.html":{}}}],["src/users/users.module.ts",{"_index":1751,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{}}}],["src/users/users.service.ts",{"_index":1757,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:113",{"_index":1778,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:121",{"_index":1793,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:129",{"_index":1787,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:150",{"_index":1803,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:157",{"_index":1795,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:170",{"_index":1801,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:176",{"_index":1805,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:182",{"_index":1809,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:188",{"_index":1807,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:194",{"_index":1797,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:20",{"_index":1772,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:203",{"_index":1799,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":1789,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:44",{"_index":1791,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:57",{"_index":1780,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:65",{"_index":1776,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:81",{"_index":1783,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:86",{"_index":1785,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/utils/exceptions",{"_index":415,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/ExceptionLoggerFilter.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["src/utils/find",{"_index":416,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/FindOneParams.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/utils/get",{"_index":1878,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/mock/config.service.ts",{"_index":1882,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mock/jwt.service.ts",{"_index":1884,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/pagination.params",{"_index":1172,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/utils/pagination.params.ts",{"_index":1098,"title":{},"body":{"classes/PaginationParams.html":{},"coverage.html":{}}}],["src/utils/pagination.params.ts:15",{"_index":1105,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/pagination.params.ts:21",{"_index":1103,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/pagination.params.ts:9",{"_index":1106,"title":{},"body":{"classes/PaginationParams.html":{}}}],["src/utils/types/objectwithid.dto",{"_index":667,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["src/utils/types/objectwithid.dto.ts",{"_index":1052,"title":{},"body":{"classes/ObjectWithIdDto.html":{},"coverage.html":{}}}],["src/utils/types/objectwithid.dto.ts:5",{"_index":1054,"title":{},"body":{"classes/ObjectWithIdDto.html":{}}}],["start",{"_index":1987,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1990,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1992,"title":{},"body":{"index.html":{}}}],["started",{"_index":1981,"title":{"index.html":{}},"body":{}}],["startid",{"_index":1101,"title":{},"body":{"classes/PaginationParams.html":{},"injectables/PostsService.html":{}}}],["statements",{"_index":1855,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":1912,"title":{},"body":{"dependencies.html":{}}}],["statuscode",{"_index":1040,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["statusmessage",{"_index":1041,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["stay",{"_index":2013,"title":{},"body":{"index.html":{}}}],["store",{"_index":1207,"title":{},"body":{"modules/PostsModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":985,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["strategy/jwt",{"_index":288,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/jwt.strategy",{"_index":287,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":284,"title":{},"body":{"modules/AuthModule.html":{}}}],["stream",{"_index":1392,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/TwoFactorAuthService.html":{}}}],["stream.setheader('content",{"_index":1643,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["street",{"_index":13,"title":{},"body":{"entities/Address.html":{},"classes/CreateUserDto.html":{},"classes/RegistrationDto.html":{}}}],["string",{"_index":17,"title":{},"body":{"entities/Address.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"entities/Category.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"injectables/LocalStrategy.html":{},"entities/Message.html":{},"controllers/OptimizeController.html":{},"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"controllers/PostsController.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"classes/SendMessageDto.html":{},"injectables/SmsService.html":{},"classes/TwoFactorAuthCodeDto.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":816,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{}}}],["subscribemessage",{"_index":521,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('request_all_messages",{"_index":515,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscribemessage('send_message",{"_index":511,"title":{},"body":{"classes/ChatGateway.html":{}}}],["subscriber",{"_index":1550,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["subscriber.dto",{"_index":1554,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["subscriber.dto.ts",{"_index":707,"title":{},"body":{"classes/CreateSubscriberDto.html":{},"coverage.html":{}}}],["subscriber.dto.ts:10",{"_index":710,"title":{},"body":{"classes/CreateSubscriberDto.html":{}}}],["subscriber.dto.ts:6",{"_index":709,"title":{},"body":{"classes/CreateSubscriberDto.html":{}}}],["subscribers",{"_index":1545,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["subscribers.controller",{"_index":1565,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["subscribers/subscribers.module",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers_service",{"_index":1566,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["subscribers_service_host",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribers_service_port",{"_index":151,"title":{},"body":{"modules/AppModule.html":{}}}],["subscribersclient",{"_index":1557,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["subscriberscontroller",{"_index":1543,"title":{"controllers/SubscribersController.html":{}},"body":{"controllers/SubscribersController.html":{},"modules/SubscribersModule.html":{},"coverage.html":{}}}],["subscribersmodule",{"_index":60,"title":{"modules/SubscribersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SubscribersModule.html":{},"modules.html":{},"overview.html":{}}}],["super",{"_index":990,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super(`category",{"_index":494,"title":{},"body":{"classes/CategoryNotFoundException.html":{}}}],["super(`post",{"_index":1134,"title":{},"body":{"classes/PostNotFoundException.html":{}}}],["super.catch(exception",{"_index":920,"title":{},"body":{"classes/ExceptionLoggerFilter.html":{}}}],["support",{"_index":2007,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":2023,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":2070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["synchronize",{"_index":733,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["table",{"_index":1887,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1886,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":1310,"title":{},"body":{"injectables/PostsService.html":{}}}],["template",{"_index":809,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["template(replacements",{"_index":813,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tempora",{"_index":2063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["test",{"_index":1995,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1998,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1997,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1994,"title":{},"body":{"index.html":{}}}],["text",{"_index":878,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{}}}],["thanks",{"_index":2005,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getuserfromauthenticationtoken",{"_index":567,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.authservice.getauthenticateduser(email",{"_index":1025,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authservice.getcookiesforlogout",{"_index":269,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getcookiewithjwtrefreshtoken(user.id",{"_index":255,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getcookiewithjwttoken",{"_index":1617,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["this.authservice.getcookiewithjwttoken(user.id",{"_index":252,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registrationdata",{"_index":244,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.categoriesrepository.create",{"_index":470,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.delete(id",{"_index":475,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.find",{"_index":464,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.findone",{"_index":467,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.save(newcategory",{"_index":471,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesrepository.update(id",{"_index":472,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoriesservice.createcategory(category",{"_index":432,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.deletecategory(number(id",{"_index":438,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getallcategories",{"_index":426,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategorybyid(number(id",{"_index":429,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.updatecategory(number(id",{"_index":435,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.chatservice.getallmessages",{"_index":535,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.getuserfromsocket(socket",{"_index":528,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.chatservice.savemessage(content",{"_index":531,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.commandbus.execute(new",{"_index":626,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.commentsrepository.create",{"_index":683,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.commentsrepository.find",{"_index":939,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["this.commentsrepository.findone",{"_index":938,"title":{},"body":{"classes/GetCommentsHandler.html":{}}}],["this.commentsrepository.save(newpost",{"_index":686,"title":{},"body":{"classes/CreateCommentHandler.html":{}}}],["this.configservice.get",{"_index":800,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/SmsService.html":{}}}],["this.configservice.get('aws_private_bucket_name",{"_index":1384,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["this.configservice.get('aws_public_bucket_name",{"_index":1425,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["this.configservice.get('jwt_access_token_expiration_time",{"_index":369,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":371,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_token_expiration_time",{"_index":377,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":378,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('jwt_verification_token_secret",{"_index":799,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.configservice.get('twilio_account_sid",{"_index":1523,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.configservice.get('twilio_auth_token",{"_index":1525,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.configservice.get('two_factor_authentication_app_name",{"_index":1641,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["this.datasource.createqueryrunner",{"_index":1824,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.deleteavatar(userid",{"_index":1820,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.deleteuseravatar(user",{"_index":1823,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.elasticsearchservice.deletebyquery",{"_index":1277,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.index",{"_index":1256,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.search",{"_index":1264,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.elasticsearchservice.updatebyquery",{"_index":1275,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":749,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken",{"_index":748,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":752,"title":{},"body":{"controllers/EmailConfirmationController.html":{}}}],["this.emailconfirmationservice.sendverificationlink(user.email",{"_index":245,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":859,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":814,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"injectables/EmailSchedulingService.html":{}}}],["this.getbyid(userid",{"_index":1818,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.getfileinfo(fileid",{"_index":1391,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["this.imagequeue.add('optimize",{"_index":1080,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.imagequeue.getjob(id",{"_index":1087,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["this.index",{"_index":1257,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["this.jwtservice.sign(payload",{"_index":370,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.jwtservice.verify(token",{"_index":382,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.logger.error(message",{"_index":1043,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["this.logger.log(message",{"_index":1046,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["this.logger.warn('tried",{"_index":1312,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.logger.warn(message",{"_index":1045,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["this.mailerservice.sendmail(options",{"_index":907,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.messagesrepository.create",{"_index":570,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagesrepository.find",{"_index":572,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.messagesrepository.save(newmessage",{"_index":571,"title":{},"body":{"injectables/ChatService.html":{}}}],["this.nodemailertransport",{"_index":900,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":908,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.postsrepository.count",{"_index":1303,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.create",{"_index":1316,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.delete(id",{"_index":1321,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.find",{"_index":1328,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findandcount",{"_index":1306,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.findone",{"_index":1311,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.query",{"_index":1330,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.save(newpost",{"_index":1317,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsrepository.update(id",{"_index":1318,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.remove(id",{"_index":1322,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.search(text",{"_index":1323,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postssearchservice.update(updatedpost",{"_index":1320,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.createpost(createpostinput",{"_index":1235,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.createpost(post",{"_index":1189,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.deletepost(number(id",{"_index":1193,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getallposts",{"_index":1183,"title":{},"body":{"controllers/PostsController.html":{},"classes/PostsResolver.html":{}}}],["this.postsservice.getallposts(offset",{"_index":1179,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostbyid(id",{"_index":1233,"title":{},"body":{"classes/PostsResolver.html":{}}}],["this.postsservice.getpostbyid(number(id",{"_index":1185,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.getpostswithparagraph(paragraph",{"_index":1178,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.searchforposts(search",{"_index":1182,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.postsservice.updatepost(number(id",{"_index":1191,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.privatefilesrepository.create",{"_index":1387,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["this.privatefilesrepository.findone",{"_index":1396,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["this.privatefilesrepository.save(newfile",{"_index":1389,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["this.privatefilesservice.downloadprivatefile(fileid",{"_index":1838,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.privatefilesservice.generatepresignedurl",{"_index":1844,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.privatefilesservice.getfileinfo(fileid",{"_index":1836,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.privatefilesservice.uploadprivatefile",{"_index":1835,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.publicfilesrepository.create",{"_index":1427,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["this.publicfilesrepository.delete(fileid",{"_index":1433,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["this.publicfilesrepository.findone",{"_index":1430,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["this.publicfilesrepository.save(newfile",{"_index":1429,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["this.publicfilesservice.deletepublicfilewithqueryrunner",{"_index":1830,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.publicfilesservice.uploadpublicfile",{"_index":1821,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.querybus.execute(new",{"_index":630,"title":{},"body":{"controllers/CommentsController.html":{}}}],["this.schedulerregistry.addcronjob",{"_index":881,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.schedulerregistry.getcronjobs().foreach((job",{"_index":885,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.sendverificationlink(user.email",{"_index":822,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.server.emit('receive_message",{"_index":532,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.server.emit('send_all_messages",{"_index":536,"title":{},"body":{"classes/ChatGateway.html":{}}}],["this.smsservice.confirmphonenumber",{"_index":1497,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.smsservice.initiatephonenumberverification",{"_index":1495,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.smsservice.sendmessage",{"_index":1500,"title":{},"body":{"controllers/SmsController.html":{}}}],["this.subscribersclient.emit",{"_index":1562,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.subscribersclient.send",{"_index":1558,"title":{},"body":{"controllers/SubscribersController.html":{}}}],["this.twilioclient",{"_index":1526,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twilioclient.messages.create",{"_index":1542,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twilioclient.verify",{"_index":1529,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.twofactorauthservice.generatetwofactorauthenticationsecret",{"_index":1605,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["this.twofactorauthservice.istwofactorauthenticationcodevalid",{"_index":1608,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["this.twofactorauthservice.pipeqrcodestream(response",{"_index":1606,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["this.userservice.getbyid(payload.id",{"_index":1010,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":998,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["this.usersrepository.create",{"_index":1816,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findone",{"_index":1841,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.findoneby",{"_index":1813,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.save(newuser",{"_index":1817,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update",{"_index":1850,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersrepository.update(userid",{"_index":1822,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.addavatar",{"_index":1735,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.addprivatefile",{"_index":1741,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getallprivatefiles(request.user.id",{"_index":1746,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getbyemail(email",{"_index":361,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.getbyid(id",{"_index":818,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.getbyid(payload.id",{"_index":384,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["this.usersservice.getprivatefile",{"_index":1742,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":830,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["this.usersservice.markphonenumberasconfirmed(userid",{"_index":1540,"title":{},"body":{"injectables/SmsService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":267,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.setcurrentrefreshtoken(refreshtoken",{"_index":256,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.settwofactorauthenticationsecret(secret",{"_index":1642,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["this.usersservice.turnofftwofactorauthentication(request.user.id",{"_index":268,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usersservice.turnontwofactorauthentication(request.user.id",{"_index":1610,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["this.verifypassword(password",{"_index":362,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/ChatService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/GetCommentsHandler.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/UsersService.html":{}}}],["thrown",{"_index":919,"title":{},"body":{"classes/ExceptionLoggerFilter.html":{}}}],["title",{"_index":478,"title":{},"body":{"entities/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"entities/Post.html":{},"interfaces/PostSearchBody.html":{},"injectables/PostsSearchService.html":{},"classes/UpdatePostDto.html":{}}}],["tofilestream",{"_index":1636,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["tofilestream(stream",{"_index":1645,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["token",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"classes/ConfirmEmailDto.html":{},"controllers/EmailConfirmationController.html":{},"injectables/EmailConfirmationService.html":{},"injectables/TwoFactorAuthService.html":{}}}],["token=${verificationtoken",{"_index":802,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokenexpirederror",{"_index":827,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["tokenpayload",{"_index":339,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["tolulope",{"_index":2037,"title":{},"body":{"properties.html":{}}}],["total",{"_index":1146,"title":{},"body":{"interfaces/PostSearchResult.html":{}}}],["touch",{"_index":2014,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":596,"title":{},"body":{"entities/Comment.html":{},"classes/CreateCommentDto.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"entities/User.html":{},"dependencies.html":{}}}],["transport",{"_index":122,"title":{},"body":{"modules/AppModule.html":{},"modules/SubscribersModule.html":{}}}],["transport.rmq",{"_index":1573,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["true",{"_index":117,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"modules/DatabaseModule.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshStrategy.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"modules/SubscribersModule.html":{},"controllers/TwoFactorAuthController.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["true})@exclude",{"_index":1677,"title":{},"body":{"entities/User.html":{}}}],["true})@isnotempty",{"_index":692,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/UpdatePostDto.html":{}}}],["try",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{},"controllers/SubscribersController.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":1211,"title":{},"body":{"modules/PostsModule.html":{}}}],["turn",{"_index":1614,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["turnofftwofactorauthentication",{"_index":1768,"title":{},"body":{"injectables/UsersService.html":{}}}],["turnofftwofactorauthentication(userid",{"_index":1806,"title":{},"body":{"injectables/UsersService.html":{}}}],["turnontwofactorauthentication",{"_index":1589,"title":{},"body":{"controllers/TwoFactorAuthController.html":{},"injectables/UsersService.html":{}}}],["turnontwofactorauthentication(request",{"_index":1596,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["turnontwofactorauthentication(userid",{"_index":1808,"title":{},"body":{"injectables/UsersService.html":{}}}],["twilio",{"_index":1521,"title":{},"body":{"injectables/SmsService.html":{},"dependencies.html":{}}}],["twilio(accountsid",{"_index":1527,"title":{},"body":{"injectables/SmsService.html":{}}}],["twilio_account_sid",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_auth_token",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["twilio_sender_phone_number",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"injectables/SmsService.html":{}}}],["twilio_verification_service_sid",{"_index":164,"title":{},"body":{"modules/AppModule.html":{},"injectables/SmsService.html":{}}}],["twilioclient",{"_index":1510,"title":{},"body":{"injectables/SmsService.html":{}}}],["twitter",{"_index":2019,"title":{},"body":{"index.html":{}}}],["two",{"_index":290,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtTwoFactorGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/PostsController.html":{},"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"coverage.html":{}}}],["two_factor_authentication_app_name",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["twofactorauthcode",{"_index":1583,"title":{},"body":{"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{}}}],["twofactorauthcodedto",{"_index":1580,"title":{"classes/TwoFactorAuthCodeDto.html":{}},"body":{"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"coverage.html":{}}}],["twofactorauthcontroller",{"_index":1585,"title":{"controllers/TwoFactorAuthController.html":{}},"body":{"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"coverage.html":{}}}],["twofactorauthenticationcode",{"_index":1631,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["twofactorauthenticationsecret",{"_index":1669,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["twofactorauthmodule",{"_index":274,"title":{"modules/TwoFactorAuthModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules.html":{},"overview.html":{}}}],["twofactorauthservice",{"_index":1601,"title":{"injectables/TwoFactorAuthService.html":{}},"body":{"controllers/TwoFactorAuthController.html":{},"modules/TwoFactorAuthModule.html":{},"injectables/TwoFactorAuthService.html":{},"coverage.html":{},"overview.html":{}}}],["type",{"_index":15,"title":{},"body":{"entities/Address.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"classes/CategoryNotFoundException.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"classes/CheckVerificationCodeDto.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentCommand.html":{},"classes/CreateCommentDto.html":{},"classes/CreateCommentHandler.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostInput.html":{},"classes/CreateSubscriberDto.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailConfirmationService.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"classes/ExceptionLoggerFilter.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/GetCommentsHandler.html":{},"classes/GetCommentsQuery.html":{},"injectables/GraphqlJwtGuard.html":{},"classes/ImageProcessor.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LogsMiddleware.html":{},"entities/Message.html":{},"classes/ObjectWithIdDto.html":{},"controllers/OptimizeController.html":{},"classes/PaginationParams.html":{},"entities/Post.html":{},"classes/PostNotFoundException.html":{},"interfaces/PostSearchBody.html":{},"interfaces/PostSearchResult.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"injectables/PublicFilesService.html":{},"classes/RegistrationDto.html":{},"interfaces/RequestUser.html":{},"classes/SendMessageDto.html":{},"controllers/SmsController.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"interfaces/TokenPayload.html":{},"classes/TwoFactorAuthCodeDto.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":2039,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":823,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["typeorm",{"_index":33,"title":{},"body":{"entities/Address.html":{},"injectables/CategoriesService.html":{},"entities/Category.html":{},"injectables/ChatService.html":{},"entities/Comment.html":{},"classes/CreateCommentHandler.html":{},"classes/GetCommentsHandler.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"injectables/PrivateFilesService.html":{},"entities/PublicFile.html":{},"injectables/PublicFilesService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":443,"title":{},"body":{"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/CommentsModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([category",{"_index":446,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([comment",{"_index":642,"title":{},"body":{"modules/CommentsModule.html":{}}}],["typeormmodule.forfeature([message",{"_index":545,"title":{},"body":{"modules/ChatModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":1213,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([privatefile",{"_index":1353,"title":{},"body":{"modules/PrivateFilesModule.html":{}}}],["typeormmodule.forfeature([publicfile",{"_index":1410,"title":{},"body":{"modules/PublicFilesModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1756,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":722,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1653,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"dependencies.html":{}}}],["types/bull",{"_index":1914,"title":{},"body":{"dependencies.html":{}}}],["types/post",{"_index":1254,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["unauthorizedexception",{"_index":764,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('2fa",{"_index":1011,"title":{},"body":{"injectables/JwtTwoFactorStrategy.html":{}}}],["unauthorizedexception('confirm",{"_index":767,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["unauthorizedexception('wrong",{"_index":1609,"title":{},"body":{"controllers/TwoFactorAuthController.html":{}}}],["unauthorizedexception('you",{"_index":1839,"title":{},"body":{"injectables/UsersService.html":{}}}],["undefined",{"_index":1160,"title":{},"body":{"controllers/PostsController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["unique",{"_index":1701,"title":{},"body":{"entities/User.html":{}}}],["uniqueviolation",{"_index":1963,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":1993,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/ChatGateway.html":{},"injectables/ChatService.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentHandler.html":{},"injectables/EmailConfirmationService.html":{},"classes/GetCommentsHandler.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"injectables/SmsService.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":2036,"title":{},"body":{"properties.html":{}}}],["update",{"_index":1241,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["update(post",{"_index":1251,"title":{},"body":{"injectables/PostsSearchService.html":{}}}],["updatecategory",{"_index":392,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategory(@param('id",{"_index":434,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["updatecategory(id",{"_index":407,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategorydto",{"_index":408,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatedcategory",{"_index":473,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatedpost",{"_index":1319,"title":{},"body":{"injectables/PostsService.html":{}}}],["updatepost",{"_index":1153,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepost(@param('id",{"_index":1190,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(id",{"_index":1166,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["updatepostdto",{"_index":1167,"title":{"classes/UpdatePostDto.html":{}},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/UpdatePostDto.html":{},"coverage.html":{}}}],["upload",{"_index":1382,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["uploadedfile",{"_index":1724,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfiles",{"_index":1070,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["uploadprivatefile",{"_index":1358,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["uploadprivatefile(ownerid",{"_index":1369,"title":{},"body":{"injectables/PrivateFilesService.html":{}}}],["uploadpublicfile",{"_index":1413,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["uploadpublicfile(databuffer",{"_index":1421,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["uploadresult",{"_index":1381,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["uploadresult.key",{"_index":1388,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["uploadresult.location",{"_index":1428,"title":{},"body":{"injectables/PublicFilesService.html":{}}}],["url",{"_index":801,"title":{},"body":{"injectables/EmailConfirmationService.html":{},"entities/PublicFile.html":{},"injectables/PublicFilesService.html":{},"injectables/UsersService.html":{}}}],["urls",{"_index":1574,"title":{},"body":{"modules/SubscribersModule.html":{}}}],["use",{"_index":1028,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["use(request",{"_index":1029,"title":{},"body":{"injectables/LogsMiddleware.html":{}}}],["useclass",{"_index":170,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":131,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/PostsModule.html":{},"modules/SearchModule.html":{},"modules/SubscribersModule.html":{}}}],["usefilters",{"_index":412,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["usefilters(exceptionloggerfilter",{"_index":424,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/PostsController.html":{}}}],["useguards",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(emailconfirmationguard",{"_index":1186,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(graphqljwtguard",{"_index":1230,"title":{},"body":{"classes/PostsResolver.html":{}}}],["useguards(jwtguard",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/PostsController.html":{},"controllers/SmsController.html":{},"controllers/SubscribersController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtrefreshguard",{"_index":261,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwttwofactorguard",{"_index":1187,"title":{},"body":{"controllers/PostsController.html":{}}}],["useguards(localguard",{"_index":246,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":213,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OptimizeController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(anyfilesinterceptor",{"_index":1078,"title":{},"body":{"controllers/OptimizeController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":1176,"title":{},"body":{"controllers/PostsController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors(fileinterceptor('file",{"_index":1729,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":14,"title":{"entities/User.html":{}},"body":{"entities/Address.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/ChatService.html":{},"entities/Comment.html":{},"controllers/CommentsController.html":{},"classes/CreateCommentCommand.html":{},"injectables/EmailConfirmationService.html":{},"injectables/EmailService.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{},"entities/Message.html":{},"entities/Post.html":{},"injectables/PostsService.html":{},"entities/PrivateFile.html":{},"interfaces/RequestUser.html":{},"modules/SubscribersModule.html":{},"injectables/TwoFactorAuthService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user.address",{"_index":29,"title":{},"body":{"entities/Address.html":{}}}],["user.avatar",{"_index":1819,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.avatar?.id",{"_index":1825,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.currenthashedrefreshtoken",{"_index":1849,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":714,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":715,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":716,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:8",{"_index":717,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:9",{"_index":718,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":1640,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["user.entity",{"_index":34,"title":{},"body":{"entities/Address.html":{}}}],["user.id",{"_index":257,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TwoFactorAuthService.html":{},"injectables/UsersService.html":{}}}],["user.interface",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CommentsController.html":{},"controllers/EmailConfirmationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/PostsController.html":{},"classes/PostsResolver.html":{},"controllers/SmsController.html":{},"controllers/TwoFactorAuthController.html":{},"controllers/UsersController.html":{}}}],["user.interface.ts",{"_index":1450,"title":{},"body":{"interfaces/RequestUser.html":{},"coverage.html":{}}}],["user.isemailconfirmed",{"_index":819,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["user.istwofactorauthenticationenabled",{"_index":260,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["user.messages",{"_index":1048,"title":{},"body":{"entities/Message.html":{}}}],["user.password",{"_index":250,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user.twofactorauthenticationsecret",{"_index":1647,"title":{},"body":{"injectables/TwoFactorAuthService.html":{}}}],["userdata",{"_index":1781,"title":{},"body":{"injectables/UsersService.html":{}}}],["userhash",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{}}}],["userid",{"_index":1516,"title":{},"body":{"injectables/SmsService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":726,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/SearchModule.html":{}}}],["usernamefield",{"_index":1024,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1704,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1753,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1726,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entity/user.entity",{"_index":1127,"title":{},"body":{"entities/Post.html":{}}}],["users/users.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/SmsModule.html":{}}}],["users/users.service",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":1702,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":980,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["usersmodule",{"_index":61,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/SmsModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersrepository",{"_index":1773,"title":{},"body":{"injectables/UsersService.html":{}}}],["usersservice",{"_index":226,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/EmailConfirmationService.html":{},"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/SmsService.html":{},"controllers/TwoFactorAuthController.html":{},"injectables/TwoFactorAuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userwithfiles",{"_index":1840,"title":{},"body":{"injectables/UsersService.html":{}}}],["userwithfiles.files.map(async",{"_index":1843,"title":{},"body":{"injectables/UsersService.html":{}}}],["utf8').tostring",{"_index":808,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["utils/exceptions",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":1379,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{},"dependencies.html":{}}}],["v4",{"_index":1378,"title":{},"body":{"injectables/PrivateFilesService.html":{},"injectables/PublicFilesService.html":{}}}],["validate",{"_index":979,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1020,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1001,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/JwtTwoFactorStrategy.html":{}}}],["validate(request",{"_index":982,"title":{},"body":{"injectables/JwtRefreshStrategy.html":{}}}],["validatenested",{"_index":666,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["validatenested()@type(undefined",{"_index":664,"title":{},"body":{"classes/CreateCommentDto.html":{}}}],["validationschema",{"_index":137,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":583,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateCommentDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateSubscriberDto.html":{},"classes/EmailScheduleDto.html":{},"classes/FindOneParams.html":{},"classes/GetCommentsDto.html":{},"classes/ObjectWithIdDto.html":{},"classes/PaginationParams.html":{},"classes/RegistrationDto.html":{},"classes/SendMessageDto.html":{},"classes/TwoFactorAuthCodeDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdatePostDto.html":{},"dependencies.html":{}}}],["validators",{"_index":1730,"title":{},"body":{"controllers/UsersController.html":{}}}],["value",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{},"classes/ImageProcessor.html":{},"injectables/LogsMiddleware.html":{},"injectables/PostsSearchService.html":{},"injectables/PostsService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1863,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":2042,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["velit",{"_index":2056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":575,"title":{},"body":{"classes/CheckVerificationCodeDto.html":{},"controllers/SmsController.html":{},"coverage.html":{}}}],["verification.template.html",{"_index":806,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["verificationchecks.create",{"_index":1535,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationcode",{"_index":1514,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationdata",{"_index":1476,"title":{},"body":{"controllers/SmsController.html":{}}}],["verificationdata.code",{"_index":1499,"title":{},"body":{"controllers/SmsController.html":{}}}],["verifications.create",{"_index":1531,"title":{},"body":{"injectables/SmsService.html":{}}}],["verificationtoken",{"_index":798,"title":{},"body":{"injectables/EmailConfirmationService.html":{}}}],["verificationtokenpayload",{"_index":794,"title":{"interfaces/VerificationTokenPayload.html":{}},"body":{"injectables/EmailConfirmationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verifypassword",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifypassword(inputpassword",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{}}}],["version",{"_index":2034,"title":{},"body":{"properties.html":{}}}],["void",{"_index":870,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"classes/ExceptionLoggerFilter.html":{},"injectables/LogsMiddleware.html":{}}}],["watch",{"_index":1988,"title":{},"body":{"index.html":{}}}],["website",{"_index":2017,"title":{},"body":{"index.html":{}}}],["websocketgateway",{"_index":522,"title":{},"body":{"classes/ChatGateway.html":{}}}],["websocketserver",{"_index":506,"title":{},"body":{"classes/ChatGateway.html":{}}}],["went",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{}}}],["where.id",{"_index":1301,"title":{},"body":{"injectables/PostsService.html":{}}}],["world",{"_index":2047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["wrong",{"_index":359,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["wsexception",{"_index":560,"title":{},"body":{"injectables/ChatService.html":{}}}],["wsexception('invalid",{"_index":568,"title":{},"body":{"injectables/ChatService.html":{}}}],["yes",{"_index":944,"title":{},"body":{"classes/GetCommentsQuery.html":{},"injectables/PostsService.html":{}}}],["you'd",{"_index":2010,"title":{},"body":{"index.html":{}}}],["zip",{"_index":1917,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ChatModule.html":{},"modules/EmailConfirmationModule.html":{},"modules/EmailModule.html":{},"modules/EmailSchedulingModule.html":{},"modules/PostsModule.html":{},"modules/PrivateFilesModule.html":{},"modules/PublicFilesModule.html":{},"modules/SmsModule.html":{},"modules/TwoFactorAuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"entities/Address.html":{"url":"entities/Address.html","title":"entity - Address","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Address\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/address.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                city\n                            \n                            \n                                    Public\n                                country\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                street\n                            \n                            \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/address.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/address.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/address.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        street\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/address.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Relation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.address)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/address.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  PrimaryGeneratedColumn,\n  Column,\n  Entity,\n  OneToOne,\n  Relation,\n} from 'typeorm';\nimport User from './user.entity';\n\n@Entity()\nclass Address {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public street: string;\n\n  @Column()\n  public city: string;\n\n  @Column()\n  public country: string;\n\n  @OneToOne(() => User, (user: User) => user.address)\n  public user: Relation;\n}\nexport default Address;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nChatModule\n\nChatModule\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrivateFilesModule\n\nPrivateFilesModule\n\nAppModule -->\n\nPrivateFilesModule->AppModule\n\n\n\n\n\nPublicFilesModule\n\nPublicFilesModule\n\nAppModule -->\n\nPublicFilesModule->AppModule\n\n\n\n\n\nSearchModule\n\nSearchModule\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            ChatModule\n                        \n                        \n                            CommentsModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            EmailSchedulingModule\n                        \n                        \n                            OptimizeModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            PrivateFilesModule\n                        \n                        \n                            PublicFilesModule\n                        \n                        \n                            SearchModule\n                        \n                        \n                            SmsModule\n                        \n                        \n                            SubscribersModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { PostsModule } from './posts/posts.module';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { APP_FILTER } from '@nestjs/core';\nimport { ExceptionLoggerFilter } from './utils/exceptions-logger.filter';\nimport { CategoriesModule } from './categories/categories.module';\nimport { DatabaseModule } from './database/database.module';\nimport { PublicFilesModule } from './public-files/public-files.module';\nimport { PrivateFilesModule } from './private-files/private-files.module';\nimport { SearchModule } from './search/search.module';\nimport { SubscribersModule } from './subscribers/subscribers.module';\nimport { CommentsModule } from './comments/comments.module';\nimport { EmailModule } from './email/email.module';\nimport { EmailSchedulingModule } from './email-scheduling/email-scheduling.module';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { ChatModule } from './chat/chat.module';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver } from '@nestjs/apollo';\nimport { ApolloServerPluginLandingPageLocalDefault } from 'apollo-server-core';\nimport { BullModule } from '@nestjs/bull';\nimport { OptimizeModule } from './optimize/optimize.module';\nimport { EmailConfirmationModule } from './email-confirmation/email-confirmation.module';\nimport { MailerModule } from '@nestjs-modules/mailer';\nimport { SmsModule } from './sms/sms.module';\n\n@Module({\n  imports: [\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      autoSchemaFile: true,\n      playground: false,\n      plugins: [ApolloServerPluginLandingPageLocalDefault],\n    }),\n    MailerModule.forRoot({\n      transport: {\n        host: 'localhost',\n        port: 1025,\n        ignoreTLS: true,\n        secure: false,\n      },\n    }),\n    BullModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        redis: {\n          host: configService.get('REDIS_HOST'),\n          port: configService.get('REDIS_PORT'),\n        },\n      }),\n    }),\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        JWT_REFRESH_TOKEN_SECRET: Joi.string().required(),\n        JWT_REFRESH_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        SUBSCRIBERS_SERVICE_HOST: Joi.string().required(),\n        SUBSCRIBERS_SERVICE_PORT: Joi.number().required(),\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_PORT: Joi.number().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        JWT_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n        TWO_FACTOR_AUTHENTICATION_APP_NAME: Joi.string().required(),\n        TWILIO_ACCOUNT_SID: Joi.string().required(),\n        TWILIO_AUTH_TOKEN: Joi.string().required(),\n        TWILIO_VERIFICATION_SERVICE_SID: Joi.string().required(),\n        TWILIO_SENDER_PHONE_NUMBER: Joi.string().required(),\n        PORT: Joi.number(),\n      }),\n    }),\n    PostsModule,\n    ScheduleModule.forRoot(),\n    DatabaseModule,\n    UsersModule,\n    AuthModule,\n    CategoriesModule,\n    PublicFilesModule,\n    PrivateFilesModule,\n    SearchModule,\n    SubscribersModule,\n    CommentsModule,\n    EmailModule,\n    EmailSchedulingModule,\n    ChatModule,\n    OptimizeModule,\n    EmailConfirmationModule,\n    SmsModule,\n  ],\n  providers: [\n    {\n      provide: APP_FILTER,\n      useClass: ExceptionLoggerFilter,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(request: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logout\n                        \n                    \n                \n            \n            \n                \n                    \n                    logout(request: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(204)@UseGuards(JwtGuard)@Get('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                    \n                    profile(request: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(JwtGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegistrationDto, address: Address)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegistrationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    address\n                                    \n                                                Address\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  HttpCode,\n  Post,\n  Req,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { Address, RegistrationDto } from './dto';\nimport { JwtGuard } from './guard/jwt.guard';\nimport { JwtRefreshGuard } from './guard/jwt-refresh.guard';\nimport { LocalGuard } from './guard/local.guard';\nimport { RequestUser } from './interface/request-user.interface';\nimport { UsersService } from 'src/users/users.service';\nimport { EmailConfirmationService } from 'src/email-confirmation/email-confirmation.service';\n\n@Controller('auth')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    private readonly usersService: UsersService,\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n\n  @HttpCode(200)\n  @UseGuards(JwtGuard)\n  @Get('profile')\n  async profile(@Req() request: RequestUser) {\n    return request.user;\n  }\n\n  @Post('register')\n  async register(\n    @Body() registrationData: RegistrationDto,\n    @Body('address') address: Address,\n  ) {\n    const user = await this.authService.register(registrationData);\n    if (user) {\n      await this.emailConfirmationService.sendVerificationLink(user.email);\n    }\n    return user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalGuard)\n  @Post('login')\n  async login(@Req() request: RequestUser) {\n    const user = request.user;\n    delete user.password;\n    const accessTokenCookie = this.authService.getCookieWithJwtToken(user.id);\n    const { refreshTokenCookie, refreshToken } =\n      await this.authService.getCookieWithJwtRefreshToken(user.id);\n    await this.usersService.setCurrentRefreshToken(refreshToken, user.id);\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie,\n    ]);\n    if (user.isTwoFactorAuthenticationEnabled) {\n      return user;\n    }\n\n    return user;\n  }\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestUser) {\n    const user = request.user;\n    delete user.password;\n    const accessTokenCookie = this.authService.getCookieWithJwtToken(user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return user;\n  }\n  @HttpCode(204)\n  @UseGuards(JwtGuard)\n  @Get('logout')\n  async logout(@Req() request: RequestUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    // await this.usersService.turnOffTwoFactorAuthentication(request.user.id);\n    request.res.setHeader('Set-Cookie', this.authService.getCookiesForLogout());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nEmailConfirmationModule->AuthModule\n\n\n\n\n\nTwoFactorAuthModule\n\nTwoFactorAuthModule\n\nAuthModule -->\n\nTwoFactorAuthModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthModule -->\n\nJwtTwoFactorStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtRefreshStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            JwtTwoFactorStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailConfirmationModule\n                        \n                        \n                            TwoFactorAuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { PassportModule } from '@nestjs/passport';\nimport { LocalStrategy } from './strategy/local.strategy';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport { JwtRefreshStrategy } from './strategy/jwt-refresh.strategy';\nimport { TwoFactorAuthModule } from './two-factor-auth/two-factor-auth.module';\nimport { JwtTwoFactorStrategy } from './strategy/jwt-two-factor.strategy';\nimport { EmailConfirmationModule } from 'src/email-confirmation/email-confirmation.module';\n\n@Module({\n  imports: [\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME'),\n        },\n      }),\n    }),\n    TwoFactorAuthModule,\n    EmailConfirmationModule,\n  ],\n  providers: [\n    AuthService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshStrategy,\n    JwtTwoFactorStrategy,\n  ],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                getCookiesForLogout\n                            \n                            \n                                    Async\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                getCookieWithJwtToken\n                            \n                            \n                                    Async\n                                getUserFromAuthenticationToken\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCookiesForLogout\n                        \n                    \n                \n            \n            \n                \ngetCookiesForLogout()\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(id: number, is2FAunthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    is2FAunthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCookieWithJwtToken\n                        \n                    \n                \n            \n            \n                \ngetCookieWithJwtToken(id: number, is2FAunthenticated)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Default value\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                    \n\n                                \n                                \n                                    is2FAunthenticated\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n                                    \n                                        false\n                                    \n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserFromAuthenticationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromAuthenticationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegistrationDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegistrationDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(inputPassword: string, userHash: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    inputPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { RegistrationDto } from './dto';\nimport { UsersService } from '../users/users.service';\nimport * as bcrypt from 'bcrypt';\nimport { PostgresErrorCode } from '../constants/postgres-error-codes.enum';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { TokenPayload } from './interface/token-payload.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async register(registrationData: RegistrationDto) {\n    const hashedPassword = await bcrypt.hash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        address: { ...registrationData.address },\n        password: hashedPassword,\n      });\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCode.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists.',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong.',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  async getAuthenticatedUser(email: string, password: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(password, user.password);\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided.',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  private async verifyPassword(inputPassword: string, userHash: string) {\n    const isPasswordMatch = await bcrypt.compare(inputPassword, userHash);\n    if (!isPasswordMatch) {\n      throw new HttpException(\n        'Wrong credentials provided.',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  getCookieWithJwtToken(id: number, is2FAunthenticated = false) {\n    const payload: TokenPayload = { id, is2FAunthenticated };\n    const expTime = this.configService.get('JWT_ACCESS_TOKEN_EXPIRATION_TIME');\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      expiresIn: expTime,\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${expTime}`;\n  }\n\n  async getCookieWithJwtRefreshToken(id: number, is2FAunthenticated = false) {\n    const payload: TokenPayload = { id, is2FAunthenticated };\n    const expTime = this.configService.get('JWT_REFRESH_TOKEN_EXPIRATION_TIME');\n    const refreshToken = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: `${expTime}`,\n    });\n\n    const refreshTokenCookie = `Refresh=${refreshToken}; HttpOnly; Path=/; Max-Age=${expTime}`;\n    return {\n      refreshTokenCookie,\n      refreshToken,\n    };\n  }\n\n  getCookiesForLogout() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n\n  async getUserFromAuthenticationToken(token: string) {\n    const payload: TokenPayload = this.jwtService.verify(token, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n    if (payload.id) {\n      return this.usersService.getById(payload.id);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createCategory\n                            \n                            \n                                deleteCategory\n                            \n                            \n                                getAllCategories\n                            \n                            \n                                getCategoryById\n                            \n                            \n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createCategory\n                        \n                    \n                \n            \n            \n                \ncreateCategory(category: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(201)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \ndeleteCategory(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \ngetAllCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \ngetCategoryById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateCategory\n                        \n                    \n                \n            \n            \n                \nupdateCategory(id: string, category: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Param,\n  Delete,\n  HttpCode,\n  UseFilters,\n  UseGuards,\n  Put,\n} from '@nestjs/common';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\nimport { ExceptionLoggerFilter } from 'src/utils/exceptions-logger.filter';\nimport { FindOneParams } from 'src/utils/find-one.params';\nimport { CategoriesService } from './categories.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Controller('categories')\n@UseFilters(ExceptionLoggerFilter)\n@UseGuards(JwtGuard)\nexport class CategoriesController {\n  constructor(private readonly categoriesService: CategoriesService) {}\n\n  @Get()\n  @HttpCode(200)\n  getAllCategories() {\n    return this.categoriesService.getAllCategories();\n  }\n\n  @Get(':id')\n  @HttpCode(200)\n  getCategoryById(@Param() { id }: FindOneParams) {\n    return this.categoriesService.getCategoryById(Number(id));\n  }\n\n  @Post()\n  @HttpCode(201)\n  createCategory(@Body() category: CreateCategoryDto) {\n    return this.categoriesService.createCategory(category);\n  }\n\n  @Put(':id')\n  @HttpCode(200)\n  updateCategory(@Param('id') id: string, @Body() category: UpdateCategoryDto) {\n    return this.categoriesService.updateCategory(Number(id), category);\n  }\n\n  @Delete(':id')\n  @HttpCode(204)\n  deleteCategory(@Param('id') { id }: FindOneParams) {\n    return this.categoriesService.deleteCategory(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nCategoriesService\n\nCategoriesService\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoriesService } from './categories.service';\nimport { CategoriesController } from './categories.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport Category from './entity/category.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Category])],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n})\nexport class CategoriesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                    Async\n                                getAllCategories\n                            \n                            \n                                    Async\n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoriesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/categories/categories.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoriesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(category: CreateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllCategories\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getCategoryById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategoryById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateCategory\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(id: number, category: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    category\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport Category from './entity/category.entity';\nimport { CategoryNotFoundException } from './exception/category-not-found.exception';\n\n@Injectable()\nexport class CategoriesService {\n  constructor(\n    @InjectRepository(Category)\n    private readonly categoriesRepository: Repository,\n  ) {}\n\n  async getAllCategories() {\n    return await this.categoriesRepository.find({\n      relations: ['posts'],\n    });\n  }\n\n  async getCategoryById(id: number) {\n    const post = await this.categoriesRepository.findOne({\n      where: { id },\n      relations: ['posts'],\n    });\n    if (post) {\n      return post;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async createCategory(category: CreateCategoryDto) {\n    const newCategory = await this.categoriesRepository.create({\n      ...category,\n    });\n    await this.categoriesRepository.save(newCategory);\n    return newCategory;\n  }\n\n  async updateCategory(id: number, category: UpdateCategoryDto) {\n    await this.categoriesRepository.update(id, category);\n    const updatedCategory = await this.categoriesRepository.findOne({\n      where: { id },\n    });\n    if (updatedCategory) {\n      return updatedCategory;\n    }\n    throw new CategoryNotFoundException(id);\n  }\n\n  async deleteCategory(id: number) {\n    const deleteResponse = await this.categoriesRepository.delete(id);\n    if (deleteResponse.affected) return;\n    throw new CategoryNotFoundException(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Category.html":{"url":"entities/Category.html","title":"entity - Category","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/entity/category.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                posts\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entity/category.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.categories)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entity/category.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/entity/category.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import Post from '../../posts/entity/post.entity';\nimport { Entity, PrimaryGeneratedColumn, Column, ManyToMany } from 'typeorm';\n\n@Entity()\nclass Category {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public title: string;\n\n  @ManyToMany(() => Post, (post: Post) => post.categories)\n  public posts: Post[];\n}\n\nexport default Category;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryNotFoundException.html":{"url":"classes/CategoryNotFoundException.html","title":"class - CategoryNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/exception/category-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(catId: number)\n                    \n                \n                        \n                            \n                                Defined in src/categories/exception/category-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        catId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class CategoryNotFoundException extends NotFoundException {\n  constructor(catId: number) {\n    super(`Category with id ${catId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChatGateway.html":{"url":"classes/ChatGateway.html","title":"class - ChatGateway","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChatGateway\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.gateway.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnGatewayConnection\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                server\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                handleConnection\n                            \n                            \n                                    Async\n                                listenForMessages\n                            \n                            \n                                    Async\n                                requestAllMessages\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(chatService: ChatService)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.gateway.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        chatService\n                                                  \n                                                        \n                                                                        ChatService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Server\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @WebSocketServer()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/chat.gateway.ts:21\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        handleConnection\n                        \n                    \n                \n            \n            \n                \n                    \n                    handleConnection(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        listenForMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    listenForMessages(content: string, socket: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('send_message')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        requestAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    requestAllMessages(socket: Socket)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @SubscribeMessage('request_all_messages')\n                \n            \n\n            \n                \n                    Defined in src/chat/chat.gateway.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  MessageBody,\n  OnGatewayConnection,\n  OnGatewayDisconnect,\n  OnGatewayInit,\n  ConnectedSocket,\n  SubscribeMessage,\n  WebSocketGateway,\n  WebSocketServer,\n} from '@nestjs/websockets';\nimport { Server, Socket } from 'socket.io';\nimport { ChatService } from './chat.service';\n\n@WebSocketGateway({\n  cors: {\n    origin: '*',\n  },\n})\nexport class ChatGateway implements OnGatewayConnection {\n  @WebSocketServer()\n  server: Server;\n\n  constructor(private readonly chatService: ChatService) {}\n\n  async handleConnection(socket: Socket) {\n    await this.chatService.getUserFromSocket(socket);\n  }\n\n  @SubscribeMessage('send_message')\n  async listenForMessages(\n    @MessageBody() content: string,\n    @ConnectedSocket() socket: Socket,\n  ) {\n    const author = await this.chatService.getUserFromSocket(socket);\n    const message = await this.chatService.saveMessage(content, author);\n\n    this.server.emit('receive_message', message);\n\n    return message;\n  }\n\n  @SubscribeMessage('request_all_messages')\n  async requestAllMessages(@ConnectedSocket() socket: Socket) {\n    await this.chatService.getUserFromSocket(socket);\n    const messages = await this.chatService.getAllMessages();\n\n    this.server.emit('send_all_messages', messages);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ChatModule.html":{"url":"modules/ChatModule.html","title":"module - ChatModule","body":"\n                   \n\n\n\n\n    Modules\n    ChatModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_ChatModule_imports\n\n\n\ncluster_ChatModule_exports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthModule->ChatModule\n\n\n\n\n\nChatService \n\nChatService \n\nChatService  -->\n\nChatModule->ChatService \n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/chat/chat.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChatService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ChatService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { ChatGateway } from './chat.gateway';\nimport { ChatService } from './chat.service';\nimport Message from './entity/message.entity';\n\n@Module({\n  imports: [AuthModule, TypeOrmModule.forFeature([Message])],\n  providers: [ChatService, ChatGateway],\n  exports: [ChatService],\n})\nexport class ChatModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChatService.html":{"url":"injectables/ChatService.html","title":"injectable - ChatService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChatService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/chat.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllMessages\n                            \n                            \n                                    Async\n                                getUserFromSocket\n                            \n                            \n                                    Async\n                                saveMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthService, messagesRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/chat/chat.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        messagesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllMessages\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserFromSocket\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserFromSocket(socket: Socket)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    socket\n                                    \n                                            Socket\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveMessage(content: string, author: User)\n                \n            \n\n\n            \n                \n                    Defined in src/chat/chat.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    content\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    author\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { Socket } from 'socket.io';\nimport { parse } from 'cookie';\nimport { WsException } from '@nestjs/websockets';\nimport { AuthService } from 'src/auth/auth.service';\nimport Message from './entity/message.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport User from 'src/users/entity/user.entity';\n\n@Injectable()\nexport class ChatService {\n  constructor(\n    private readonly authenticationService: AuthService,\n    @InjectRepository(Message)\n    private readonly messagesRepository: Repository,\n  ) {}\n\n  async getUserFromSocket(socket: Socket) {\n    const cookie = socket.handshake.headers.cookie;\n    const { Authentication: authenticationToken } = parse(cookie);\n    const user =\n      await this.authenticationService.getUserFromAuthenticationToken(\n        authenticationToken,\n      );\n    if (!user) {\n      throw new WsException('Invalid credentials.');\n    }\n    return user;\n  }\n\n  async saveMessage(content: string, author: User) {\n    const newMessage = await this.messagesRepository.create({\n      content,\n      author,\n    });\n    await this.messagesRepository.save(newMessage);\n    return newMessage;\n  }\n\n  async getAllMessages() {\n    return this.messagesRepository.find({\n      relations: ['author'],\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CheckVerificationCodeDto.html":{"url":"classes/CheckVerificationCodeDto.html","title":"class - CheckVerificationCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CheckVerificationCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/dto/check-verification-code.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Length(6)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/check-verification-code.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, Length } from 'class-validator';\n\nexport class CheckVerificationCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  @Length(6)\n  code: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Comment.html":{"url":"entities/Comment.html","title":"entity - Comment","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Comment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/entity/comment.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entity/comment.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entity/comment.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entity/comment.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, post => post.comments)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/entity/comment.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Exclude } from 'class-transformer';\nimport Post from 'src/posts/entity/post.entity';\nimport User from 'src/users/entity/user.entity';\nimport { Column, PrimaryGeneratedColumn, Entity, ManyToOne } from 'typeorm';\n\n@Entity()\nclass Comment {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public content: string;\n\n  @ManyToOne(() => Post, (post: Post) => post.comments)\n  public post: Post;\n\n  @Exclude()\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n}\n\nexport default Comment;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CommentsController.html":{"url":"controllers/CommentsController.html","title":"controller - CommentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CommentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/comments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                comments\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createComment\n                            \n                            \n                                    Async\n                                getComments\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createComment\n                        \n                    \n                \n            \n            \n                \n                    \n                    createComment(comment: CreateCommentDto, req: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    comment\n                                    \n                                                CreateCommentDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getComments\n                        \n                    \n                \n            \n            \n                \n                    \n                    getComments(undefined: GetCommentsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/comments/comments.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                GetCommentsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Query,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\nimport { RequestUser } from 'src/auth/interface/request-user.interface';\nimport { CreateCommentCommand } from './commands/implementation/create-comment.command';\nimport CreateCommentDto from './dto/create-comment.dto';\nimport GetCommentsDto from './dto/get-comments.dto';\nimport { GetCommentsQuery } from './queries/implementation/get-comments.query';\n\n@Controller('comments')\n@UseGuards(JwtGuard)\nexport class CommentsController {\n  constructor(private commandBus: CommandBus, private queryBus: QueryBus) {}\n\n  @Post()\n  async createComment(\n    @Body() comment: CreateCommentDto,\n    @Req() req: RequestUser,\n  ) {\n    const user = req.user;\n    return this.commandBus.execute(new CreateCommentCommand(comment, user));\n  }\n\n  @Get()\n  async getComments(@Query() { postId }: GetCommentsDto) {\n    return this.queryBus.execute(new GetCommentsQuery(postId));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommentsModule.html":{"url":"modules/CommentsModule.html","title":"module - CommentsModule","body":"\n                   \n\n\n\n\n    Modules\n    CommentsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/comments/comments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            CommentsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CommentsController } from './comments.controller';\nimport { CqrsModule } from '@nestjs/cqrs';\nimport { CreateCommentHandler } from './commands/handlers/create-comment.handler';\nimport Comment from './entity/comment.entity';\nimport { GetCommentsHandler } from './queries/handlers/get-comments.handler';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Comment]), CqrsModule],\n  controllers: [CommentsController],\n  providers: [CreateCommentHandler, GetCommentsHandler],\n})\nexport class CommentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmation/dto/confirmation-data.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-confirmation/dto/confirmation-data.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/create-category.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class CreateCategoryDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  title: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentCommand.html":{"url":"classes/CreateCommentCommand.html","title":"class - CreateCommentCommand","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentCommand\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/commands/implementation/create-comment.command.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                author\n                            \n                            \n                                    Public\n                                    Readonly\n                                comment\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(comment: CreateCommentDto, author: User)\n                    \n                \n                        \n                            \n                                Defined in src/comments/commands/implementation/create-comment.command.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        comment\n                                                  \n                                                        \n                                                                        CreateCommentDto\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        author\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/commands/implementation/create-comment.command.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                        comment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateCommentDto\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/commands/implementation/create-comment.command.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import CreateCommentDto from 'src/comments/dto/create-comment.dto';\nimport User from 'src/users/entity/user.entity';\n\nexport class CreateCommentCommand {\n  constructor(\n    public readonly comment: CreateCommentDto,\n    public readonly author: User,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentDto.html":{"url":"classes/CreateCommentDto.html","title":"class - CreateCommentDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/create-comment.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                post\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/create-comment.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ObjectWithIdDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/create-comment.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, ValidateNested } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport ObjectWithIdDto from 'src/utils/types/objectWithId.dto';\n\nexport class CreateCommentDto {\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @ValidateNested()\n  @Type(() => ObjectWithIdDto)\n  post: ObjectWithIdDto;\n}\n\nexport default CreateCommentDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCommentHandler.html":{"url":"classes/CreateCommentHandler.html","title":"class - CreateCommentHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCommentHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/commands/handlers/create-comment.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ICommandHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/commands/handlers/create-comment.handler.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(command: CreateCommentCommand)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/commands/handlers/create-comment.handler.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    command\n                                    \n                                                CreateCommentCommand\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateCommentCommand } from '../implementation/create-comment.command';\nimport Comment from '../../entity/comment.entity';\n\n@CommandHandler(CreateCommentCommand)\nexport class CreateCommentHandler\n  implements ICommandHandler\n{\n  constructor(\n    @InjectRepository(Comment)\n    private commentsRepository: Repository,\n  ) {}\n\n  async execute(command: CreateCommentCommand) {\n    const newPost = await this.commentsRepository.create({\n      ...command.comment,\n      author: command.author,\n    });\n    await this.commentsRepository.save(newPost);\n    return newPost;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/create-post.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsObject, IsOptional } from 'class-validator';\n\nexport class CreatePostDto {\n  @IsString({ each: true })\n  @IsNotEmpty()\n  paragraphs: string[];\n\n  @IsString()\n  @IsNotEmpty()\n  title: string;\n\n  // @IsObject()\n  // @IsOptional()\n  // categories: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostInput.html":{"url":"classes/CreatePostInput.html","title":"class - CreatePostInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/input/post.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/input/post.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/input/post.input.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\n\n@InputType()\nexport class CreatePostInput {\n  @Field()\n  title: string;\n\n  @Field(() => [String])\n  paragraphs: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSubscriberDto.html":{"url":"classes/CreateSubscriberDto.html","title":"class - CreateSubscriberDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSubscriberDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/dto/create-subscriber.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/create-subscriber.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/subscribers/dto/create-subscriber.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsEmail, IsNotEmpty } from 'class-validator';\n\nexport class CreateSubscriberDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Address\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        interface Address {\n  street: string;\n  city: string;\n  country: string;\n}\nexport class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n  address: Address;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        type: 'postgres',\n        host: configService.get('POSTGRES_HOST'),\n        port: configService.get('POSTGRES_PORT'),\n        username: configService.get('POSTGRES_USER'),\n        password: configService.get('POSTGRES_PASSWORD'),\n        database: configService.get('POSTGRES_DB'),\n        entities: [join(__dirname, '/../**', '*.entity.{ts,js}')],\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailConfirmationController.html":{"url":"controllers/EmailConfirmationController.html","title":"controller - EmailConfirmationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailConfirmationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmation/email-confirmation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-confirmation\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('confirm')\n                \n            \n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtGuard)\n                \n            \n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.controller.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Query, Req, UseGuards } from '@nestjs/common';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\nimport { RequestUser } from 'src/auth/interface/request-user.interface';\nimport { EmailConfirmationService } from './email-confirmation.service';\n\n@Controller('email-confirmation')\nexport class EmailConfirmationController {\n  constructor(\n    private readonly emailConfirmationService: EmailConfirmationService,\n  ) {}\n\n  @Get('confirm')\n  async confirm(@Query('token') token: string) {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(\n      token,\n    );\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n\n  @Post('resend-confirmation-link')\n  @UseGuards(JwtGuard)\n  async resendConfirmationLink(@Req() request: RequestUser) {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EmailConfirmationGuard.html":{"url":"guards/EmailConfirmationGuard.html","title":"guard - EmailConfirmationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EmailConfirmationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/email-confirmation/guard/email-confirmation.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmation/guard/email-confirmation.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { RequestUser } from 'src/auth/interface/request-user.interface';\n\n@Injectable()\nexport class EmailConfirmationGuard implements CanActivate {\n  canActivate(context: ExecutionContext) {\n    const request: RequestUser = context.switchToHttp().getRequest();\n\n    if (!request.user?.isEmailConfirmed) {\n      throw new UnauthorizedException('Confirm your email first.');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailConfirmationModule.html":{"url":"modules/EmailConfirmationModule.html","title":"module - EmailConfirmationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailConfirmationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailConfirmationModule_imports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email-confirmation/email-confirmation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailConfirmationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailConfirmationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailConfirmationService } from './email-confirmation.service';\nimport { EmailConfirmationController } from './email-confirmation.controller';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { EmailModule } from 'src/email/email.module';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  imports: [ConfigModule, JwtModule, EmailModule, UsersModule],\n  providers: [EmailConfirmationService],\n  exports: [EmailConfirmationService],\n  controllers: [EmailConfirmationController],\n})\nexport class EmailConfirmationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailConfirmationService.html":{"url":"injectables/EmailConfirmationService.html","title":"injectable - EmailConfirmationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailConfirmationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmation/email-confirmation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Async\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, jwtService: JwtService, configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/email-confirmation/email-confirmation.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-confirmation/email-confirmation.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { EmailService } from 'src/email/email.service';\nimport { VerificationTokenPayload } from './interface/verification-payload.interface';\nimport * as handlebars from 'handlebars';\nimport * as fs from 'fs';\nimport { join } from 'path';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class EmailConfirmationService {\n  constructor(\n    private readonly emailService: EmailService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  async sendVerificationLink(email: string) {\n    const payload: VerificationTokenPayload = { email };\n    const verificationToken = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      expiresIn: this.configService.get(\n        'JWT_VERIFICATION_TOKEN_EXPIRATION_TIME',\n      ),\n    });\n\n    const url = `${this.configService.get(\n      'EMAIL_CONFIRMATION_URL',\n    )}?token=${verificationToken}`;\n\n    const filepath = join(\n      __dirname,\n      '../../dist/email/template/email-verification.template.html',\n    );\n    const source = fs.readFileSync(filepath, 'utf8').toString();\n    const template = handlebars.compile(source);\n    const replacements = { url };\n    const htmlToSend = template(replacements);\n\n    return this.emailService.sendMail({\n      from: 'My App ',\n      to: email,\n      subject: 'Email confirmation',\n      html: htmlToSend,\n    });\n  }\n\n  async resendConfirmationLink(id: number) {\n    const user = await this.usersService.getById(id);\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.sendVerificationLink(user.email);\n  }\n\n  async decodeConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('JWT_VERIFICATION_TOKEN_SECRET'),\n      });\n\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException();\n    } catch (error) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n\n  async confirmEmail(email: string) {\n    const user = await this.usersService.getByEmail(email);\n    if (user.isEmailConfirmed) {\n      throw new BadRequestException('Email is already confirmed.');\n    }\n    await this.usersService.markEmailAsConfirmed(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { MailerModule } from '@nestjs-modules/mailer';\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailService } from './email.service';\n\n@Module({\n  imports: [ConfigModule, MailerModule],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-scheduling/dto/email-schedule.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipient\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-scheduling/dto/email-schedule.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-scheduling/dto/email-schedule.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipient\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-scheduling/dto/email-schedule.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-scheduling/dto/email-schedule.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class EmailScheduleDto {\n  @IsEmail()\n  @IsNotEmpty()\n  recipient: string;\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsDateString()\n  date: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-scheduling/email-scheduling.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-scheduling\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')\n                \n            \n\n            \n                \n                    Defined in src/email-scheduling/email-scheduling.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards } from '@nestjs/common';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\nimport { EmailScheduleDto } from './dto/email-schedule.dto';\nimport { EmailSchedulingService } from './email-scheduling.service';\n\n@Controller('email-scheduling')\n@UseGuards(JwtGuard)\nexport class EmailSchedulingController {\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService,\n  ) {}\n\n  @Post('schedule')\n  async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n    this.emailSchedulingService.scheduleEmail(emailSchedule);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailSchedulingModule.html":{"url":"modules/EmailSchedulingModule.html","title":"module - EmailSchedulingModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailSchedulingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_EmailSchedulingModule_imports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email-scheduling/email-scheduling.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailSchedulingController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailModule } from 'src/email/email.module';\nimport { EmailSchedulingController } from './email-scheduling.controller';\nimport { EmailSchedulingService } from './email-scheduling.service';\n\n@Module({\n  imports: [EmailModule],\n  controllers: [EmailSchedulingController],\n  providers: [EmailSchedulingService],\n})\nexport class EmailSchedulingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-scheduling/email-scheduling.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelAllScheduledEmails\n                            \n                            \n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(emailService: EmailService, schedulerRegistry: SchedulerRegistry)\n                    \n                \n                        \n                            \n                                Defined in src/email-scheduling/email-scheduling.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelAllScheduledEmails\n                        \n                    \n                \n            \n            \n                \ncancelAllScheduledEmails()\n                \n            \n\n\n            \n                \n                    Defined in src/email-scheduling/email-scheduling.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \nscheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/email-scheduling/email-scheduling.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { CronJob } from 'cron';\nimport { EmailService } from 'src/email/email.service';\nimport { EmailScheduleDto } from './dto/email-schedule.dto';\n\n@Injectable()\nexport class EmailSchedulingService {\n  constructor(\n    private readonly emailService: EmailService,\n    private readonly schedulerRegistry: SchedulerRegistry,\n  ) {}\n\n  scheduleEmail(emailSchedule: EmailScheduleDto) {\n    const date = new Date(emailSchedule.date);\n\n    if (date.getTime()  {\n      this.emailService.sendMail({\n        to: emailSchedule.recipient,\n        subject: emailSchedule.subject,\n        text: emailSchedule.content,\n      });\n    });\n    console.log(job);\n    this.schedulerRegistry.addCronJob(\n      `${Date.now()}-${emailSchedule.subject}`,\n      job,\n    );\n    job.start();\n  }\n\n  cancelAllScheduledEmails() {\n    this.schedulerRegistry.getCronJobs().forEach((job) => job.stop());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, mailerService: MailerService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailerService\n                                                  \n                                                        \n                                                                    MailerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: object)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                object\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { MailerService } from '@nestjs-modules/mailer';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\nimport Mail from 'nodemailer/lib/mailer';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly mailerService: MailerService,\n  ) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      port: configService.get('EMAIL_PORT'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n      secure: true,\n    });\n  }\n\n  sendMail(options: object) {\n    return this.mailerService.sendMail(options);\n\n    // return this.nodemailerTransport.sendMail(options, (err, info) => {\n    //   if (err) {\n    //     console.log(err);\n    //   }\n    //   console.log(info);\n    // });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExceptionLoggerFilter.html":{"url":"classes/ExceptionLoggerFilter.html","title":"class - ExceptionLoggerFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExceptionLoggerFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/exceptions-logger.filter.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BaseExceptionFilter\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: any, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/utils/exceptions-logger.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Catch, ArgumentsHost } from '@nestjs/common';\nimport { BaseExceptionFilter } from '@nestjs/core';\n\n@Catch()\nexport class ExceptionLoggerFilter extends BaseExceptionFilter {\n  catch(exception: any, host: ArgumentsHost): void {\n    // console.log('Exception thrown', exception);\n    super.catch(exception, host);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FindOneParams.html":{"url":"classes/FindOneParams.html","title":"class - FindOneParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FindOneParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/find-one.params.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/find-one.params.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumberString } from 'class-validator';\n\nexport class FindOneParams {\n  @IsNumberString()\n  id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsDto.html":{"url":"classes/GetCommentsDto.html","title":"class - GetCommentsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/dto/get-comments.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/comments/dto/get-comments.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsNumberString, IsOptional } from 'class-validator';\n\nexport class GetCommentsDto {\n  @IsNumberString()\n  @IsNotEmpty()\n  @IsOptional()\n  postId: number;\n}\n\nexport default GetCommentsDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsHandler.html":{"url":"classes/GetCommentsHandler.html","title":"class - GetCommentsHandler","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsHandler\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/queries/handlers/get-comments.handler.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        IQueryHandler\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commentsRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/comments/queries/handlers/get-comments.handler.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commentsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                    \n                    execute(query: GetCommentsQuery)\n                \n            \n\n\n            \n                \n                    Defined in src/comments/queries/handlers/get-comments.handler.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    query\n                                    \n                                                GetCommentsQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { GetCommentsQuery } from '../implementation/get-comments.query';\nimport Comment from '../../entity/comment.entity';\nimport { NotFoundException } from '@nestjs/common';\n\n@QueryHandler(GetCommentsQuery)\nexport class GetCommentsHandler implements IQueryHandler {\n  constructor(\n    @InjectRepository(Comment)\n    private commentsRepository: Repository,\n  ) {}\n\n  async execute(query: GetCommentsQuery) {\n    if (query.postId) {\n      const comment = await this.commentsRepository.findOne({\n        where: {\n          post: {\n            id: query.postId,\n          },\n        },\n      });\n      if (comment) {\n        return comment;\n      }\n      throw new NotFoundException(\n        'Comment with id ' + query.postId + ' not found',\n      );\n    }\n    return await this.commentsRepository.find();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCommentsQuery.html":{"url":"classes/GetCommentsQuery.html","title":"class - GetCommentsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCommentsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/comments/queries/implementation/get-comments.query.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                    Optional\n                                postId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId?: number)\n                    \n                \n                        \n                            \n                                Defined in src/comments/queries/implementation/get-comments.query.ts:1\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Readonly\n                            Optional\n                        postId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/comments/queries/implementation/get-comments.query.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class GetCommentsQuery {\n  constructor(public readonly postId?: number) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GraphqlJwtGuard.html":{"url":"injectables/GraphqlJwtGuard.html","title":"injectable - GraphqlJwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GraphqlJwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/graphql-jwt.guard.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guard/graphql-jwt.guard.ts:7\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class GraphqlJwtGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ImageProcessor.html":{"url":"classes/ImageProcessor.html","title":"class - ImageProcessor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ImageProcessor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/optimize/optimize.processor.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleOptimize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(ImageProcessor.name)\n                    \n                \n                    \n                        \n                                Defined in src/optimize/optimize.processor.ts:7\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleOptimize\n                        \n                    \n                \n            \n            \n                \nhandleOptimize(job: Job)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Process('optimize')\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.processor.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    job\n                                    \n                                            Job\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Processor, Process } from '@nestjs/bull';\nimport { Job } from 'bull';\nimport { Logger } from '@nestjs/common';\n\n@Processor('image')\nexport class ImageProcessor {\n  private readonly logger = new Logger(ImageProcessor.name);\n\n  @Process('optimize')\n  handleOptimize(job: Job) {\n    console.log('Called...');\n    for (let i = 0; i \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtGuard.html":{"url":"injectables/JwtGuard.html","title":"injectable - JwtGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshStrategy.html":{"url":"injectables/JwtRefreshStrategy.html","title":"injectable - JwtRefreshStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt-refresh.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt-refresh.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt-refresh.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/users.service';\nimport { TokenPayload } from '../interface/token-payload.interface';\n\n@Injectable()\nexport class JwtRefreshStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    return this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.id,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { UsersService } from 'src/users/users.service';\nimport { TokenPayload } from '../interface/token-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return await this.usersService.getById(payload.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorGuard.html":{"url":"injectables/JwtTwoFactorGuard.html","title":"injectable - JwtTwoFactorGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/jwt-two-factor.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport default class JwtTwoFactorGuard extends AuthGuard('jwt-two-factor') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtTwoFactorStrategy.html":{"url":"injectables/JwtTwoFactorStrategy.html","title":"injectable - JwtTwoFactorStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtTwoFactorStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt-two-factor.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt-two-factor.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/jwt-two-factor.strategy.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/users.service';\nimport { TokenPayload } from '../interface/token-payload.interface';\n@Injectable()\nexport class JwtTwoFactorStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-two-factor',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    const user = await this.userService.getById(payload.id);\n    if (!user.isTwoFactorAuthenticationEnabled) {\n      throw new UnauthorizedException('2FA required to complete process');\n    }\n    if (payload.is2FAunthenticated) {\n      return user;\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalGuard.html":{"url":"injectables/LocalGuard.html","title":"injectable - LocalGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/local.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategy/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport User from 'src/users/entity/user.entity';\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.getAuthenticatedUser(email, password);\n    if (!user) {\n      throw new HttpException(\n        'Wrong credentials provided.',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LogsMiddleware.html":{"url":"injectables/LogsMiddleware.html","title":"injectable - LogsMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LogsMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middlewares/logs.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(request: Request, response: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middlewares/logs.middleware.ts:8\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger('HTTP')\n                    \n                \n                    \n                        \n                                Defined in src/middlewares/logs.middleware.ts:6\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nclass LogsMiddleware implements NestMiddleware {\n  private readonly logger = new Logger('HTTP');\n\n  use(request: Request, response: Response, next: NextFunction) {\n    response.on('finish', () => {\n      const { method, originalUrl } = request;\n      const { statusCode, statusMessage } = response;\n\n      const message = `${method} ${originalUrl} ${statusCode} ${statusMessage}`;\n\n      if (statusCode >= 500) return this.logger.error(message);\n      if (statusCode >= 400) return this.logger.warn(message);\n      return this.logger.log(message);\n    });\n    next();\n  }\n}\n\nexport default LogsMiddleware;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Message.html":{"url":"entities/Message.html","title":"entity - Message","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/chat/entity/message.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                content\n                            \n                            \n                                    Public\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.messages)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/entity/message.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/entity/message.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/chat/entity/message.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import User from 'src/users/entity/user.entity';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nclass Message {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public content: string;\n\n  @ManyToOne(() => User, (user: User) => user.messages)\n  public author: User;\n}\n\nexport default Message;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ObjectWithIdDto.html":{"url":"classes/ObjectWithIdDto.html","title":"class - ObjectWithIdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ObjectWithIdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/types/objectWithId.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/types/objectWithId.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNumber } from 'class-validator';\n\nclass ObjectWithIdDto {\n  @IsNumber()\n  id: number;\n}\n\nexport default ObjectWithIdDto;\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OptimizeController.html":{"url":"controllers/OptimizeController.html","title":"controller - OptimizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OptimizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/optimize/optimize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                optimize\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getJobResult\n                            \n                            \n                                    Async\n                                processImage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getJobResult\n                        \n                    \n                \n            \n            \n                \n                    \n                    getJobResult(response: Response, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('image/:id')\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        processImage\n                        \n                    \n                \n            \n            \n                \n                    \n                    processImage(files: Express.Multer.File[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('image')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/optimize/optimize.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    files\n                                    \n                                            Express.Multer.File[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { InjectQueue } from '@nestjs/bull';\nimport {\n  Controller,\n  Get,\n  Param,\n  Post,\n  Res,\n  UploadedFiles,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { AnyFilesInterceptor } from '@nestjs/platform-express';\nimport { Express, Response } from 'express';\nimport { Queue } from 'bull';\n\n@Controller('optimize')\nexport class OptimizeController {\n  constructor(@InjectQueue('image') private readonly imageQueue: Queue) {}\n\n  @Post('image')\n  @UseInterceptors(AnyFilesInterceptor())\n  async processImage(@UploadedFiles() files: Express.Multer.File[]) {\n    console.log('called');\n    const job = await this.imageQueue.add('optimize', {\n      msg: 'hello',\n    });\n\n    return {\n      jobId: job.id,\n    };\n  }\n\n  @Get('image/:id')\n  async getJobResult(@Res() response: Response, @Param('id') id: string) {\n    const job = await this.imageQueue.getJob(id);\n\n    if (!job) {\n      return response.sendStatus(404);\n    }\n\n    const isCompleted = await job.isCompleted();\n\n    if (!isCompleted) {\n      return response.sendStatus(202);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OptimizeModule.html":{"url":"modules/OptimizeModule.html","title":"module - OptimizeModule","body":"\n                   \n\n\n\n\n    Modules\n    OptimizeModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/optimize/optimize.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            OptimizeController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { BullModule } from '@nestjs/bull';\nimport { Module } from '@nestjs/common';\nimport { OptimizeController } from './optimize.controller';\nimport { ImageProcessor } from './optimize.processor';\n\n@Module({\n  imports: [\n    BullModule.registerQueue({\n      name: 'image',\n    }),\n  ],\n  controllers: [OptimizeController],\n  providers: [ImageProcessor],\n})\nexport class OptimizeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationParams.html":{"url":"classes/PaginationParams.html","title":"class - PaginationParams","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationParams\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/pagination.params.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                limit\n                            \n                            \n                                    Optional\n                                offset\n                            \n                            \n                                    Optional\n                                startId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination.params.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        offset\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@Min(0)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination.params.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        startId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Type(undefined)@IsInt()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/pagination.params.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, Min, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class PaginationParams {\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  startId?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(0)\n  offset?: number;\n\n  @IsOptional()\n  @Type(() => Number)\n  @IsInt()\n  @Min(1)\n  limit?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/entity/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                author\n                            \n                            \n                                    Public\n                                categories\n                            \n                            \n                                    Public\n                                comments\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                paragraphs\n                            \n                            \n                                    Public\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Index('post_authorId_index')@ManyToOne(undefined, author => author.posts)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        categories\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Category[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@ManyToMany(undefined, category => category.posts, {})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        comments\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Comment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, comments => comments.post)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('text', {array: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/entity/post.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n  Index,\n  OneToMany,\n} from 'typeorm';\nimport User from '../../users/entity/user.entity';\nimport Comment from '../../comments/entity/comment.entity';\nimport Category from '../../categories/entity/category.entity';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nclass Post {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public title: string;\n\n  // @Column('simple-array')\n  @Column('text', { array: true })\n  public paragraphs: string[];\n\n  @Exclude()\n  @Index('post_authorId_index')\n  @ManyToOne(() => User, (author: User) => author.posts)\n  public author: User;\n\n  @Exclude()\n  @ManyToMany(() => Category, (category: Category) => category.posts, {})\n  @JoinTable()\n  public categories: Category[];\n\n  @OneToMany(() => Comment, (comments: Comment) => comments.post)\n  public comments: Comment[];\n}\n\nexport default Post;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostNotFoundException.html":{"url":"classes/PostNotFoundException.html","title":"class - PostNotFoundException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostNotFoundException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/exception/post-not-found.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    NotFoundException\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postId: number)\n                    \n                \n                        \n                            \n                                Defined in src/posts/exception/post-not-found.exception.ts:3\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotFoundException } from '@nestjs/common';\n\nexport class PostNotFoundException extends NotFoundException {\n  constructor(postId: number) {\n    super(`Post with id ${postId} not found`);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchBody.html":{"url":"interfaces/PostSearchBody.html","title":"interface - PostSearchBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/post-search-body.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            authorId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            paragraphs\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        authorId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        authorId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        paragraphs\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        paragraphs:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export default interface PostSearchBody {\n  id: number;\n  title: string;\n  paragraphs: string[];\n  authorId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PostSearchResult.html":{"url":"interfaces/PostSearchResult.html","title":"interface - PostSearchResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PostSearchResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/types/post-search-result.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            hits\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import PostSearchBody from './post-search-body.interface';\n\nexport default interface PostSearchResult {\n  id: any;\n  hits: {\n    total: number;\n    hits: Array;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                getAllPosts\n                            \n                            \n                                getPostById\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, req: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@HttpCode(201)@UseGuards(EmailConfirmationGuard)@UseGuards(JwtTwoFactorGuard)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    req\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@HttpCode(204)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \ngetAllPosts(paragraph: string, undefined: PaginationParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HttpCode(200)@UseInterceptors(CacheInterceptor)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paragraph\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                PaginationParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPostById\n                        \n                    \n                \n            \n            \n                \ngetPostById(undefined: FindOneParams)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: string, post: UpdatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/posts/posts.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  CacheInterceptor,\n  Controller,\n  Delete,\n  Get,\n  HttpCode,\n  Param,\n  Post,\n  Put,\n  Query,\n  Req,\n  UseFilters,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport JwtTwoFactorGuard from 'src/auth/guard/jwt-two-factor.guard';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\nimport { RequestUser } from 'src/auth/interface/request-user.interface';\nimport { EmailConfirmationGuard } from 'src/email-confirmation/guard/email-confirmation.guard';\nimport { ExceptionLoggerFilter } from 'src/utils/exceptions-logger.filter';\nimport { FindOneParams } from 'src/utils/find-one.params';\nimport { PaginationParams } from 'src/utils/pagination.params';\nimport { CreatePostDto, UpdatePostDto } from './dto';\nimport { PostsService } from './posts.service';\n\n@Controller('posts')\n@UseFilters(ExceptionLoggerFilter)\n@UseGuards(JwtGuard)\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get()\n  @HttpCode(200)\n  @UseInterceptors(CacheInterceptor)\n  getAllPosts(\n    @Query('paragraph') paragraph: string,\n    @Query() { offset, limit }: PaginationParams,\n  ) {\n    if (paragraph) {\n      return this.postsService.getPostsWithParagraph(paragraph, offset, limit);\n    }\n    return this.postsService.getAllPosts(offset, limit);\n  }\n\n  // @Get('search')\n  // async getPosts(@Query('q') search: string) {\n  //   if (search) {\n  //     return this.postsService.searchForPosts(search);\n  //   }\n  //   return this.postsService.getAllPosts();\n  // }\n\n  @Get(':id')\n  @HttpCode(200)\n  getPostById(@Param() { id }: FindOneParams) {\n    return this.postsService.getPostById(Number(id));\n  }\n\n  @Post()\n  @HttpCode(201)\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtTwoFactorGuard)\n  async createPost(@Body() post: CreatePostDto, @Req() req: RequestUser) {\n    return this.postsService.createPost(post, req.user);\n  }\n\n  @Put(':id')\n  @HttpCode(200)\n  async updatePost(@Param('id') id: string, @Body() post: UpdatePostDto) {\n    return this.postsService.updatePost(Number(id), post);\n  }\n\n  @Delete(':id')\n  @HttpCode(204)\n  async deletePost(@Param('id') id: string) {\n    return this.postsService.deletePost(Number(id));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PostsModule_imports\n\n\n\n\nSearchModule\n\nSearchModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nSearchModule->PostsModule\n\n\n\n\n\nPostsSearchService\n\nPostsSearchService\n\nPostsModule -->\n\nPostsSearchService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsSearchService\n                        \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SearchModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './posts.service';\nimport Post from './entity/post.entity';\nimport { SearchModule } from 'src/search/search.module';\nimport PostsSearchService from './post-search.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport * as redisStore from 'cache-manager-redis-store';\nimport { PostsResolver } from './post.resolver';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        store: redisStore,\n        host: configService.get('REDIS_HOST'),\n        port: configService.get('REDIS_PORT'),\n        ttl: 120,\n      }),\n    }),\n    TypeOrmModule.forFeature([Post]),\n    SearchModule,\n  ],\n  providers: [PostsService, PostsSearchService, PostsResolver],\n  controllers: [PostsController],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PostsResolver.html":{"url":"classes/PostsResolver.html","title":"class - PostsResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PostsResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsService: PostsService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/post.resolver.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsService\n                                                  \n                                                        \n                                                                        PostsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(createPostInput: CreatePostInput, context: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/posts/post.resolver.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createPostInput\n                                    \n                                                CreatePostInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    context\n                                    \n                                            literal type\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPosts()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/posts/post.resolver.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined)\n                \n            \n\n            \n                \n                    Defined in src/posts/post.resolver.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UseGuards } from '@nestjs/common';\nimport { Args, Context, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { GraphqlJwtGuard } from 'src/auth/guard/graphql-jwt.guard';\nimport { RequestUser } from 'src/auth/interface/request-user.interface';\nimport { CreatePostInput } from './input/post.input';\nimport { Post } from './models/post.model';\nimport { PostsService } from './posts.service';\n\n@Resolver(() => Post)\n// @UseGuards(GraphqlJwtGuard)\nexport class PostsResolver {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Query(() => [Post])\n  async getAllPosts() {\n    const posts = await this.postsService.getAllPosts();\n    return posts.items;\n  }\n\n  @Query(() => Post)\n  async getPostById(@Args('id') id: number) {\n    const posts = await this.postsService.getPostById(id);\n    return posts;\n  }\n\n  @Mutation(() => Post)\n  async createPost(\n    @Args('createPostInput') createPostInput: CreatePostInput,\n    @Context() context: { req: RequestUser },\n  ) {\n    return this.postsService.createPost(createPostInput, context.req.user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsSearchService.html":{"url":"injectables/PostsSearchService.html","title":"injectable - PostsSearchService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsSearchService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post-search.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                index\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                indexPost\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                search\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elasticsearchService: ElasticsearchService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/post-search.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elasticsearchService\n                                                  \n                                                        \n                                                                    ElasticsearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        indexPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    indexPost(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post-search.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(postId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post-search.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        search\n                        \n                    \n                \n            \n            \n                \n                    \n                    search(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post-search.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(post: Post)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/post-search.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                Post\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'posts'\n                    \n                \n                    \n                        \n                                Defined in src/posts/post-search.service.ts:9\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ElasticsearchService } from '@nestjs/elasticsearch';\nimport Post from './entity/post.entity';\nimport PostSearchBody from './types/post-search-body.interface';\nimport PostSearchResult from './types/post-search-result.interface';\n\n@Injectable()\nexport default class PostsSearchService {\n  index = 'posts';\n\n  constructor(private readonly elasticsearchService: ElasticsearchService) {}\n\n  async indexPost(post: Post) {\n    return this.elasticsearchService.index({\n      index: this.index,\n      document: {\n        id: post.id,\n        title: post.title,\n        paragraphs: post.paragraphs,\n        authorId: post.author.id,\n      },\n    });\n  }\n\n  async search(text: string) {\n    const result = await this.elasticsearchService.search({\n      index: this.index,\n      body: {\n        query: {\n          multi_match: {\n            query: text,\n            fields: ['title', 'content'],\n          },\n        },\n      },\n    });\n    const hits = result.hits.hits;\n    return hits.map((item) => item._source);\n  }\n\n  async update(post: Post) {\n    const newBody: PostSearchBody = {\n      id: post.id,\n      title: post.title,\n      paragraphs: post.paragraphs,\n      authorId: post.author.id,\n    };\n\n    const script = Object.entries(newBody).reduce((result, [key, value]) => {\n      return `${result} ctx._source.${key}='${value}';`;\n    }, '');\n\n    return this.elasticsearchService.updateByQuery({\n      index: this.index,\n      body: {\n        query: {\n          match: {\n            id: post.id,\n          },\n        },\n        script: {\n          source: script,\n        },\n      },\n    });\n  }\n\n  async remove(postId: number) {\n    this.elasticsearchService.deleteByQuery({\n      index: this.index,\n      body: {\n        query: {\n          match: {\n            id: postId,\n          },\n        },\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                deletePost\n                            \n                            \n                                    Async\n                                getAllPosts\n                            \n                            \n                                    Async\n                                getPostById\n                            \n                            \n                                    Async\n                                getPostsWithParagraph\n                            \n                            \n                                    Async\n                                searchForPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(postsRepository: Repository, postsSearchService: PostsSearchService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/posts.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        postsRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postsSearchService\n                                                  \n                                                        \n                                                                        PostsSearchService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(post: CreatePostDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    post\n                                    \n                                                CreatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePost(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPosts(offset?: number, limit?: number, startId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    startId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPostsWithParagraph\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPostsWithParagraph(paragraph: string, offset?: number, limit?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    paragraph\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    offset\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        searchForPosts\n                        \n                    \n                \n            \n            \n                \n                    \n                    searchForPosts(text: string)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    text\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(id: number, post: UpdatePostDto)\n                \n            \n\n\n            \n                \n                    Defined in src/posts/posts.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    post\n                                    \n                                                UpdatePostDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(PostsService.name)\n                    \n                \n                    \n                        \n                                Defined in src/posts/posts.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindManyOptions, In, MoreThan, Repository } from 'typeorm';\nimport Post from './entity/post.entity';\nimport { CreatePostDto, UpdatePostDto } from './dto';\nimport { PostNotFoundException } from './exception/post-not-found.exception';\nimport User from 'src/users/entity/user.entity';\nimport PostsSearchService from './post-search.service';\n\n@Injectable()\nexport class PostsService {\n  private readonly logger = new Logger(PostsService.name);\n  constructor(\n    @InjectRepository(Post) private readonly postsRepository: Repository,\n    private readonly postsSearchService: PostsSearchService,\n  ) {}\n\n  async getAllPosts(offset?: number, limit?: number, startId?: number) {\n    const where: FindManyOptions['where'] = {};\n    let seperateCount = 0;\n    if (startId) {\n      where.id = MoreThan(startId);\n      seperateCount = await this.postsRepository.count();\n    }\n    const [items, count] = await this.postsRepository.findAndCount({\n      where,\n      relations: ['categories', 'author'],\n      order: {\n        id: 'ASC',\n      },\n      skip: offset,\n      take: limit,\n    });\n\n    return {\n      count: startId ? seperateCount : count,\n      items,\n    };\n  }\n\n  async getPostById(id: number) {\n    const post = await this.postsRepository.findOne({\n      where: { id },\n      relations: ['categories', 'author'],\n      cache: true,\n    });\n    if (post) {\n      return post;\n    }\n    this.logger.warn('Tried to access a post that does not exist.');\n    throw new PostNotFoundException(id);\n  }\n\n  async createPost(post: CreatePostDto, user: User) {\n    const newPost = await this.postsRepository.create({\n      ...post,\n      author: user,\n      // categories: [{ ...post.categories }],\n    });\n    await this.postsRepository.save(newPost);\n    return newPost;\n  }\n\n  async updatePost(id: number, post: UpdatePostDto) {\n    await this.postsRepository.update(id, post);\n    const updatedPost = await this.postsRepository.findOne({\n      where: { id },\n      relations: ['categories', 'author'],\n      cache: true,\n    });\n    if (updatedPost) {\n      await this.postsSearchService.update(updatedPost);\n      return updatedPost;\n    }\n    throw new PostNotFoundException(id);\n  }\n\n  async deletePost(id: number) {\n    const deleteResponse = await this.postsRepository.delete(id);\n    if (!deleteResponse.affected) throw new PostNotFoundException(id);\n    await this.postsSearchService.remove(id);\n    return;\n  }\n\n  async searchForPosts(text: string) {\n    const results = await this.postsSearchService.search(text);\n    const ids = results.map((result) => result.id);\n    if (!ids.length) {\n      return [];\n    }\n    return this.postsRepository.find({\n      where: { id: In(ids) },\n    });\n  }\n\n  async getPostsWithParagraph(\n    paragraph: string,\n    offset?: number,\n    limit?: number,\n  ) {\n    return await this.postsRepository.query(\n      'SELECT * FROM post WHERE $1 = ANY(paragraphs) OFFSET $2 LIMIT $3',\n      [paragraph, offset, limit],\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PrivateFile.html":{"url":"entities/PrivateFile.html","title":"entity - PrivateFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PrivateFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/private-files/entity/private-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                owner\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/private-files/entity/private-file.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/private-files/entity/private-file.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, owner => owner.files)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/private-files/entity/private-file.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import User from 'src/users/entity/user.entity';\nimport { Column, PrimaryGeneratedColumn, Entity, ManyToOne } from 'typeorm';\n\n@Entity()\nclass PrivateFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public key: string;\n\n  @ManyToOne(() => User, (owner: User) => owner.files)\n  public owner: User;\n}\n\nexport default PrivateFile;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrivateFilesModule.html":{"url":"modules/PrivateFilesModule.html","title":"module - PrivateFilesModule","body":"\n                   \n\n\n\n\n    Modules\n    PrivateFilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PrivateFilesModule\n\n\n\ncluster_PrivateFilesModule_exports\n\n\n\ncluster_PrivateFilesModule_providers\n\n\n\n\nPrivateFilesService \n\nPrivateFilesService \n\n\n\nPrivateFilesModule\n\nPrivateFilesModule\n\nPrivateFilesService  -->\n\nPrivateFilesModule->PrivateFilesService \n\n\n\n\n\nPrivateFilesService\n\nPrivateFilesService\n\nPrivateFilesModule -->\n\nPrivateFilesService->PrivateFilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/private-files/private-files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrivateFilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrivateFilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport PrivateFile from './entity/private-file.entity';\nimport { PrivateFilesService } from './private-files.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PrivateFile]), ConfigModule],\n  providers: [PrivateFilesService],\n  exports: [PrivateFilesService],\n})\nexport class PrivateFilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrivateFilesService.html":{"url":"injectables/PrivateFilesService.html","title":"injectable - PrivateFilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrivateFilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/private-files/private-files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                downloadPrivateFile\n                            \n                            \n                                    Async\n                                generatePresignedUrl\n                            \n                            \n                                    Async\n                                getFileInfo\n                            \n                            \n                                    Async\n                                uploadPrivateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(privateFilesRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/private-files/private-files.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        privateFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        downloadPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    downloadPrivateFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/private-files/private-files.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generatePresignedUrl\n                        \n                    \n                \n            \n            \n                \n                    \n                    generatePresignedUrl(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/private-files/private-files.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFileInfo\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFileInfo(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/private-files/private-files.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPrivateFile(ownerId: number, dataBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/private-files/private-files.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ownerId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { S3 } from 'aws-sdk';\nimport { Repository } from 'typeorm';\nimport { v4 as uuid } from 'uuid';\nimport PrivateFile from './entity/private-file.entity';\n\n@Injectable()\nexport class PrivateFilesService {\n  constructor(\n    @InjectRepository(PrivateFile)\n    private readonly privateFilesRepository: Repository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async uploadPrivateFile(\n    ownerId: number,\n    dataBuffer: Buffer,\n    filename: string,\n  ) {\n    const id = uuid();\n    const s3 = new S3();\n    const uploadResult = await s3\n      .upload({\n        Bucket: this.configService.get('AWS_PRIVATE_BUCKET_NAME'),\n        Body: dataBuffer,\n        Key: `private/${id}-${filename}`,\n      })\n      .promise();\n\n    const newFile = await this.privateFilesRepository.create({\n      key: uploadResult.Key,\n      owner: {\n        id: ownerId,\n      },\n    });\n    await this.privateFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  async downloadPrivateFile(fileId: number) {\n    const s3 = new S3();\n    const fileInfo = await this.getFileInfo(fileId);\n\n    const stream = await s3\n      .getObject({\n        Bucket: this.configService.get('AWS_PRIVATE_BUCKET_NAME'),\n        Key: fileInfo.key,\n      })\n      .createReadStream();\n    return {\n      stream,\n      info: fileInfo,\n    };\n  }\n\n  async getFileInfo(fileId: number) {\n    const fileInfo = await this.privateFilesRepository.findOne({\n      where: { id: fileId },\n      relations: ['owner'],\n    });\n    if (fileInfo) {\n      return fileInfo;\n    }\n    throw new NotFoundException('File with id ' + fileId + ' not found.');\n  }\n\n  async generatePresignedUrl(key: string) {\n    const s3 = new S3();\n\n    return s3.getSignedUrlPromise('getObject', {\n      Bucket: this.configService.get('AWS_PRIVATE_BUCKET_NAME'),\n      Key: key,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PublicFile.html":{"url":"entities/PublicFile.html","title":"entity - PublicFile","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PublicFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/public-files/entity/public-file.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                key\n                            \n                            \n                                    Public\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/public-files/entity/public-file.entity.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/public-files/entity/public-file.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/public-files/entity/public-file.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, PrimaryGeneratedColumn, Entity } from 'typeorm';\n\n@Entity()\nclass PublicFile {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column()\n  public url: string;\n\n  @Column()\n  public key: string;\n}\n\nexport default PublicFile;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PublicFilesModule.html":{"url":"modules/PublicFilesModule.html","title":"module - PublicFilesModule","body":"\n                   \n\n\n\n\n    Modules\n    PublicFilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_PublicFilesModule\n\n\n\ncluster_PublicFilesModule_exports\n\n\n\ncluster_PublicFilesModule_providers\n\n\n\n\nPublicFilesService \n\nPublicFilesService \n\n\n\nPublicFilesModule\n\nPublicFilesModule\n\nPublicFilesService  -->\n\nPublicFilesModule->PublicFilesService \n\n\n\n\n\nPublicFilesService\n\nPublicFilesService\n\nPublicFilesModule -->\n\nPublicFilesService->PublicFilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/public-files/public-files.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PublicFilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PublicFilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport PublicFile from './entity/public-file.entity';\nimport { PublicFilesService } from './public-files.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([PublicFile]), ConfigModule],\n  providers: [PublicFilesService],\n  exports: [PublicFilesService],\n})\nexport class PublicFilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PublicFilesService.html":{"url":"injectables/PublicFilesService.html","title":"injectable - PublicFilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PublicFilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/public-files/public-files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deletePublicFile\n                            \n                            \n                                    Async\n                                deletePublicFileWithQueryRunner\n                            \n                            \n                                    Async\n                                uploadPublicFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(publicFilesRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/public-files/public-files.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        publicFilesRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFile(fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/public-files/public-files.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deletePublicFileWithQueryRunner\n                        \n                    \n                \n            \n            \n                \n                    \n                    deletePublicFileWithQueryRunner(fileId: number, queryRunner: QueryRunner)\n                \n            \n\n\n            \n                \n                    Defined in src/public-files/public-files.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    queryRunner\n                                    \n                                            QueryRunner\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        uploadPublicFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    uploadPublicFile(dataBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/public-files/public-files.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dataBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository, QueryRunner } from 'typeorm';\nimport PublicFile from './entity/public-file.entity';\nimport { v4 as uuid } from 'uuid';\nimport { S3 } from 'aws-sdk';\n\n@Injectable()\nexport class PublicFilesService {\n  constructor(\n    @InjectRepository(PublicFile)\n    private readonly publicFilesRepository: Repository,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async uploadPublicFile(dataBuffer: Buffer, filename: string) {\n    const id = uuid();\n    const s3 = new S3();\n    const uploadResult = await s3\n      .upload({\n        ACL: 'public-read',\n        Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n        Body: dataBuffer,\n        Key: `avatars/${id}-${filename}`,\n      })\n      .promise();\n\n    const newFile = await this.publicFilesRepository.create({\n      key: uploadResult.Key,\n      url: uploadResult.Location,\n    });\n    await this.publicFilesRepository.save(newFile);\n    return newFile;\n  }\n\n  async deletePublicFile(fileId: number) {\n    const file = await this.publicFilesRepository.findOne({\n      where: { id: fileId },\n    });\n    const s3 = new S3();\n    await s3\n      .deleteObject({\n        Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n        Key: file.key,\n      })\n      .promise();\n    await this.publicFilesRepository.delete(fileId);\n  }\n\n  async deletePublicFileWithQueryRunner(\n    fileId: number,\n    queryRunner: QueryRunner,\n  ) {\n    const file = await queryRunner.manager.findOne(PublicFile, {\n      where: { id: fileId },\n    });\n    const s3 = new S3();\n    await s3\n      .deleteObject({\n        Bucket: this.configService.get('AWS_PUBLIC_BUCKET_NAME'),\n        Key: file.key,\n      })\n      .promise();\n    await queryRunner.manager.delete(PublicFile, fileId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationDto.html":{"url":"classes/RegistrationDto.html","title":"class - RegistrationDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/registration.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/registration.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/registration.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/registration.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(7)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/registration.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@Matches(/^\\+[1-9]\\d{11,14}$/)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/registration.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEmail,\n  IsNotEmpty,\n  MinLength,\n  Matches,\n  IsObject,\n} from 'class-validator';\n\nexport class Address {\n  @IsString()\n  @IsNotEmpty()\n  street: string;\n\n  @IsString()\n  @IsNotEmpty()\n  city: string;\n\n  @IsString()\n  @IsNotEmpty()\n  country: string;\n}\nexport class RegistrationDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(7)\n  password: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^\\+[1-9]\\d{11,14}$/)\n  phoneNumber: string;\n\n  @IsNotEmpty()\n  @IsObject()\n  address: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestUser.html":{"url":"interfaces/RequestUser.html","title":"interface - RequestUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/request-user.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport User from 'src/users/entity/user.entity';\n\nexport interface RequestUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchModule.html":{"url":"modules/SearchModule.html","title":"module - SearchModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ElasticsearchModule } from '@nestjs/elasticsearch';\n\n@Module({\n  imports: [\n    ConfigModule,\n    ElasticsearchModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        node: configService.get('ELASTICSEARCH_NODE'),\n        auth: {\n          username: configService.get('ELASTICSEARCH_USERNAME'),\n          password: configService.get('ELASTICSEARCH_PASSWORD'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  exports: [ElasticsearchModule],\n})\nexport class SearchModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendMessageDto.html":{"url":"classes/SendMessageDto.html","title":"class - SendMessageDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendMessageDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/dto/send-message.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                message\n                            \n                            \n                                receiverPhoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        message\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/send-message.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        receiverPhoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MinLength(11)@MaxLength(14)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sms/dto/send-message.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, MinLength, MaxLength } from 'class-validator';\n\nexport class SendMessageDto {\n  @IsNotEmpty()\n  @MinLength(11)\n  @MaxLength(14)\n  @IsString()\n  receiverPhoneNumber: string;\n\n  @IsNotEmpty()\n  @IsString()\n  message: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SmsController.html":{"url":"controllers/SmsController.html","title":"controller - SmsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SmsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sms\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkVerificationCode\n                            \n                            \n                                    Async\n                                initiatePhoneNumberVerification\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        checkVerificationCode\n                        \n                    \n                \n            \n            \n                \n                    \n                    checkVerificationCode(request: RequestUser, verificationData: CheckVerificationCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('check-verification-code')\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationData\n                                    \n                                                CheckVerificationCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        initiatePhoneNumberVerification\n                        \n                    \n                \n            \n            \n                \n                    \n                    initiatePhoneNumberVerification(request: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('initiate-verification')\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(request: RequestUser, messageBody: SendMessageDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send-message')\n                \n            \n\n            \n                \n                    Defined in src/sms/sms.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    messageBody\n                                    \n                                                SendMessageDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  UseGuards,\n  Post,\n  Req,\n  BadRequestException,\n  Body,\n} from '@nestjs/common';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\nimport { RequestUser } from 'src/auth/interface/request-user.interface';\nimport { CheckVerificationCodeDto } from './dto/check-verification-code.dto';\nimport { SendMessageDto } from './dto/send-message.dto';\nimport { SmsService } from './sms.service';\n\n@Controller('sms')\n@UseGuards(JwtGuard)\nexport class SmsController {\n  constructor(private readonly smsService: SmsService) {}\n\n  @Post('initiate-verification')\n  async initiatePhoneNumberVerification(@Req() request: RequestUser) {\n    if (request.user.isPhoneNumberConfirmed) {\n      throw new BadRequestException('Phone number already confirmed');\n    }\n    await this.smsService.initiatePhoneNumberVerification(\n      request.user.phoneNumber,\n    );\n  }\n\n  @Post('check-verification-code')\n  async checkVerificationCode(\n    @Req() request: RequestUser,\n    @Body() verificationData: CheckVerificationCodeDto,\n  ) {\n    if (request.user.isPhoneNumberConfirmed) {\n      throw new BadRequestException('Phone number already confirmed');\n    }\n    await this.smsService.confirmPhoneNumber(\n      request.user.id,\n      request.user.phoneNumber,\n      verificationData.code,\n    );\n  }\n\n  @Post('send-message')\n  async sendMessage(\n    @Req() request: RequestUser,\n    @Body() messageBody: SendMessageDto,\n  ) {\n    await this.smsService.sendMessage(\n      messageBody.receiverPhoneNumber,\n      messageBody.message,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SmsModule.html":{"url":"modules/SmsModule.html","title":"module - SmsModule","body":"\n                   \n\n\n\n\n    Modules\n    SmsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nSmsModule\n\nSmsModule\n\nSmsModule -->\n\nUsersModule->SmsModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sms/sms.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SmsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SmsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SmsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { SmsService } from './sms.service';\nimport { SmsController } from './sms.controller';\nimport { UsersModule } from '../users/users.module';\n\n@Module({\n  imports: [ConfigModule, UsersModule],\n  controllers: [SmsController],\n  providers: [SmsService],\n  exports: [SmsService],\n})\nexport class SmsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SmsService.html":{"url":"injectables/SmsService.html","title":"injectable - SmsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SmsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sms/sms.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                twilioClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirmPhoneNumber\n                            \n                            \n                                initiatePhoneNumberVerification\n                            \n                            \n                                    Async\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/sms/sms.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirmPhoneNumber\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmPhoneNumber(userId: number, phoneNumber: string, verificationCode: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initiatePhoneNumberVerification\n                        \n                    \n                \n            \n            \n                \ninitiatePhoneNumberVerification(phoneNumber: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    phoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(receiverPhoneNumber: string, message: string)\n                \n            \n\n\n            \n                \n                    Defined in src/sms/sms.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    receiverPhoneNumber\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    message\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        twilioClient\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Twilio\n\n                    \n                \n                    \n                        \n                                Defined in src/sms/sms.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { UsersService } from 'src/users/users.service';\nimport { Twilio } from 'twilio';\n\n@Injectable()\nexport class SmsService {\n  private twilioClient: Twilio;\n\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly usersService: UsersService,\n  ) {\n    const accountSid = this.configService.get('TWILIO_ACCOUNT_SID');\n    const accountToken = this.configService.get('TWILIO_AUTH_TOKEN');\n\n    this.twilioClient = new Twilio(accountSid, accountToken);\n  }\n\n  initiatePhoneNumberVerification(phoneNumber: string) {\n    const serviceSid = this.configService.get(\n      'TWILIO_VERIFICATION_SERVICE_SID',\n    );\n\n    return this.twilioClient.verify\n      .services(serviceSid)\n      .verifications.create({ to: phoneNumber, channel: 'sms', locale: 'en' });\n  }\n\n  async confirmPhoneNumber(\n    userId: number,\n    phoneNumber: string,\n    verificationCode: string,\n  ) {\n    const serviceSid = this.configService.get(\n      'TWILIO_VERIFICATION_SERVICE_SID',\n    );\n\n    const result = await this.twilioClient.verify\n      .services(serviceSid)\n      .verificationChecks.create({ to: phoneNumber, code: verificationCode });\n\n    if (!result.valid || result.status !== 'approved') {\n      throw new BadRequestException('Wrong code provided');\n    }\n\n    await this.usersService.markPhoneNumberAsConfirmed(userId);\n  }\n\n  async sendMessage(receiverPhoneNumber: string, message: string) {\n    const senderPhoneNumber = this.configService.get(\n      'TWILIO_SENDER_PHONE_NUMBER',\n    );\n\n    return this.twilioClient.messages.create({\n      body: message,\n      from: senderPhoneNumber,\n      to: receiverPhoneNumber,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SubscribersController.html":{"url":"controllers/SubscribersController.html","title":"controller - SubscribersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SubscribersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subscribers/subscribers.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                subscribers\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addSubscriber\n                            \n                            \n                                    Async\n                                getAllSubscribers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addSubscriber\n                        \n                    \n                \n            \n            \n                \n                    \n                    addSubscriber(subscriber: CreateSubscriberDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n            \n                \n                    Defined in src/subscribers/subscribers.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    subscriber\n                                    \n                                                CreateSubscriberDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllSubscribers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllSubscribers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/subscribers/subscribers.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Inject, Post, UseGuards } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\nimport { CreateSubscriberDto } from './dto/create-subscriber.dto';\n\n@Controller('subscribers')\n@UseGuards(JwtGuard)\nexport class SubscribersController {\n  constructor(\n    @Inject('SUBSCRIBERS_SERVICE') private subscribersClient: ClientProxy,\n  ) {}\n\n  @Get()\n  async getAllSubscribers() {\n    try {\n      return await this.subscribersClient.send(\n        {\n          cmd: 'get-all-subscribers',\n        },\n        '',\n      );\n    } catch (error) {\n      return error;\n    }\n  }\n\n  @Post()\n  async addSubscriber(@Body() subscriber: CreateSubscriberDto) {\n    try {\n      return await this.subscribersClient.send(\n        {\n          cmd: 'add-subscriber',\n        },\n        subscriber,\n      );\n    } catch (error) {\n      return error;\n    }\n  }\n\n  //   @Post()\n  //   async addSubscriber(@Body() subscriber: CreateSubscriberDto) {\n  //     return await this.subscribersClient.emit(\n  //       {\n  //         cmd: 'add-subscriber',\n  //       },\n  //       subscriber,\n  //     );\n  //   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SubscribersModule.html":{"url":"modules/SubscribersModule.html","title":"module - SubscribersModule","body":"\n                   \n\n\n\n\n    Modules\n    SubscribersModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/subscribers/subscribers.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            SubscribersController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ClientProxyFactory, Transport } from '@nestjs/microservices';\nimport { SubscribersController } from './subscribers.controller';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [SubscribersController],\n  providers: [\n    {\n      provide: 'SUBSCRIBERS_SERVICE',\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => {\n        const user = configService.get('RABBITMQ_USER');\n        const password = configService.get('RABBITMQ_PASSWORD');\n        const host = configService.get('RABBITMQ_HOST');\n        const queueName = configService.get('RABBITMQ_QUEUE_NAME');\n\n        return ClientProxyFactory.create({\n          transport: Transport.RMQ,\n          options: {\n            urls: [`amqp://${user}:${password}@${host}`],\n            queue: queueName,\n            queueOptions: {\n              durable: true,\n            },\n          },\n        });\n      },\n    },\n  ],\n})\nexport class SubscribersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/token-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            is2FAunthenticated\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        is2FAunthenticated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        is2FAunthenticated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  id: number;\n  is2FAunthenticated: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TwoFactorAuthCodeDto.html":{"url":"classes/TwoFactorAuthCodeDto.html","title":"class - TwoFactorAuthCodeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TwoFactorAuthCodeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/two-factor-auth/dto/two-factor-auth-code.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                twoFactorAuthCode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        twoFactorAuthCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/two-factor-auth/dto/two-factor-auth-code.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class TwoFactorAuthCodeDto {\n  @IsString()\n  @IsNotEmpty()\n  twoFactorAuthCode: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TwoFactorAuthController.html":{"url":"controllers/TwoFactorAuthController.html","title":"controller - TwoFactorAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TwoFactorAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/two-factor-auth/two-factor-auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                2fa\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authenticate\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                    \n                    authenticate(request: RequestUser, undefined: TwoFactorAuthCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('authenticate')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/two-factor-auth/two-factor-auth.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(response: Response, request: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('generate')\n                \n            \n\n            \n                \n                    Defined in src/auth/two-factor-auth/two-factor-auth.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(request: RequestUser, undefined: TwoFactorAuthCodeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('turn-on')@HttpCode(200)\n                \n            \n\n            \n                \n                    Defined in src/auth/two-factor-auth/two-factor-auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                TwoFactorAuthCodeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Res,\n  UseGuards,\n  Req,\n  UnauthorizedException,\n  HttpCode,\n  Body,\n  BadRequestException,\n} from '@nestjs/common';\nimport { Response } from 'express';\nimport { UsersService } from 'src/users/users.service';\nimport { AuthService } from '../auth.service';\nimport { JwtGuard } from '../guard/jwt.guard';\nimport { RequestUser } from '../interface/request-user.interface';\nimport { TwoFactorAuthCodeDto } from './dto/two-factor-auth-code.dto';\nimport { TwoFactorAuthService } from './two-factor-auth.service';\n\n@Controller('2fa')\n@UseGuards(JwtGuard)\nexport class TwoFactorAuthController {\n  constructor(\n    private readonly twoFactorAuthService: TwoFactorAuthService,\n    private readonly usersService: UsersService,\n    private readonly authService: AuthService,\n  ) {}\n\n  @Post('generate')\n  async register(@Res() response: Response, @Req() request: RequestUser) {\n    const { otpauthUrl } =\n      await this.twoFactorAuthService.generateTwoFactorAuthenticationSecret(\n        request.user,\n      );\n\n    return this.twoFactorAuthService.pipeQrCodeStream(response, otpauthUrl);\n  }\n\n  @Post('turn-on')\n  @HttpCode(200)\n  async turnOnTwoFactorAuthentication(\n    @Req() request: RequestUser,\n    @Body() { twoFactorAuthCode }: TwoFactorAuthCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    await this.usersService.turnOnTwoFactorAuthentication(request.user.id);\n  }\n\n  @Post('authenticate')\n  @HttpCode(200)\n  async authenticate(\n    @Req() request: RequestUser,\n    @Body() { twoFactorAuthCode }: TwoFactorAuthCodeDto,\n  ) {\n    const isCodeValid =\n      this.twoFactorAuthService.isTwoFactorAuthenticationCodeValid(\n        twoFactorAuthCode,\n        request.user,\n      );\n    if (!isCodeValid) {\n      throw new UnauthorizedException('Wrong authentication code');\n    }\n    if (!request.user.isTwoFactorAuthenticationEnabled) {\n      throw new BadRequestException(\n        'Please turn-on 2FA before authenticating with it',\n      );\n    }\n    const accessTokenCookie = this.authService.getCookieWithJwtToken(\n      request.user.id,\n      true,\n    );\n\n    request.res.setHeader('Set-Cookie', [accessTokenCookie]);\n\n    return request.user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TwoFactorAuthModule.html":{"url":"modules/TwoFactorAuthModule.html","title":"module - TwoFactorAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    TwoFactorAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TwoFactorAuthModule\n\n\n\ncluster_TwoFactorAuthModule_imports\n\n\n\ncluster_TwoFactorAuthModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nTwoFactorAuthModule\n\nTwoFactorAuthModule\n\nTwoFactorAuthModule -->\n\nUsersModule->TwoFactorAuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nTwoFactorAuthModule -->\n\nAuthService->TwoFactorAuthModule\n\n\n\n\n\nTwoFactorAuthService\n\nTwoFactorAuthService\n\nTwoFactorAuthModule -->\n\nTwoFactorAuthService->TwoFactorAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/two-factor-auth/two-factor-auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            TwoFactorAuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TwoFactorAuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthService } from '../auth.service';\nimport { TwoFactorAuthController } from './two-factor-auth.controller';\nimport { TwoFactorAuthService } from './two-factor-auth.service';\n\n@Module({\n  imports: [UsersModule, ConfigModule],\n  controllers: [TwoFactorAuthController],\n  providers: [TwoFactorAuthService, AuthService, JwtService],\n})\nexport class TwoFactorAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TwoFactorAuthService.html":{"url":"injectables/TwoFactorAuthService.html","title":"injectable - TwoFactorAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TwoFactorAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/two-factor-auth/two-factor-auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateTwoFactorAuthenticationSecret\n                            \n                            \n                                isTwoFactorAuthenticationCodeValid\n                            \n                            \n                                    Async\n                                pipeQrCodeStream\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/two-factor-auth/two-factor-auth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateTwoFactorAuthenticationSecret(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/two-factor-auth/two-factor-auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isTwoFactorAuthenticationCodeValid\n                        \n                    \n                \n            \n            \n                \nisTwoFactorAuthenticationCodeValid(twoFactorAuthenticationCode: string, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/two-factor-auth/two-factor-auth.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    twoFactorAuthenticationCode\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        pipeQrCodeStream\n                        \n                    \n                \n            \n            \n                \n                    \n                    pipeQrCodeStream(stream: Response, otpauthUrl: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/two-factor-auth/two-factor-auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    stream\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    otpauthUrl\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { authenticator } from 'otplib';\nimport User from 'src/users/entity/user.entity';\nimport { UsersService } from 'src/users/users.service';\nimport { toFileStream } from 'qrcode';\nimport { Response } from 'express';\n\n@Injectable()\nexport class TwoFactorAuthService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  async generateTwoFactorAuthenticationSecret(user: User) {\n    const secret = authenticator.generateSecret();\n\n    const otpauthUrl = authenticator.keyuri(\n      user.email,\n      this.configService.get('TWO_FACTOR_AUTHENTICATION_APP_NAME'),\n      secret,\n    );\n\n    await this.usersService.setTwoFactorAuthenticationSecret(secret, user.id);\n\n    return {\n      secret,\n      otpauthUrl,\n    };\n  }\n\n  async pipeQrCodeStream(stream: Response, otpauthUrl: string) {\n    stream.setHeader('Content-Type', 'image/png');\n    return toFileStream(stream, otpauthUrl);\n  }\n\n  isTwoFactorAuthenticationCodeValid(\n    twoFactorAuthenticationCode: string,\n    user: User,\n  ) {\n    return authenticator.verify({\n      token: twoFactorAuthenticationCode,\n      secret: user.twoFactorAuthenticationSecret,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumberString()@IsNotEmpty()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/categories/dto/update-category.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { Min, IsNotEmpty, IsNumberString } from 'class-validator';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {\n  @IsNumberString()\n  @IsNotEmpty()\n  @Min(1)\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePostDto.html":{"url":"classes/UpdatePostDto.html","title":"class - UpdatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dto/update-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CreatePostDto\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                paragraphs\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()@Min(1)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dto/update-post.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paragraphs\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:6\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                        \n                            \n                                Inherited from         CreatePostDto\n\n                            \n                        \n                    \n                        \n                                Defined in         CreatePostDto:10\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Min, IsNotEmpty, IsInt } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class UpdatePostDto extends CreatePostDto {\n  @IsInt()\n  @IsNotEmpty()\n  @Min(1)\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entity/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                address\n                            \n                            \n                                    Public\n                                    Optional\n                                avatar\n                            \n                            \n                                    Public\n                                    Optional\n                                currentHashedRefreshToken\n                            \n                            \n                                    Public\n                                email\n                            \n                            \n                                    Public\n                                files\n                            \n                            \n                                    Public\n                                id\n                            \n                            \n                                    Public\n                                isEmailConfirmed\n                            \n                            \n                                    Public\n                                isPhoneNumberConfirmed\n                            \n                            \n                                    Public\n                                isTwoFactorAuthenticationEnabled\n                            \n                            \n                                    Public\n                                messages\n                            \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                password\n                            \n                            \n                                    Public\n                                phoneNumber\n                            \n                            \n                                    Public\n                                posts\n                            \n                            \n                                    Public\n                                    Optional\n                                twoFactorAuthenticationSecret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Relation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@OneToOne(undefined, {eager: true, cascade: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Relation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @JoinColumn()@OneToOne(undefined, {eager: true, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        currentHashedRefreshToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        files\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PrivateFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, privateFile => privateFile.owner)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isEmailConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isPhoneNumberConfirmed\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:50\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isTwoFactorAuthenticationEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        messages\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Message[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, message => message.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        phoneNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:64\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Optional\n                        twoFactorAuthenticationSecret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Exclude()@Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entity/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  Column,\n  PrimaryGeneratedColumn,\n  Entity,\n  Relation,\n  JoinColumn,\n  OneToOne,\n  OneToMany,\n} from 'typeorm';\nimport { Exclude } from 'class-transformer';\nimport Address from './address.entity';\nimport Post from '../../posts/entity/post.entity';\nimport PublicFile from 'src/public-files/entity/public-file.entity';\nimport PrivateFile from 'src/private-files/entity/private-file.entity';\nimport Message from 'src/chat/entity/message.entity';\n\n@Entity()\nclass User {\n  @PrimaryGeneratedColumn()\n  public id: number;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column()\n  public name: string;\n\n  @Column()\n  @Exclude()\n  public password: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public currentHashedRefreshToken?: string;\n\n  @Exclude()\n  @Column({ nullable: true })\n  public twoFactorAuthenticationSecret?: string;\n\n  @Column({ default: false })\n  public isTwoFactorAuthenticationEnabled: boolean;\n\n  @Column({ default: false })\n  public isEmailConfirmed: boolean;\n\n  @Column()\n  public phoneNumber: string;\n\n  @Column({ default: false })\n  public isPhoneNumberConfirmed: boolean;\n\n  @JoinColumn()\n  @OneToOne(() => Address, { eager: true, cascade: true })\n  public address: Relation;\n\n  @JoinColumn()\n  @OneToOne(() => PublicFile, {\n    eager: true,\n    nullable: true,\n  })\n  public avatar?: Relation;\n\n  @OneToMany(() => Post, (post: Post) => post.author)\n  public posts: Post[];\n\n  @OneToMany(() => PrivateFile, (privateFile: PrivateFile) => privateFile.owner)\n  public files: PrivateFile[];\n\n  @OneToMany(() => Message, (message: Message) => message.author)\n  public messages: Message[];\n}\n\nexport default User;\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                addPrivateFile\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(request: RequestUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('avatar')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPrivateFile(request: RequestUser, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('files')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(request: RequestUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(request: RequestUser, undefined: FindOneParams, response: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('files/:id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                FindOneParams\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    response\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  FileTypeValidator,\n  Get,\n  MaxFileSizeValidator,\n  Param,\n  ParseFilePipe,\n  Post,\n  Req,\n  Res,\n  UploadedFile,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { Express, Response } from 'express';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { JwtGuard } from 'src/auth/guard/jwt.guard';\nimport { RequestUser } from 'src/auth/interface/request-user.interface';\nimport { UsersService } from './users.service';\nimport { FindOneParams } from 'src/utils/find-one.params';\n\n@Controller('users')\n@UseGuards(JwtGuard)\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post('avatar')\n  @UseInterceptors(FileInterceptor('file'))\n  async addAvatar(\n    @Req() request: RequestUser,\n    @UploadedFile(\n      new ParseFilePipe({\n        validators: [\n          new MaxFileSizeValidator({ maxSize: 1048576 }),\n          new FileTypeValidator({ fileType: 'jpeg|jpg|png|jpng' }),\n        ],\n      }),\n    )\n    file: Express.Multer.File,\n  ) {\n    return this.usersService.addAvatar(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  // fileType: 'jpeg|jpg|png|jpng|txt|pdf|doc|docx',\n  @Post('files')\n  @UseInterceptors(FileInterceptor('file'))\n  async addPrivateFile(\n    @Req() request: RequestUser,\n    @UploadedFile(\n      new ParseFilePipe({\n        validators: [new MaxFileSizeValidator({ maxSize: 10485760 })],\n      }),\n    )\n    file: Express.Multer.File,\n  ) {\n    return this.usersService.addPrivateFile(\n      request.user.id,\n      file.buffer,\n      file.originalname,\n    );\n  }\n\n  @Get('files/:id')\n  async getPrivateFile(\n    @Req() request: RequestUser,\n    @Param() { id }: FindOneParams,\n    @Res() response: Response,\n  ) {\n    const file = await this.usersService.getPrivateFile(\n      request.user.id,\n      Number(id),\n    );\n    file.stream.pipe(response);\n  }\n\n  @Get('files')\n  async getAllPrivateFiles(@Req() request: RequestUser) {\n    return this.usersService.getAllPrivateFiles(request.user.id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nEmailModule->UsersModule\n\n\n\n\n\nPrivateFilesModule\n\nPrivateFilesModule\n\nUsersModule -->\n\nPrivateFilesModule->UsersModule\n\n\n\n\n\nPublicFilesModule\n\nPublicFilesModule\n\nUsersModule -->\n\nPublicFilesModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            PrivateFilesModule\n                        \n                        \n                            PublicFilesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport User from './entity/user.entity';\nimport Address from './entity/address.entity';\nimport { PublicFilesModule } from 'src/public-files/public-files.module';\nimport { PrivateFilesModule } from 'src/private-files/private-files.module';\nimport { EmailModule } from 'src/email/email.module';\n\n@Global()\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, Address]),\n    PublicFilesModule,\n    PrivateFilesModule,\n    EmailModule,\n  ],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addAvatar\n                            \n                            \n                                    Async\n                                addPrivateFile\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                deleteAvatar\n                            \n                            \n                                    Async\n                                deleteUserAvatar\n                            \n                            \n                                    Async\n                                getAllPrivateFiles\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getPrivateFile\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                    Async\n                                markPhoneNumberAsConfirmed\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                setTwoFactorAuthenticationSecret\n                            \n                            \n                                    Async\n                                turnOffTwoFactorAuthentication\n                            \n                            \n                                    Async\n                                turnOnTwoFactorAuthentication\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersRepository: Repository, addressRepository: Repository, publicFilesService: PublicFilesService, privateFilesService: PrivateFilesService, emailService: EmailService, dataSource: DataSource)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        addressRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publicFilesService\n                                                  \n                                                        \n                                                                        PublicFilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        privateFilesService\n                                                  \n                                                        \n                                                                        PrivateFilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                        DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    addAvatar(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    addPrivateFile(userId: number, imageBuffer: Buffer, filename: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    imageBuffer\n                                    \n                                            Buffer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAvatar(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUserAvatar\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUserAvatar(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllPrivateFiles\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllPrivateFiles(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getPrivateFile\n                        \n                    \n                \n            \n            \n                \n                    \n                    getPrivateFile(userId: number, fileId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    fileId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:157\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:194\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markPhoneNumberAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markPhoneNumberAsConfirmed(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:203\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:170\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:150\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setTwoFactorAuthenticationSecret\n                        \n                    \n                \n            \n            \n                \n                    \n                    setTwoFactorAuthenticationSecret(secret: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:176\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    secret\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOffTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOffTwoFactorAuthentication(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:188\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        turnOnTwoFactorAuthentication\n                        \n                    \n                \n            \n            \n                \n                    \n                    turnOnTwoFactorAuthentication(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:182\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { PrivateFilesService } from 'src/private-files/private-files.service';\nimport { PublicFilesService } from 'src/public-files/public-files.service';\nimport { Repository, DataSource } from 'typeorm';\nimport { CreateUserDto } from './dto';\nimport * as bcrypt from 'bcrypt';\nimport Address from './entity/address.entity';\nimport User from './entity/user.entity';\nimport { EmailService } from 'src/email/email.service';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User) private readonly usersRepository: Repository,\n    @InjectRepository(Address)\n    private readonly addressRepository: Repository,\n    private readonly publicFilesService: PublicFilesService,\n    private readonly privateFilesService: PrivateFilesService,\n    private readonly emailService: EmailService,\n    private readonly dataSource: DataSource,\n  ) {}\n\n  async getByEmail(email: string) {\n    const user = await this.usersRepository.findOneBy({\n      email,\n    });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this email address not found.',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async getById(id: number) {\n    const user = await this.usersRepository.findOneBy({\n      id,\n    });\n    if (user) {\n      return user;\n    }\n    throw new HttpException(\n      'User with this credentials not found.',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async create(userData: CreateUserDto) {\n    const newUser = await this.usersRepository.create({\n      ...userData,\n    });\n    await this.usersRepository.save(newUser);\n    return newUser;\n  }\n\n  async addAvatar(userId: number, imageBuffer: Buffer, filename: string) {\n    const user = await this.getById(userId);\n    if (user.avatar) {\n      await this.deleteAvatar(userId);\n    }\n    const avatar = await this.publicFilesService.uploadPublicFile(\n      imageBuffer,\n      filename,\n    );\n    await this.usersRepository.update(userId, {\n      ...user,\n      avatar,\n    });\n    return avatar;\n  }\n\n  async deleteAvatar(userId: number) {\n    const user = await this.getById(userId);\n    await this.deleteUserAvatar(user);\n  }\n\n  async deleteUserAvatar(user: User) {\n    const queryRunner = this.dataSource.createQueryRunner();\n\n    const fileId = user.avatar?.id;\n    if (fileId) {\n      await queryRunner.connect();\n      await queryRunner.startTransaction();\n\n      try {\n        await queryRunner.manager.update(User, user.id, {\n          ...user,\n          avatar: null,\n        });\n        await this.publicFilesService.deletePublicFileWithQueryRunner(\n          fileId,\n          queryRunner,\n        );\n        await queryRunner.commitTransaction();\n      } catch (error) {\n        await queryRunner.rollbackTransaction();\n        throw new InternalServerErrorException();\n      } finally {\n        await queryRunner.release();\n      }\n    }\n  }\n\n  async addPrivateFile(userId: number, imageBuffer: Buffer, filename: string) {\n    return this.privateFilesService.uploadPrivateFile(\n      userId,\n      imageBuffer,\n      filename,\n    );\n  }\n\n  async getPrivateFile(userId: number, fileId: number) {\n    const fileInfo = await this.privateFilesService.getFileInfo(fileId);\n    if (fileInfo.owner.id === userId) {\n      return await this.privateFilesService.downloadPrivateFile(fileId);\n    }\n    throw new UnauthorizedException('You do not have access to this file.');\n  }\n\n  async getAllPrivateFiles(userId: number) {\n    const userWithFiles = await this.usersRepository.findOne({\n      where: { id: userId },\n      relations: ['files'],\n    });\n    if (userWithFiles) {\n      return Promise.all(\n        userWithFiles.files.map(async (file) => {\n          const url = await this.privateFilesService.generatePresignedUrl(\n            file.key,\n          );\n          return {\n            ...file,\n            url,\n          };\n        }),\n      );\n    }\n    throw new NotFoundException('User with id ' + userId + ' not found.');\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, userId: number) {\n    const currentHashedRefreshToken = await bcrypt.hash(refreshToken, 10);\n    await this.usersRepository.update(userId, {\n      currentHashedRefreshToken,\n    });\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcrypt.compare(\n      refreshToken,\n      user.currentHashedRefreshToken,\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async removeRefreshToken(userId: number) {\n    return this.usersRepository.update(userId, {\n      currentHashedRefreshToken: null,\n    });\n  }\n\n  async setTwoFactorAuthenticationSecret(secret: string, userId: number) {\n    return this.usersRepository.update(userId, {\n      twoFactorAuthenticationSecret: secret,\n    });\n  }\n\n  async turnOnTwoFactorAuthentication(userId: number) {\n    return this.usersRepository.update(userId, {\n      isTwoFactorAuthenticationEnabled: true,\n    });\n  }\n\n  async turnOffTwoFactorAuthentication(userId: number) {\n    return this.usersRepository.update(userId, {\n      isTwoFactorAuthenticationEnabled: false,\n    });\n  }\n\n  async markEmailAsConfirmed(email: string) {\n    return await this.usersRepository.update(\n      { email },\n      {\n        isEmailConfirmed: true,\n      },\n    );\n  }\n\n  async markPhoneNumberAsConfirmed(id: number) {\n    return await this.usersRepository.update(\n      { id },\n      {\n        isPhoneNumberConfirmed: true,\n      },\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayload.html":{"url":"interfaces/VerificationTokenPayload.html","title":"interface - VerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-confirmation/interface/verification-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerificationTokenPayload {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                client/pages/_app.tsx\n            \n            function\n            MyApp\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/pages/api/hello.ts\n            \n            function\n            handler\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                client/pages/index.tsx\n            \n            variable\n            Home\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/auth/dto/registration.dto.ts\n            \n            class\n            Address\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/registration.dto.ts\n            \n            class\n            RegistrationDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/guard/graphql-jwt.guard.ts\n            \n            injectable\n            GraphqlJwtGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt-two-factor.guard.ts\n            \n            injectable\n            JwtTwoFactorGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/jwt.guard.ts\n            \n            injectable\n            JwtGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/local.guard.ts\n            \n            injectable\n            LocalGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interface/request-user.interface.ts\n            \n            interface\n            RequestUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interface/token-payload.interface.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt-refresh.strategy.ts\n            \n            injectable\n            JwtRefreshStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt-two-factor.strategy.ts\n            \n            injectable\n            JwtTwoFactorStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/two-factor-auth/dto/two-factor-auth-code.dto.ts\n            \n            class\n            TwoFactorAuthCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/two-factor-auth/two-factor-auth.controller.ts\n            \n            controller\n            TwoFactorAuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/two-factor-auth/two-factor-auth.service.ts\n            \n            injectable\n            TwoFactorAuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/entity/category.entity.ts\n            \n            entity\n            Category\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/categories/exception/category-not-found.exception.ts\n            \n            class\n            CategoryNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/chat/chat.gateway.ts\n            \n            class\n            ChatGateway\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/chat/chat.service.ts\n            \n            injectable\n            ChatService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/chat/entity/message.entity.ts\n            \n            entity\n            Message\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/comments/commands/handlers/create-comment.handler.ts\n            \n            class\n            CreateCommentHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/commands/implementation/create-comment.command.ts\n            \n            class\n            CreateCommentCommand\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/comments/comments.controller.ts\n            \n            controller\n            CommentsController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/dto/create-comment.dto.ts\n            \n            class\n            CreateCommentDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/dto/get-comments.dto.ts\n            \n            class\n            GetCommentsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/comments/entity/comment.entity.ts\n            \n            entity\n            Comment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/comments/queries/handlers/get-comments.handler.ts\n            \n            class\n            GetCommentsHandler\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/comments/queries/implementation/get-comments.query.ts\n            \n            class\n            GetCommentsQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email-confirmation/dto/confirmation-data.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-confirmation/email-confirmation.controller.ts\n            \n            controller\n            EmailConfirmationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email-confirmation/email-confirmation.service.ts\n            \n            injectable\n            EmailConfirmationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/email-confirmation/guard/email-confirmation.guard.ts\n            \n            guard\n            EmailConfirmationGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-confirmation/interface/verification-payload.interface.ts\n            \n            interface\n            VerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-scheduling/dto/email-schedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/email-scheduling/email-scheduling.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-scheduling/email-scheduling.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middlewares/logs.middleware.ts\n            \n            injectable\n            LogsMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/optimize/optimize.controller.ts\n            \n            controller\n            OptimizeController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/optimize/optimize.processor.ts\n            \n            class\n            ImageProcessor\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dto/update-post.dto.ts\n            \n            class\n            UpdatePostDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/entity/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/exception/post-not-found.exception.ts\n            \n            class\n            PostNotFoundException\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/input/post.input.ts\n            \n            class\n            CreatePostInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/interface/post.interface.ts\n            \n            interface\n            Post\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/models/post.model.ts\n            \n            class\n            Post\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/post-search.service.ts\n            \n            injectable\n            PostsSearchService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/posts/post.resolver.ts\n            \n            class\n            PostsResolver\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/posts/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/posts/types/post-search-body.interface.ts\n            \n            interface\n            PostSearchBody\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/posts/types/post-search-result.interface.ts\n            \n            interface\n            PostSearchResult\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/private-files/entity/private-file.entity.ts\n            \n            entity\n            PrivateFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/private-files/private-files.service.ts\n            \n            injectable\n            PrivateFilesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/public-files/entity/public-file.entity.ts\n            \n            entity\n            PublicFile\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/public-files/public-files.service.ts\n            \n            injectable\n            PublicFilesService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/sms/dto/check-verification-code.dto.ts\n            \n            class\n            CheckVerificationCodeDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/sms/dto/send-message.dto.ts\n            \n            class\n            SendMessageDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sms/sms.controller.ts\n            \n            controller\n            SmsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sms/sms.service.ts\n            \n            injectable\n            SmsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/subscribers/dto/create-subscriber.dto.ts\n            \n            class\n            CreateSubscriberDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/subscribers/subscribers.controller.ts\n            \n            controller\n            SubscribersController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            interface\n            Address\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/entity/address.entity.ts\n            \n            entity\n            Address\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entity/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/19)\n            \n        \n        \n            \n                \n                src/utils/exceptions-logger.filter.ts\n            \n            class\n            ExceptionLoggerFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/find-one.params.ts\n            \n            class\n            FindOneParams\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/get-log-level.ts\n            \n            function\n            getLogLevels\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/mock/config.service.ts\n            \n            variable\n            mockedConfigService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/mock/jwt.service.ts\n            \n            variable\n            mockedJwtService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/pagination.params.ts\n            \n            class\n            PaginationParams\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/utils/types/objectWithId.dto.ts\n            \n            class\n            ObjectWithIdDto\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.19\n        \n            @elastic/elasticsearch : ^8.4.0\n        \n            @grpc/grpc-js : ^1.7.0\n        \n            @grpc/proto-loader : ^0.7.2\n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs-modules/mailer : ^1.8.1\n        \n            @nestjs/apollo : ^10.1.0\n        \n            @nestjs/bull : ^0.6.1\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/cqrs : ^9.0.1\n        \n            @nestjs/elasticsearch : ^9.0.0\n        \n            @nestjs/graphql : ^10.1.2\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : ^1.1.0\n        \n            @nestjs/microservices : ^9.0.11\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/platform-socket.io : ^9.1.1\n        \n            @nestjs/schedule : ^2.1.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/typeorm : ^9.0.1\n        \n            @nestjs/websockets : ^9.1.1\n        \n            @types/bull : ^3.15.9\n        \n            adm-zip : ^0.5.9\n        \n            amqp-connection-manager : ^4.1.6\n        \n            amqplib : ^0.10.3\n        \n            apollo-server-core : ^3.10.2\n        \n            apollo-server-express : ^3.10.2\n        \n            aws-sdk : ^2.1218.0\n        \n            bcrypt : ^5.0.1\n        \n            bull : ^4.9.0\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie : ^0.5.0\n        \n            cookie-parser : ^1.4.6\n        \n            graphql : ^16.6.0\n        \n            handlebars : ^4.7.7\n        \n            imagemin : ^8.0.1\n        \n            imagemin-pngquant : ^9.0.2\n        \n            nodemailer : ^6.7.8\n        \n            otplib : ^12.0.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.8.0\n        \n            qrcode : ^1.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            twilio : ^3.82.0\n        \n            typeorm : ^0.3.9\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCode   (src/.../postgres-error-codes.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants/postgres-error-codes.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCode\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getLogLevels   (src/.../get-log-level.ts)\n                        \n                        \n                            handler   (client/.../hello.ts)\n                        \n                        \n                            MyApp   (client/.../_app.tsx)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils/get-log-level.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getLogLevels\n                        \n                    \n                \n            \n            \n                \ngetLogLevels(isProduction: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    isProduction\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     LogLevel[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    client/pages/api/hello.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        handler\n                        \n                    \n                \n            \n            \n                \nhandler(req: NextApiRequest, res: NextApiResponse)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            NextApiRequest\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            NextApiResponse\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    client/pages/_app.tsx\n    \n        \n        \n            \n                \n                    \n                    \n                        MyApp\n                        \n                    \n                \n            \n            \n                \nMyApp(__namedParameters: {Component: AppProps, pageProps})\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    Component\n                                    \n                                            AppProps\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pageProps\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ChatModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommentsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailConfirmationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailSchedulingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OptimizeModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrivateFilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PublicFilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SmsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SubscribersModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TwoFactorAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_ChatModule\n\n\n\ncluster_ChatModule_exports\n\n\n\ncluster_ChatModule_providers\n\n\n\ncluster_EmailConfirmationModule\n\n\n\ncluster_EmailConfirmationModule_exports\n\n\n\ncluster_EmailConfirmationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailSchedulingModule\n\n\n\ncluster_EmailSchedulingModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_PrivateFilesModule\n\n\n\ncluster_PrivateFilesModule_exports\n\n\n\ncluster_PrivateFilesModule_providers\n\n\n\ncluster_PublicFilesModule\n\n\n\ncluster_PublicFilesModule_exports\n\n\n\ncluster_PublicFilesModule_providers\n\n\n\ncluster_SmsModule\n\n\n\ncluster_SmsModule_exports\n\n\n\ncluster_SmsModule_providers\n\n\n\ncluster_TwoFactorAuthModule\n\n\n\ncluster_TwoFactorAuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nChatModule\n\nChatModule\n\nChatModule -->\n\nAuthModule->ChatModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\nAppModule -->\n\nChatModule->AppModule\n\n\n\n\n\nChatService \n\nChatService \n\nChatService  -->\n\nChatModule->ChatService \n\n\n\n\n\nCommentsModule\n\nCommentsModule\n\nAppModule -->\n\nCommentsModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEmailConfirmationModule\n\nEmailConfirmationModule\n\nAuthModule -->\n\nEmailConfirmationModule->AuthModule\n\n\n\nAppModule -->\n\nEmailConfirmationModule->AppModule\n\n\n\n\n\nEmailConfirmationService \n\nEmailConfirmationService \n\nEmailConfirmationService  -->\n\nEmailConfirmationModule->EmailConfirmationService \n\n\n\n\n\nEmailModule\n\nEmailModule\n\nEmailConfirmationModule -->\n\nEmailModule->EmailConfirmationModule\n\n\n\n\n\nEmailSchedulingModule\n\nEmailSchedulingModule\n\nEmailSchedulingModule -->\n\nEmailModule->EmailSchedulingModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nEmailModule->UsersModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\nAppModule -->\n\nEmailSchedulingModule->AppModule\n\n\n\n\n\nOptimizeModule\n\nOptimizeModule\n\nAppModule -->\n\nOptimizeModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nPrivateFilesModule\n\nPrivateFilesModule\n\nUsersModule -->\n\nPrivateFilesModule->UsersModule\n\n\n\nAppModule -->\n\nPrivateFilesModule->AppModule\n\n\n\n\n\nPrivateFilesService \n\nPrivateFilesService \n\nPrivateFilesService  -->\n\nPrivateFilesModule->PrivateFilesService \n\n\n\n\n\nPublicFilesModule\n\nPublicFilesModule\n\nUsersModule -->\n\nPublicFilesModule->UsersModule\n\n\n\nAppModule -->\n\nPublicFilesModule->AppModule\n\n\n\n\n\nPublicFilesService \n\nPublicFilesService \n\nPublicFilesService  -->\n\nPublicFilesModule->PublicFilesService \n\n\n\n\n\nSearchModule\n\nSearchModule\n\nPostsModule -->\n\nSearchModule->PostsModule\n\n\n\nAppModule -->\n\nSearchModule->AppModule\n\n\n\n\n\nSmsModule\n\nSmsModule\n\nAppModule -->\n\nSmsModule->AppModule\n\n\n\n\n\nSmsService \n\nSmsService \n\nSmsService  -->\n\nSmsModule->SmsService \n\n\n\n\n\nSubscribersModule\n\nSubscribersModule\n\nAppModule -->\n\nSubscribersModule->AppModule\n\n\n\nEmailConfirmationModule -->\n\nUsersModule->EmailConfirmationModule\n\n\n\nSmsModule -->\n\nUsersModule->SmsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nTwoFactorAuthModule\n\nTwoFactorAuthModule\n\nTwoFactorAuthModule -->\n\nUsersModule->TwoFactorAuthModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAuthModule -->\n\nTwoFactorAuthModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\nTwoFactorAuthModule -->\n\nAuthService->TwoFactorAuthModule\n\n\n\n\n\nJwtRefreshStrategy\n\nJwtRefreshStrategy\n\nAuthModule -->\n\nJwtRefreshStrategy->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nJwtTwoFactorStrategy\n\nJwtTwoFactorStrategy\n\nAuthModule -->\n\nJwtTwoFactorStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nChatService\n\nChatService\n\nChatModule -->\n\nChatService->ChatModule\n\n\n\n\n\nEmailConfirmationService\n\nEmailConfirmationService\n\nEmailConfirmationModule -->\n\nEmailConfirmationService->EmailConfirmationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nEmailSchedulingModule -->\n\nEmailSchedulingService->EmailSchedulingModule\n\n\n\n\n\nPostsSearchService\n\nPostsSearchService\n\nPostsModule -->\n\nPostsSearchService->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nPrivateFilesService\n\nPrivateFilesService\n\nPrivateFilesModule -->\n\nPrivateFilesService->PrivateFilesModule\n\n\n\n\n\nPublicFilesService\n\nPublicFilesService\n\nPublicFilesModule -->\n\nPublicFilesService->PublicFilesModule\n\n\n\n\n\nSmsService\n\nSmsService\n\nSmsModule -->\n\nSmsService->SmsModule\n\n\n\n\n\nTwoFactorAuthService\n\nTwoFactorAuthService\n\nTwoFactorAuthModule -->\n\nTwoFactorAuthService->TwoFactorAuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        18 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    11 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    8 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    23 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    30 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    7 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Tolulope Soneye\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Data   (client/.../hello.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/pages/api/hello.ts\n    \n    \n        \n            \n                \n                    \n                    Data\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Home   (client/.../index.tsx)\n                        \n                        \n                            mockedConfigService   (src/.../config.service.ts)\n                        \n                        \n                            mockedJwtService   (src/.../jwt.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    client/pages/index.tsx\n    \n        \n        \n            \n                \n                    \n                    \n                        Home\n                        \n                    \n                \n            \n                \n                    \n                        Type :     NextPage\n\n                    \n                \n                \n                    \n                        Default value : () => {\n  return (\n    \n      \n        Create Next App\n        \n        \n      \n\n      Hello world\n      \n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Velit rem\n        reprehenderit aperiam doloribus nam necessitatibus tempora. Molestias,\n        atque quibusdam! Quia.\n      \n      Hello people\n    \n  );\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mock/config.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedConfigService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  get(key: string) {\n    switch (key) {\n      case 'JWT_EXPIRATION_TIME':\n        return '7d';\n    }\n  },\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mock/jwt.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mockedJwtService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  sign: () => '',\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
